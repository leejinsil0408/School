if (typeof shbComm == "undefined") shbComm = {};
shbComm.hpeDomain = null;
shbComm.ribDomain = null;
shbComm.openSeq = 3;
shbComm.LANGUAGE = 'ko';
shbComm.ACTION_URL = "/comjsp/dataProcess.jsp";
shbComm.STATIC_REPORT_URL = "/sw/clipsoft/report/drawStaticReport.jsp";
shbComm.DYNAMIC_REPORT_URL = "/sw/clipsoft/report/drawDynamicReport.jsp";
shbComm.REQ_HEAD_DATAMAP_NM = "dmReqHead";
shbComm.REQ_HEAD_DATA_NM = "root_info";
shbComm.GRID_ROW_HEAD_HEIGHT = 50;
shbComm.GRID_ROW_HEIGHT = 51;
shbComm.GRID_TWO_ROW_HEIGHT = 76;
shbComm.GRID_THR_ROW_HEIGHT = 101;
shbComm.GRID_FOU_ROW_HEIGHT = 126;
shbComm.GRID_FOOTER_HEIGHT = 61;
shbComm.plugAllName = {
  "anchor"          : [ { conform:true,  valid:false } ]
, "autocomplete"    : [ { conform:true,  valid:true } ]
, "calendar"        : [ { conform:true,  valid:true } ]
, "chart"           : [ { conform:false, valid:false } ]
, "checkbox"        : [ { conform:true,  valid:true } ]
, "editor"          : [ { conform:true,  valid:true } ]
, "floatinglayer"   : [ { conform:false, valid:false } ]
, "grid"            : [ { conform:false, valid:false } ]
, "group"           : [ { conform:true,  valid:true } ]
, "iframe"          : [ { conform:false, valid:false } ]
, "image"           : [ { conform:true,  valid:false } ]
, "input"           : [ { conform:true,  valid:true } ]
, "inputcalendar"   : [ { conform:true,  valid:true } ]
, "menu"            : [ { conform:false, valid:false } ]
, "multiselect"     : [ { conform:false, valid:false } ]
, "multiupload"     : [ { conform:false, valid:false } ]
, "output"          : [ { conform:true,  valid:false } ]
, "pagelist"        : [ { conform:true,  valid:false } ]
, "radio"           : [ { conform:true,  valid:true } ]
, "repeat"          : [ { conform:true,  valid:true } ]
, "roundrectangle"  : [ { conform:false, valid:false } ]
, "secret"          : [ { conform:true,  valid:true } ]
, "selectbox"       : [ { conform:true,  valid:true } ]
, "slidehide"       : [ { conform:false, valid:false } ]
, "switch"          : [ { conform:false, valid:false } ]
, "tabcontainer"    : [ { conform:false, valid:false } ]
, "textarea"        : [ { conform:true,  valid:true } ]
, "textbox"         : [ { conform:true,  valid:false } ]
, "treeview"        : [ { conform:false, valid:false } ]
, "trigger"         : [ { conform:true,  valid:false } ]
, "upload"          : [ { conform:false, valid:false } ]
, "wframe"          : [ { conform:false, valid:false } ]
, "windowcontainer" : [ { conform:false, valid:false } ]
, "xhtml"           : [ { conform:false, valid:false } ]
, "xsl"             : [ { conform:false, valid:false } ]
};
// javascript exception log websquare log로 기록  
shbComm.printStackTrace = function(e) {
	if (topWin.IS_DEV !== "R" || (typeof isInternal != "undefined" && isInternal == "true")) {
		if (typeof e == 'object') {
			WebSquare.logger.printLog(e.detail);
		} else {
			WebSquare.logger.printLog(e);
		}
	}
};
//websquare log로 기록
shbComm.log = function(e){
	if (topWin.IS_DEV !== "R" || (typeof isInternal != "undefined" && isInternal == "true")) {
		WebSquare.logger.printLog(e);
	}
};
shbComm.checkUserAgent = function() {
	if (typeof shbComm.platformInfo != "undefined") return;
    shbComm.platformInfo = {
        Windows:false, Linux:false, Ubuntu:false, Fedora:false, Mac:false, iOS:false, Android:false,
        Mobile:false, x64:false, IE6:false, IE7:false, IE8:false, IE9:false,
        type: "unknown", name: "unknown"
    };
    shbComm.platformInfo.name = navigator.platform;
    if (navigator.appVersion.match("WOW64")) shbComm.platformInfo.name = "WOW64";

    if (shbComm.platformInfo.name.match(/Win32/i) || shbComm.platformInfo.name.match(/WOW64/i)) {
    	shbComm.platformInfo.Windows = true;
    	shbComm.platformInfo.type = "Windows";
        if (navigator.appVersion.match(/Win64/i)) {
        	shbComm.platformInfo.name = "Win64";
        	shbComm.platformInfo.x64 = true;
        	shbComm.platformInfo.type = "Windows64";
        }
    } else if (shbComm.platformInfo.name.match("Win64")) {
    	shbComm.platformInfo.Windows = true;
    	shbComm.platformInfo.x64 = true;
    	shbComm.platformInfo.type = "Windows64";
    } else if (shbComm.platformInfo.name.match("Linux armv")) {
    	shbComm.platformInfo.Mobile = true;
    	shbComm.platformInfo.Android = true;
    	shbComm.platformInfo.type = "Android";
    } else if (shbComm.platformInfo.name.match(/Linux/i)) {
    	shbComm.platformInfo.Linux = true;
    	shbComm.platformInfo.type = "Linux";
        if (shbComm.platformInfo.name.match(/x86_64/i)) {
        	shbComm.platformInfo.x64 = true;
        	shbComm.platformInfo.type = "Linux64";
        } else if (navigator.userAgent.match(/x86_64/i)) { //Opera
        	shbComm.platformInfo.x64 = true;
        	shbComm.platformInfo.type = "Linux64";
        }
        if (navigator.userAgent.match(/Fedora/i)) {
        	shbComm.platformInfo.Fedora = true;
        	shbComm.platformInfo.type = "Fedora";
            if (shbComm.platformInfo.x64) shbComm.platformInfo.type = "Fedora64";
        } else if (navigator.userAgent.match(/Ubuntu/i)) {
        	shbComm.platformInfo.Ubuntu = true;
        	shbComm.platformInfo.type = "Ubuntu";
            if (shbComm.platformInfo.x64) shbComm.platformInfo.type = "Ubuntu64";
        } else if (navigator.userAgent.match(/Android/i)) { //modify 20150903: Samsung Galaxy Edge
        	shbComm.platformInfo.Linux = false;
        	shbComm.platformInfo.Mobile = true;
        	shbComm.platformInfo.Android = true;
        	shbComm.platformInfo.type = "Android";
        }
    } else if (shbComm.platformInfo.name.match(/MacIntel/i)) {
    	shbComm.platformInfo.Mac = true;
    	shbComm.platformInfo.type = "Mac";
    } else if (shbComm.platformInfo.name == "iPad"
            || shbComm.platformInfo.name == "iPhone"
            || shbComm.platformInfo.name == "iPod"
            || shbComm.platformInfo.name == "iOS") {
    	shbComm.platformInfo.Mobile = true;
    	shbComm.platformInfo.iOS = true;
    	shbComm.platformInfo.type = "iOS";
    }

    if( (navigator.userAgent.match(/iPhone/i))  ||
        (navigator.userAgent.match(/iPod/i))    ||
        (navigator.userAgent.match(/iPad/i))    ||
        (navigator.userAgent.match(/Android/i))) {
    	shbComm.platformInfo.Mobile = true;
    }
    if( (navigator.userAgent.match(/Windows Phone/i)) ||
        (navigator.userAgent.match(/Windows CE/i))    ||
        (navigator.userAgent.match(/Symbian/i))       ||
        (navigator.userAgent.match(/BlackBerry/i))) {
    	shbComm.platformInfo.Mobile = true;
    }
    //modify/remove system type
    if (navigator.userAgent.match("Android") && navigator.userAgent.match("Opera Mini")) {
    	shbComm.platformInfo.Mobile = true;
    	shbComm.platformInfo.Android = true;
    	shbComm.platformInfo.type = "Android";
    }
    if (navigator.userAgent.match("MSIE 9") || navigator.userAgent.toLowerCase().match("trident/5")) {
    	shbComm.platformInfo.IE9 = true;
    // IE8 MISE7.0 나오는경우도 있음
    } else if (navigator.userAgent.match("MSIE 8") || navigator.userAgent.toLowerCase().match("/MSIE 8.0/i") || navigator.userAgent.toLowerCase().match("/MSIE 7.0/i")) {
    	shbComm.platformInfo.IE8 = true;
//    } else if (navigator.userAgent.match("MSIE 7")) {
//    	shbComm.platformInfo.IE7 = true;
//    } else if (navigator.userAgent.match("MSIE 6")) {
//    	shbComm.platformInfo.IE6 = true;
    }
    return;
};
shbComm.doComPageInit = function() {
	//siteoverlay 중지 
	if (typeof n_removeSiteoverlay == "function") n_removeSiteoverlay();
	//netfunnel 반납
	if (typeof NetFunnel_Complete == "function") {
		var menuCode = shbComm.menu.getCurrentMenuCode();
		if (shbComm.isBanking()) {
			if (menuCode == "010800000000" || menuCode == "010201010000" || menuCode == "010101100010" || menuCode == "252400000000") {	//뱅킹초화면, 이체, 거래내역조회, 로그인
				NetFunnel_Complete();
			}
		} else {
			if (menuCode == "050404070000") {	//본인정보 이용/제공조회
				NetFunnel_Complete();
			}
		}
	}

	shbComm.log(">>>>>>>>>>>>> document.referrer " + document.referrer );
	shbComm.log(">>>>>>>>>>>>> typeof shbComm._startGoPage = " + (typeof shbComm._startGoPage));
	shbComm.log(">>>>>>>>>>>>> shbComm._startGoPage = " + (shbComm._startGoPage));
	shbComm.log(">>>>>>>>>>>>> (!shbComm._startGoPage) = " + (!shbComm._startGoPage));
	shbComm.log(">>>>>>>>>>>>> shbComm.menu.getCurrentMenuCode() = " + shbComm.menu.getCurrentMenuCode());

	// CROSSWEB 존재여부 확인 
	if(typeof shbObj.incJS != "undefined" && shbObj.incJS.indexOf("CROSSWEB") >=0  ){
		var list = shbObj.incJS.split(";");
		var incJS = []; 
		for (i=0; i<list.length; i++) {
		    if (list[i] !== "CROSSWEB" && list[i] != "") {
		        incJS.push(list[i]);
		    }
		}
		incJS.push("CROSSWEB");
		shbObj.incJS = (incJS.toString()).replaceAll(",", ";");
	}
	
	
	
	
	if (!shbComm._startGoPage) {
		if (shbObj.replaceHistory && !shbComm.menu.getCurrentMenuCode().startsWith("25")) {
			// 파라미터가 있으면 해당 상세페이지로 이동. 없으면 부모화면으로 이동 (back space누른경우 대비)
			var param = shbComm.getSaveObject('pageParam', true);	// true옵션으로 파라미터가 삭제되지않게한다
			if (!param) {
				if (topWin._PAGEINFO_LIST != null) {
					if (shbObj.myParentId) {
						shbComm.goPage(shbObj.myParentId);
					} else {
						shbComm.goPage(shbComm.menu.getMenu(shbComm.menu.getCurrentMenuCode()));
					}
				// 상세페이지에서 새로고침시
				} else {
					if (!shbComm.loadMenuComplete) {
						$w.setTimeout(function() {
							if (shbComm.loadMenuComplete) {
								if (shbObj.myParentId) {
									shbComm.goPage(shbObj.myParentId);
								} else {
									shbComm.goPage(shbComm.menu.getMenu(shbComm.menu.getCurrentMenuCode()));
								}
							} else {
								shbComm.doComPageInit();
							}
						}, {
							key : 'loadMenuTimer',
							delay : 500,
							callback : function() {
								$w.clearTimeout('loadMenuTimer');
							}
						});
					}
				}
				return;
			}
		}
	}
	// 스크롤 탑으로 이동
	var target = $('#skipNavi');
	if (target.length > 0) {
		$('#skipNavi').attr('tabindex', 0).focus().unbind('blur').bind('blur', function() {
			$(this).attr('tabindex', '');
		});
	}
	shbComm._startGoPage = false;
	// 추가인증 공통정보 E2114 정보조회 (include된 화면이므로 시점차때문에 페이지 최초에 실행시켜준다)
	if (shbComm.session.isLogin() && shbObj && typeof shbObj.cert !== 'undefined' && typeof shbObj.cert.initialize === 'function') {
		// 추가인증 초기화
		shbObj.cert.initialize();
	}
	//팝업닫을때 callback에서 goPage로 화면이동시 팝업오픈(modal:true)시 스크롤바 없애는 클래스(w2modalopenedbody)를
	//closePopup에서 w2modalopenedbody 클래스 제거전에 화면 이동 되면서 클래스가 남는 현상발생(SPA여서 전체 리로딩이 아니어서)
	if( $('html').hasClass('w2modalopenedbody') ) {
		$('html').removeClass('w2modalopenedbody');
	}
	if( !jsonLib.isNullObj(WebSquare.uiplugin.popup) && (typeof WebSquare.uiplugin.popup.initialize == "function") ){ 
		shbComm.log("##### WebSquare.uiplugin.popup.initialize #####"); WebSquare.uiplugin.popup.initialize(); 
	}
	//팝업인 경우 name이 셋팅안되어 있을때 다시 셋팅한다.(라온)
	var popId = shbComm.getPopupId();
	if (popId != undefined && popId != "") {
		var obj = parent.document.getElementById(popId+"_iframe");
		if (!obj.name) obj.name = popId+"_iframe";
	}
	//라온, 이니텍에서 hide를 직접 호출하므로 카운트를 20로 먼저 셋팅한다. (카운트를 높혀서 처리하고 체크가 완료되는 시점에 무조건 1으로 셋팅한다)
	shbComm.packageCnt = 20;
	shbComm.showProcessMessage();
	var obj = document.getElementById("___processbar2");
	//보이지 않는 경우를 대비해 다시 한번 호출
	if (obj == null || obj == undefined || obj.style.display == "none") WebSquare.layer.showProcessMessage("process");
	var menuCode = shbComm.menu.getCurrentMenuCode();
	shbComm.ASTX_INSTALL = true;
	if (menuCode) {
		shbComm.checkUserAgent();
		if (menuCode == "252400000000") {
			//만기예정팝업 공지팝업 - 로그인 후 한번만 체크하여 팝업호출
			WebSquare.localStorage.removeItem("DT01010RP10_FIRST");
		}
		if (!shbComm.platformInfo.Mobile &&
			(menuCode == "252400000000" || menuCode == "200101000000" || menuCode == "200102000000" || menuCode == "210000000000" || menuCode == "400000000001" 
			||menuCode == "200501000000" || menuCode == "200502000000"|| shbComm.session.isLogin())) {
			if (shbComm.platformInfo.IE7 || shbComm.platformInfo.IE6) {
				document.location.href = "/error/errorBrowserVersion.htm";
			}
			$ASTX2.init(
				function onSuccess() {
					$_astxj.hideOverlay();
					$_astxu.log('ASTX.init() success [astx2.1]');
					shbComm.doComPageInit2();
				},
				function onFailure() {
					shbComm.ASTX_INSTALL = false;
					shbComm.packageCnt = 1;
					shbComm.hideProcessMessage();
					$_astxj.hideOverlay();

					var errno = $ASTX2.getLastError();
					$_astxu.log('ASTX.init() failure: errno='+errno);
					if(errno == $ASTX2_CONST.ERROR_NOTINST) {
						shbComm.goInstallPageForLogin("astx");
					}else {
						shbComm.goInstallPageForLogin("astx");
						//설치외의 에러인 경우
					} // end of if
				}
			);
		} else {
			shbComm.doComPageInit2();
		}
	} else {
		shbComm.doComPageInit2();
	}	
};
shbComm.goInstallPageForLogin = function(type) {
	var menuCode = shbComm.menu.getCurrentMenuCode();
	
	var pWidth = "665";
	var pHeight = "665";
	
	/*if(shbComm.LANGUAGE == "en"){
		pWidth = "665";
		pHeight = "725";
	}*/
	
	var option = {
		'title':shbComm.lang["CO00097"]
		,'w2xPath':shbComm.getSubContextPath() + '/include/popup/CO00038RP.xml'
		,'width':pWidth
		,'height':pHeight
		,'dataObject':{openType:type}
	};
	shbComm.openPopup(option);
	if (type != undefined && type == "astx") {
		shbComm.doComPageInit2("shbComm.doLoginPageInitCallback");
	}
};
shbComm.goInstallPage = function(type) {
	var menuCode = shbComm.menu.getCurrentMenuCode();
	if (menuCode == "050401070100") return;
	
	var height = "381";
	if (type == undefined || type == "1") {
		height = "381";
		if(shbComm.LANGUAGE == "en"){height = "427";}
	} else if (type == "2") {
		height = "425";
		if(shbComm.LANGUAGE == "en"){height = "471";}
	} else if (type == "3") {
		height = "436";
	} else if (type == "4") {
		height = "382";
	} else if (type == "5") {
		height = "360";
		if(shbComm.LANGUAGE == "en"){height = "382";}
	} else if (type == "6") {
		height = "403";
		if(shbComm.LANGUAGE == "en"){height = "405";}
	}
	
	var option = {
		'title':shbComm.lang["CO00098"]
		,'w2xPath':shbComm.getSubContextPath() + '/include/popup/CO00037RP.xml'
		,'width':'492'
		,'height':height
		,'dataObject':{divType:type}
	};
	shbComm.openPopup(option);
};
shbComm.doComPageInit2 = function(callback) {
	var js = shbObj.incJS;
	if (js != undefined && js.trim() != "") {
		shbComm.checkUserAgent();
		if (typeof cibGubun != "undefined" && cibGubun.toLowerCase() == "cib") {
			var menuCode = shbComm.menu.getCurrentMenuCode();
			//통합설치페이지인경우는 crossweb로딩
			if (menuCode != "252800000000") {
				//기업인경우 인증서를 사용하지 않는다.
				if (js.indexOf("CROSSWEB") > -1) {
					var sp = js.split(";");
					var sp2 = new Array();
					for (var i=0; i < sp.length; i++) {
						if (sp[i] != "CROSSWEB") {
							sp2.push(sp[i]);
						}
					}
					shbObj.incJS = sp2.join(";");
					js = shbObj.incJS;
				}
			}
		}
		if (!shbComm.platformInfo.Mobile) {
			if (js.indexOf("CROSSWEB") > -1 && js.indexOf("RAON") < 0) {
				js = "RAON;"+js;
			}
		}
		// 키보드보안 세션 갱신 타이머
		if (!shbComm.session.isLogin() && js.indexOf('RAON') > -1) {
			shbComm.setSecurityTimer();
		}
		if (callback != undefined) {
			swLib.incJS(js, "shbComm.doLoginPageInitCallback");
		} else {
			swLib.incJS(js, "shbComm.doComPageInitCallback");
		}
	} else {
		shbComm.doComPageInitCallback();
	}
};
shbComm.doLoginPageInitCallback = function() {
	//astx설치팝업이 뜨는 경우 키보드 보안 init까지만 진행한다.
	if (shbObj.incJS != undefined && shbObj.incJS.indexOf("RAON") >=0) {
		//팝업인 경우 name이 셋팅안되어 있을때 다시 셋팅한다.(라온)
		var popId = shbComm.getPopupId();
		if (popId == undefined || popId == "") {
			if (!shbComm.session.isLogin()) {
				if (typeof raonInvalidateSession != "undefined" && typeof raonInvalidateSession == "function") raonInvalidateSession();
			}
		}
	}
}; 
shbComm.doComPageInitCallback = function() {
	shbComm.CROSSWEB_INSTALL = true;
	shbComm.NXKEY_INSTALL = true;
	var menuCode = shbComm.menu.getCurrentMenuCode();
	if (menuCode != "252800000000") {
		if (shbObj.incJS != undefined && shbObj.incJS.indexOf("CROSSWEB") >=0 && !shbComm.platformInfo.Mobile) {
			var callbackName = "shbComm.doComInitechStatusCheck";
			if (shbComm.platformInfo.IE9 || shbComm.platformInfo.IE8) callbackName = "shbComm.doComInitechCheck";
			shbComm.CROSSWEB_INSTALL = false;
			cwModuleInstallWaitWithNoPopup(eval(callbackName));
		} else if (shbObj.incJS != undefined && shbObj.incJS.indexOf("RAON") >=0) {
			//라온 설치여부 확인shbComm.platformInfo = {
			if (shbComm.platformInfo.Windows && !shbComm.platformInfo.Mobile && (menuCode == "252400000000" || menuCode == "210000000000" || menuCode == "400000000001")) {
				shbComm.NXKEY_INSTALL = false;
				TOUCHENEX_CHECK.check([touchenexInfo], "shbComm.doComRaonCheck");
			} else {
				//팝업인 경우 name이 셋팅안되어 있을때 다시 셋팅한다.(라온)
				var popId = shbComm.getPopupId();
				if (popId == undefined || popId == "") {
					if (!shbComm.session.isLogin()) {
						if (typeof raonInvalidateSession != "undefined" && typeof raonInvalidateSession == "function") raonInvalidateSession();
					}
				}
				shbComm.doComBizPageStart();
			}
		} else {
			shbComm.doComBizPageStart();
		}
	} else {
		shbComm.doComBizPageStart();
	}
};
//IE8,9인 경우 이니텍 모듈이 설치되어 있지 않으면 이후 프로세스 중지
shbComm.doComInitechCheck = function(check) {
	/*
	var cwChkInfo = check.info[0];
	//Browser
	var isIE      = CROSSWEBEX_UTIL.isIE();
	var isEdge    = CROSSWEBEX_UTIL.isEdge();
	var isChrome  = CROSSWEBEX_UTIL.isChrome();
	var isSafari  = CROSSWEBEX_UTIL.isSafari();
	var isFirefox = CROSSWEBEX_UTIL.isFirefox();
	*/
	var isLinux = CROSSWEBEX_UTIL.isLinux();
	// CrossWebEX 설치안된 상태
	if (!check && !isLinux) {
		shbComm.packageCnt = 1;
		shbComm.hideProcessMessage();
		//shbComm.goInstallPage("3");
		shbComm.goInstallPage("6"); // 20170330 - CO00037RP 관련 수정
	} else {
		shbComm.CROSSWEB_INSTALL = true;
		//라온 설치여부 확인
		var menuCode = shbComm.menu.getCurrentMenuCode();
		if (shbComm.platformInfo.Windows && !shbComm.platformInfo.Mobile && (menuCode == "252400000000" || menuCode == "210000000000" || menuCode == "400000000001")) {
			shbComm.NXKEY_INSTALL = false;
			TOUCHENEX_CHECK.check([touchenexInfo], "shbComm.doComRaonCheck");
		} else {
			shbComm.doComBizPageStart();
		}
	}
};
//이니텍 설치여부만 체크
shbComm.doComInitechStatusCheck = function(check) {
	//var cwChkInfo = check.info[0];
	//Browser
	/*
	var isIE      = CROSSWEBEX_UTIL.isIE();
	var isEdge    = CROSSWEBEX_UTIL.isEdge();
	var isChrome  = CROSSWEBEX_UTIL.isChrome();
	var isSafari  = CROSSWEBEX_UTIL.isSafari();
	var isFirefox = CROSSWEBEX_UTIL.isFirefox();
	*/
	var isLinux = CROSSWEBEX_UTIL.isLinux();
	// CrossWebEX 설치안된 상태
	if (!check && !isLinux) {
		shbComm.CROSSWEB_INSTALL = false;
	} else {
		shbComm.CROSSWEB_INSTALL = true;
	}
	//라온 설치여부 확인
	var menuCode = shbComm.menu.getCurrentMenuCode();
	//개인뱅킹/홈페이지,간편서비스,프리미어 
	if (shbComm.platformInfo.Windows && !shbComm.platformInfo.Mobile && (menuCode == "252400000000" || menuCode == "210000000000" || menuCode == "400000000001")) {
		shbComm.NXKEY_INSTALL = false;
		TOUCHENEX_CHECK.check([touchenexInfo], "shbComm.doComRaonCheck");
	} else {
		shbComm.doComBizPageStart();
	}
};
shbComm.doComRaonCheck = function(check) {
	if (!check.info[0].isInstalled) {
		shbComm.packageCnt = 1;
		shbComm.hideProcessMessage();
		if (shbComm.platformInfo.IE9 || shbComm.platformInfo.IE8) {
			shbComm.goInstallPage("7");
		} else {
			shbComm.goInstallPageForLogin("raon");
		}
	} else {
		shbComm.NXKEY_INSTALL = true;
	}
	//팝업인 경우 name이 셋팅안되어 있을때 다시 셋팅한다.(라온)
	var popId = shbComm.getPopupId();
	if (popId == undefined || popId == "") {
		if (!shbComm.session.isLogin()) {
			if (typeof raonInvalidateSession != "undefined" && typeof raonInvalidateSession == "function") raonInvalidateSession();
		}
	}
	//ie8,9인 경우 키보드 보안도 필수설치(인증서 비밀번호 보안)
	if (shbComm.NXKEY_INSTALL || !(shbComm.platformInfo.IE9 || shbComm.platformInfo.IE8) ) {
		shbComm.doComBizPageStart();
	}
};
shbComm.doComBizPageStart = function() {
	var js = shbObj.incJS;
	//if (js != undefined && js.trim() != "" && js.indexOf("RAON") < 0)
	shbComm.packageCnt = 1;
	shbComm.hideProcessMessage();
	if (typeof pubApp != "undefined" && typeof pubApp.UI != "undefined") {
		pubApp.UI.init();
	}
	shbComm.callLogging('');
	if (shbObj && typeof shbObj.fncInit === 'function') {
		// 메뉴코드 체크 후 공지팝업
//		var pageInfo = shbComm.menu.getCurrentMenuInfo();
//		var menuCode = pageInfo.MENU_CODE;
//		
//		if(menuCode != "" && typeof menuCode != "undefined"){
//			// 계좌조회 화면일 경우
//			if(menuCode == "010101000000" || menuCode == "010100000000" || menuCode == "010101010000"){
//				shbComm.openLoginNoticePop();
//			}
//		}
		shbObj.fncInit();
	}
	
	WebSquare.logger.printLog(">>>>>>>>> shbComm.doComBizPageStart typeof GAHitKey \n " + (typeof GAHitKey) );
	
	// GA360 GoogleAnalysticBuild 추적코드 시작  //////////////// 
	if (typeof GAHitKey == "object" && typeof GADatasend_Page == "function") {
		
		var init_Obj = shbComm.getGAInitObject();
		if (typeof init_Obj == "object") {			
			GADatasend_Page(init_Obj);
		}
		
	}
	// GA360 GoogleAnalysticBuild 추적코드 끝  ////////////////
	
};

// GA360 GoogleAnalysticBuild GA_Init object 생성하여 리턴 
shbComm.getGAInitObject = function() {

	// gaParam json 정보가 있으면 location 기록 (이벤트, 가상페이지뷰 적재용) 
	var gaParam = shbComm.getSaveObject("gaParam", true);

	if (typeof GAHitKey == "object" && typeof gaParam === "object") {

		var init_Obj = new Object(); // 값이 없으면 set 하지 말것.
		// 맞춤 측정 기준 
		init_Obj[GACustomKey.Dimension1	] = shbComm.getGAInitCid();    //GA_CID
		//init_Obj[GACustomKey.Dimension2	] = "";    // 고객_통합그룹회원번호
		//init_Obj[GACustomKey.Dimension3	] = "";    // 고객_사업부회원번호
		//init_Obj[GACustomKey.Dimension4	] = "";    // 고객_광고식별자(GAID/IDFA)
		
		if (shbComm.session.isLogin() && shbComm.session.getSession("주민등록번호") !== "") {
			init_Obj[GACustomKey.Dimension5	] = "1";    // 고객_로그인여부
			var dm7 = ""; // 고객_연령 

			var sno = shbComm.session.getSession("주민등록번호");
			var gb = sno.substr(6,1);
			if ("9|1|5|3|7".indexOf(gb) > -1) {
				init_Obj[GACustomKey.Dimension6	] = "2";    // 고객_성별코드 2:남
			} else {
				init_Obj[GACustomKey.Dimension6	] = "1";    // 고객_성별코드 1:여
			} 
			
			if (shbComm.session.getSession("만나이") !== "") {
				dm7 = shbComm.session.getSession("만나이"); 
				dm7 = strLib.fillZero(dm7, 2, "0"); // 2자리 
				init_Obj[GACustomKey.Dimension7	] = String(dm7).substr(0,1);    // 고객_연령대코드
			} else {
				var baseDate = shbComm.getCurrentServerDate();
				if ("1|2|5|6".indexOf(gb) > -1) {
					dm7 = Number(baseDate.substr(0,4)) - Number("19" + Number(sno.substr(0,2)));
				} else {
					dm7 = Number(baseDate.substr(0,4)) - Number("20" + Number(sno.substr(0,2)));
				}
				
			    if ( baseDate.substr(4,4) < sno.substr(2,4) ) {
			    	// 생일이 안지났으면 1 살 뺀다.
			    	dm7 = dm7 -1;
			    }
			    
			    dm7 = strLib.fillZero(dm7, 2, "0"); // 2자리 
			    
				// 세션정보에 기록해둠.
				topWin.shbComm.session._LOGIN_SESSION.만나이 = dm7;
				
				init_Obj[GACustomKey.Dimension7	] = String(dm7).substr(0,1);    // 고객_연령대코드
			}
		} else {
			init_Obj[GACustomKey.Dimension5	] = "U";    // 고객_로그인여부
		}
		
		//init_Obj[GACustomKey.Dimension8	] = "";    // 고객_그룹TOPS클럽등급		
		init_Obj[GACustomKey.Dimension9	] = gaParam["Dimension9"] || "";   // 채널_사이트명 index.jsp 에서 정의함.
		init_Obj[GACustomKey.Dimension10] = gaParam["Dimension10"] || "";   // 채널_채널 유형 index.jsp 에서 정의함.
 
		// 네비게이션 array[0] ~ [4]  
		var dmDepth = shbComm._getLocationName(); 
		// gaParam 에 기록.. 검증용 
		gaParam.locationNm = dmDepth[4];
		shbComm.setSaveObject("gaParam", gaParam);
		
		init_Obj[GACustomKey.Dimension31] = dmDepth[0];    // 페이지_카테고리1Depth
		init_Obj[GACustomKey.Dimension32] = dmDepth[1];    // 페이지_카테고리2Depth
		init_Obj[GACustomKey.Dimension33] = dmDepth[2];    // 페이지_카테고리3Depth
		init_Obj[GACustomKey.Dimension34] = dmDepth[3];    // 페이지_카테고리4Depth
		init_Obj[GACustomKey.Dimension35] = dmDepth[4];    // 페이지_카테고리5Depth
		init_Obj[GACustomKey.Dimension36] = shbComm.menu.currentMenuCode;    // 페이지_화면ID
		
		if (topWin.IS_DEV === "D") {
			// 테스트여부 - 개발서버 로그 적재용   
			init_Obj[GACustomKey.Dimension41] = "Y"; 
		}
		
		// 타이틀  
		init_Obj[GAHitKey.Title] = "" + dmDepth[4];
		init_Obj[GAHitKey.UserId] = ""; 
		
		var gaURL = document.location.href.replace('#', '?dlpgid=');
		init_Obj[GAHitKey.URL] = gaURL;
		
		WebSquare.logger.printLog(">>>>>>>>> GA_Init shbComm.getGAInitObject \n " + JSON.stringify(init_Obj));

		return init_Obj;
	}
	
	return null; 
};
//GA360 GoogleAnalysticBuild 
shbComm.getGAInitCid = function(){
	  var cookieData = document.cookie;
	  var Cookies = cookieData.split(';');
	  var clientId = "";
	  for (var i=0; i<Cookies.length; i++) {
	      if (Cookies[i].split('=')[0] == '_ga' || Cookies[i].split('=')[0] == ' _ga') {
	          clientId = Cookies[i].split('=')[1];
	      }
	  }
	  if (clientId != "") {
	      clientId = clientId.substring(6);
	  }

	  if (clientId == "" && typeof ga !== "undefined") {
	      ga(function(tracker) {
	          clientId = tracker.get('clientId');
	      });
	  }
	  return clientId;
};

// GA 적재를 위한 location name 추출하여 depth array(5) 로 리턴한다. 
shbComm._getLocationName = function() {
	
	var locationNm = $("div.location").text(); // location 메뉴명 
	if (locationNm !== "") {
		// 인터넷뱅킹 or 홈페이지 메뉴 
		// location select 메뉴 삭제 후 현재 화면명만 추가 
		locationNm = locationNm.replaceAll($("div.selectList").text(), "");
		locationNm = locationNm + $("div.selectList > a").text();
		if ($("div.selectList > a").text() != shbComm.menu.currentMenuName) {
			locationNm = locationNm + ">" + shbComm.menu.currentMenuName;
		}
	} else if ($("#genMenuNm .on").text() !== "") {
		// 간편서비스 메뉴 
		locationNm = $("#txtMenuNm1").text() + ">" + $("#genMenuNm .on").text()
	} else {
		// m신한 메뉴 
		locationNm = (strLib.isEmpty(shbComm.menu.currentMenuName) ? "" : shbComm.menu.currentMenuName) ;
	}
	
	var arrNm = locationNm.split(">");
	var dmDepth1 = arrNm[0] ;
	var dmDepth2 = (typeof arrNm[1] == "undefined") ? locationNm : arrNm[0] + ">" + arrNm[1] ; 
	var dmDepth3 = (typeof arrNm[2] == "undefined") ? locationNm : arrNm[0] + ">" + arrNm[1] + ">" + arrNm[2]; 
	var dmDepth4 = (typeof arrNm[3] == "undefined") ? locationNm : arrNm[0] + ">" + arrNm[1] + ">" + arrNm[2] + ">" + arrNm[3]; 
	var dmDepth5 = locationNm; 
		
	return [dmDepth1, dmDepth2, dmDepth3, dmDepth4, dmDepth5];
};

//GA360 GoogleAnalysticBuild 가상 페이지 뷰 로깅 (switch case문 이동 시 호출 함. 개인뱅킹/m신한 )
shbComm.saveSwitchLog = function( caseId ) {

    if (typeof GAHitKey == "object" && typeof GADatasend_Page == "function") {
        /**** RM 화면에 shbObj.GA_PARAM 를 선언해 주면 shbComm.switchWframe 호출 시 자동 GA 로그 호출 됨..
    	shbObj.GA_PARAM = {
    		    "gaUrl" : "bank.shinhan.com/index.jsp?dlpgid=020102010110", // URL 
    		    "gaCode" : "", // 상품코드 
    		    "gaCodeNm" : "", // 상품명 
    		    "case1" : "1단계_약관동의", // 단계_단계명 
    		    "case2" : "2단계_정보입력",
    		    "case3" : "3단계_정보확인",
    		    "case4" : "4단계_가입완료",
    		    };
    	****/
        if (typeof shbObj.GA_PARAM == "object" && typeof shbObj.GA_PARAM[caseId] == "string") {
	
        	// 단계명 정규식 체크 : x단계_단계명_상품명 
        	if (new RegExp("[0-9]단계_([^&#]*)").test(shbObj.GA_PARAM[caseId]) == false) {
        		shbComm.alert("단계명 표기가 잘못되었습니다. </br>[" + shbObj.GA_PARAM[caseId] + "]을  </br>x단계_단계명 형식으로 설정해 주세요.");
        		return; 
        	}
        	var virtual_Obj = new Object(); 
            
    		// 네비게이션 array[0] ~ [4]  
    		var dmDepth = shbComm._getLocationName(); 

    		// 예적금 가입>1단계_약관동의_신한주거래드림(DREAM)적금
    		var title = dmDepth[4] + ">" + shbObj.GA_PARAM[caseId] + "_" + shbObj.GA_PARAM["gaCodeNm"] ; 
    		
    		virtual_Obj[GAHitKey.Title] = title;
    		virtual_Obj[GAHitKey.UserId] = "";
    		
    		var gaUrl = shbObj.GA_PARAM["gaUrl"] ;
    		if (strLib.isEmpty(shbObj.GA_PARAM["gaUrl"])) {
    			// 현재 URL
    			gaUrl = location.href; 
    			gaUrl = gaUrl.substr(0, gaUrl.indexOf(".jsp#")+4) + "?dlpgid="+shbComm.menu.currentMenuCode;
    		}    	
            
            // 'https://m.shinhan.com/rib/mnew/index.jsp?dlpgid=220011111001&code={{상품코드}}&step=1 
    		virtual_Obj[GAHitKey.URL] = gaUrl + "&code=" + shbObj.GA_PARAM["gaCode"] + "&step=" + shbObj.GA_PARAM[caseId].substr(0,1);

    		virtual_Obj[GACustomKey.Dimension31] = dmDepth[0];    // 페이지_카테고리1Depth
    		virtual_Obj[GACustomKey.Dimension32] = (dmDepth[1] == dmDepth[4] ? title : dmDepth[1]);    // 페이지_카테고리2Depth
    		virtual_Obj[GACustomKey.Dimension33] = (dmDepth[2] == dmDepth[4] ? title : dmDepth[2]);    // 페이지_카테고리3Depth
    		virtual_Obj[GACustomKey.Dimension34] = (dmDepth[3] == dmDepth[4] ? title : dmDepth[3]);    // 페이지_카테고리4Depth
    		virtual_Obj[GACustomKey.Dimension35] = title ;    // 페이지_카테고리5Depth

            WebSquare.logger.printLog(">>>>>>>>> GADatasend_Page shbComm.saveSwitchLog \n " + JSON.stringify(virtual_Obj));
            
            GADatasend_Page(virtual_Obj);
        }
    }    
    
};

//GA360 GoogleAnalysticBuild 이벤트 가상페이지 뷰 (이벤트 상세 페이지에서 호출 함. 홈페이지/m신한 ) 
shbComm.saveGAEventView = function( event_cd, event_nm ) {
	
    if (typeof GAHitKey == "object" && typeof GADatasend_Page == "function") {
        // RM 화면에서 이벤트 상세 조회 시 호출 한다...
    	
        if (!strLib.isEmpty(event_cd) && !strLib.isEmpty(event_nm)) {
	
            var virtual_Obj = new Object(); 
            
    		// 네비게이션 array[0] ~ [4]  
    		var dmDepth = shbComm._getLocationName(); 
    		
    		// 화면명 > 이벤트명 
        	var title = dmDepth[4] + ">" + event_nm ;
        	
    		virtual_Obj[GAHitKey.Title] = title;
    		virtual_Obj[GAHitKey.UserId] = "";
    		
    		var gaUrl = location.href;
    		if (gaUrl.indexOf(".jsp#") > -1) {
    			// 현재 URL
    			gaUrl = gaUrl.substr(0, gaUrl.indexOf(".jsp#")+4) + "?dlpgid="+shbComm.menu.currentMenuCode;
    		}
            
            // 'https://m.shinhan.com/rib/mnew/index.jsp?dlpgid={{메뉴코드}}&EVNT_SEQ={{이벤트번호}} 
    		virtual_Obj[GAHitKey.URL] = gaUrl + "&EVNT_SEQ=" + event_cd;

    		virtual_Obj[GACustomKey.Dimension31] = dmDepth[0];    // 페이지_카테고리1Depth
    		virtual_Obj[GACustomKey.Dimension32] = (dmDepth[1] == dmDepth[4] ? title : dmDepth[1]);    // 페이지_카테고리2Depth
    		virtual_Obj[GACustomKey.Dimension33] = (dmDepth[2] == dmDepth[4] ? title : dmDepth[2]);    // 페이지_카테고리3Depth
    		virtual_Obj[GACustomKey.Dimension34] = (dmDepth[3] == dmDepth[4] ? title : dmDepth[3]);    // 페이지_카테고리4Depth
    		virtual_Obj[GACustomKey.Dimension35] = title ;    // 페이지_카테고리5Depth
    		
            WebSquare.logger.printLog(">>>>>>>>> GADatasend_Page shbComm.saveGAEventView \n " + JSON.stringify(virtual_Obj));
            
            GADatasend_Page(virtual_Obj);
        }
    }    
    
}; 


//GA360 GoogleAnalysticBuild 검색 이벤트 (통합검색/상품간편검색 페이지에서 호출 함) 
shbComm.saveGADatasendEvent = function( _검색어, _검색결과, _검색유형 ) {
	
	if (typeof GAHitKey == "object" && typeof GADatasend_Event == "function") {
		// 통합검색/상품간편검색 RM 화면에서 검색 후 호출한다. 
  	
	    if (!strLib.isEmpty(_검색어) && !strLib.isEmpty(_검색결과) && !strLib.isEmpty(_검색유형)) {
		
			var event_Obj = new Object(); 
			  
			event_Obj[GAHitKey.Title] = "PC_메인";
			event_Obj[GAHitKey.UserId] = "";
			
			event_Obj[GAHitKey.EventCategory] = "PC_메인검색"; // {{검색어명}}
			event_Obj[GAHitKey.EventAction] = "검색"; // {{검색어명}}
			
			if (shbComm.menu.currentMenuCode == "051100019999") {
				// 상품 간편검색 
				event_Obj[GAHitKey.EventLabel] = "금융상품 간편검색"; // 이벤트 라벨
			} else {
				event_Obj[GAHitKey.EventLabel] = "키워드검색"; // 이벤트 라벨
			}
			  		
			event_Obj[GACustomKey.Dimension38] = _검색어; // {{검색어명}}
			event_Obj[GACustomKey.Dimension39] = _검색결과; // {{검색결과}}
			event_Obj[GACustomKey.Dimension40] = _검색유형; // {{검색유형}}
			  
			WebSquare.logger.printLog(">>>>>>>>> GADatasend_Event shbComm.saveGADatasendEvent \n " + JSON.stringify(event_Obj));
			  
	        GADatasend_Event(event_Obj);
	    }
    }    
  
}; 

//GA360 GoogleAnalysticBuild 이벤트태깅 (정의된 이벤트에서 호출 됨)
shbComm.saveGAEvent = function( _category, _action, _label ) {
	/**
    [규칙]
    1) 이벤트 카테고리, 이벤트 액션은 대문자로 표기
    2) 띄어쓰기는 언더바 '_'로 표기
    3) 이벤트 카테고리는 영문, 이벤트 액션, 이벤트 라벨은 한글로 표기	  
	 **/
	
	if (typeof GAHitKey == "object" && typeof GA_Event == "function") {
		
        WebSquare.logger.printLog(">>>>>>>>> GA_Event shbComm.saveGAEvent "
        		+ "\n _category=" + _category.toUpperCase() 
        		+ "\n _action=" + _action 
        		+ "\n _label=" + _label.replaceAll(" ", "_"));

        // GA360 이벤트태깅 
		GA_Event(_category.toUpperCase(), _action.toUpperCase(), _label.replaceAll(" ", "_"));	
	}
	
};

shbComm.initAllPage = function(){
	//팝업화면 자동 높이 조절
	if( typeof shbComm.callChangePopupHeight === 'function') {
		shbComm.callChangePopupHeight();
	}
	//a tag로 된 버튼 click event에 로깅 함수 바인딩 
	if( typeof shbComm.bindClickLog === 'function') {
		shbComm.bindClickLog();
	}
};
shbComm.initSerchValue = function() {
	var searchData = headerObj.SEAC_DATA;
	if (searchData != "null") {
		var searJSON = JSON.parse(searchData);
		for (var key in searJSON) {
			var obj = $w.comp[key];
			if (obj != undefined) {
				if (searJSON[key].pluginName == "radio") {
					var value2 = parseInt(searJSON[key].value, 10);
					if (value2 > -1) obj.setSelectedIndex(value2);//$("#"+key+" .w2radio_item label")[value2].click();
				} else {
					obj.setValue(searJSON[key].value);
				}
			}
		}
	}
};
// 전자서명
shbComm.makeSignData = function(submissionId, headOption) {
	var useYesSign = headOption.useYesSign;
	if (typeof headOption.useGPKI != "undefined" && headOption.useGPKI == "true") {
		if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
		if (window.frameElement) {
			if (typeof window.topWin.INI_CUSTOM_BANNER_HANDLE != "undefined") {
				//window.topWin.INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("/comjsp/sign_banner.jsp");
				window.topWin.INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("");
			}
			if (window.topWin.shbComm.LANGUAGE == "en") {
				window.topWin.INI_LANGUAGE_HANDLE.setSystemLanguage("eng");
			} else {
				window.topWin.INI_LANGUAGE_HANDLE.setSystemLanguage("kor");
			}
			window.topWin.PKCS7SignVIDData('', function(signData, option) {
				option = JSON.parse(option);
				var headOption = option.headOption;
				var submissionId = option.submissionId;
				var submitObj = $w.getSubmission(submissionId);
				submitObj.abortTrigger = false;
				var viewport = $('meta[name=viewport]'); 
				if (viewport.length > 0) {
					var clientWidth = document.documentElement.clientWidth;
					var winWidth = window.innerWidth;
					var initScale = parseInt(winWidth/(clientWidth+20)*10,10)/10;
					viewport[0].setAttribute('content', 'width=980, init-scale='+initScale+', user-scalable=yes');
				}
				if (submitObj.startSecurity != "undefined") {
					submitObj.startSecurity = false;
				}
				if (signData) {
					var frameId = option.frameId;
					// 전자서명값
					headOption['pkcs7Data'] = signData;
					headOption.signData = '';
					var submitObj = $w.getSubmission(submissionId);
					submitObj.action = '/comjsp/checkGPKICertProcess.jsp';
					topWin.window[frameId].getWindow().shbComm.executeSubmission(submissionId, headOption);
				}
			}, JSON.stringify({'frameId' : window.frameElement.id, 'submissionId' : submissionId, 'headOption' : headOption}), false);
		} else {
			if (typeof INI_CUSTOM_BANNER_HANDLE != "undefined") {
				//window.topWin.INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("/comjsp/sign_banner.jsp");
				INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("");
			}
			if (shbComm.LANGUAGE == "en") {
				INI_LANGUAGE_HANDLE.setSystemLanguage("eng");
			} else {
				INI_LANGUAGE_HANDLE.setSystemLanguage("kor");
			}
			PKCS7SignVIDData('', function(signData, option) {
				option = JSON.parse(option);
				var headOption = option.headOption;
				var submissionId = option.submissionId;
				var submitObj = $w.getSubmission(submissionId);
				submitObj.abortTrigger = false;
				var viewport = $('meta[name=viewport]'); 
				if (viewport.length > 0) {
					var clientWidth = document.documentElement.clientWidth;
					var winWidth = window.innerWidth;
					var initScale = parseInt(winWidth/(clientWidth+20)*10,10)/10;
					viewport[0].setAttribute('content', 'width=980, init-scale='+initScale+', user-scalable=yes');
				}
				if (submitObj.startSecurity != "undefined") {
					submitObj.startSecurity = false;
				}
				if (signData) {
					// 전자서명값
					headOption['pkcs7Data'] = signData;
					headOption.signData = '';
					var submitObj = $w.getSubmission(submissionId);
					submitObj.action = '/comjsp/checkGPKICertProcess.jsp';
					shbComm.executeSubmission(submissionId, headOption);
				}
			}, JSON.stringify({'submissionId' : submissionId, 'headOption' : headOption}), false);
		}		
	} else if (typeof useYesSign != "undefined" && useYesSign == "true") {
		if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
		var signNode = headOption.kftcSign;
		var signT = signNode.split(".");
		if (typeof signT == "undefined" || signT.length < 2) {
			shbComm.alert("ERROR");
		}
		var obj = WebSquare.util.getComponentById(signT[0]);
		var type = obj.initializeType;
		var iniSignData = "";
		if (type == "dataMap") {
			iniSignData = obj.get(signT[1]);
		} else if (type == "dataList") {
			//이건 어쩌지... 어찌 돌리나..
		}
		// 공인인증서 전자서명 모듈 호출
		if (window.frameElement) {
			if (typeof window.topWin.INI_CUSTOM_BANNER_HANDLE != "undefined") {
				//window.topWin.INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("/comjsp/sign_banner.jsp");
				window.topWin.INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("");
			}
			if (window.topWin.shbComm.LANGUAGE == "en") {
				window.topWin.INI_LANGUAGE_HANDLE.setSystemLanguage("eng");
			} else {
				window.topWin.INI_LANGUAGE_HANDLE.setSystemLanguage("kor");
			}
			//금결원 포맷 전자서명(전자어음)
			window.topWin.PKCS7YesSignData(iniSignData, function(signData, option) {
				option = JSON.parse(option);
				var headOption = option.headOption;
				var submissionId = option.submissionId;
				var submitObj = $w.getSubmission(submissionId);
				submitObj.abortTrigger = false;
				var viewport = $('meta[name=viewport]'); 
				if (viewport.length > 0) {
					var clientWidth = document.documentElement.clientWidth;
					var winWidth = window.innerWidth;
					var initScale = parseInt(winWidth/(clientWidth+20)*10,10)/10;
					viewport[0].setAttribute('content', 'width=980, init-scale='+initScale+', user-scalable=yes');
				}
				if (submitObj.startSecurity != "undefined") {
					submitObj.startSecurity = false;
				}
				if (signData) {
					var frameId = option.frameId;
					// 전자서명값
					headOption['pkcs7Data'] = signData;
					headOption.serviceType = headOption.serviceType === 'MV' ? 'VE' : (headOption.serviceType === 'VE' ? 'VE' :'MG');
					headOption.signData = '';
					topWin.window[frameId].getWindow().shbComm.executeSubmission(submissionId, headOption);
				}
			}, JSON.stringify({'frameId' : window.frameElement.id, 'submissionId' : submissionId, 'headOption' : headOption}), true);
		} else {
			if (typeof INI_CUSTOM_BANNER_HANDLE != "undefined") {
				//window.topWin.INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("/comjsp/sign_banner.jsp");
				INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("");
			}
			if (shbComm.LANGUAGE == "en") {
				INI_LANGUAGE_HANDLE.setSystemLanguage("eng");
			} else {
				INI_LANGUAGE_HANDLE.setSystemLanguage("kor");
			}
			PKCS7YesSignData(iniSignData, function(signData, option) {
				option = JSON.parse(option);
				var headOption = option.headOption;
				var submissionId = option.submissionId;
				var submitObj = $w.getSubmission(submissionId);
				submitObj.abortTrigger = false;
				var viewport = $('meta[name=viewport]'); 
				if (viewport.length > 0) {
					var clientWidth = document.documentElement.clientWidth;
					var winWidth = window.innerWidth;
					var initScale = parseInt(winWidth/(clientWidth+20)*10,10)/10;
					viewport[0].setAttribute('content', 'width=980, init-scale='+initScale+', user-scalable=yes');
				}
				if (submitObj.startSecurity != "undefined") {
					submitObj.startSecurity = false;
				}
				if (signData) {
					// 전자서명값
					headOption['pkcs7Data'] = signData;
					headOption.signData = '';
					headOption.serviceType = headOption.serviceType === 'MV' ? 'VE' : (headOption.serviceType === 'VE' ? 'VE' :'MG');
					shbComm.executeSubmission(submissionId, headOption);
				}
			}, JSON.stringify({'submissionId' : submissionId, 'headOption' : headOption}), true);
		}
	} else {
		
		var option = {
			serviceType : 'RS',
			serviceCode : 'REQUEST_SIGNDATA',
			signCode : '',
			callback : '',
			language : shbComm.LANGUAGE
		};
		var body = {
			REQUEST_SIGNDATA : {
			}
		};
		// 전자서명 템플릿 코드
		option.signCode = !headOption.signCode ? headOption.serviceCode : headOption.signCode;
		// 전자서명 데이터 받은 경우
		if (headOption.signData) {
			if (typeof headOption.signData === 'string') {
				headOption.signData = JSON.parse(headOption.signData);
			}
			body.REQUEST_SIGNDATA = headOption.signData;
		} else {
			// 전자서명대상 데이타
			if (typeof WebSquare.util.getComponentById('dm_S_RIB' + headOption.serviceCode) !== 'undefined' && typeof WebSquare.util.getComponentById('dl_S_RIB' + headOption.serviceCode) === 'undefined') {
				body.REQUEST_SIGNDATA = WebSquare.util.getComponentById("dm_S_RIB" + headOption.serviceCode).getJSON();
			} else if (typeof WebSquare.util.getComponentById('dm_S_RIB' + headOption.serviceCode) !== 'undefined' && typeof WebSquare.util.getComponentById('dl_S_RIB' + headOption.serviceCode) !== 'undefined') {
				body.REQUEST_SIGNDATA = [];
				body.REQUEST_SIGNDATA.push(eval("dm_S_RIB" + headOption.serviceCode).getJSON());
				body.REQUEST_SIGNDATA.push(eval("dl_S_RIB" + headOption.serviceCode).getAllJSON());
			}
		}
		
		// 전자서명 템플릿 요청 후 처리 콜백
		option.callback = (function(sid, hOption) {
			var submitObj = $w.getSubmission(sid);
			submitObj.abortTrigger = false;
			return function(result) {
				if (result.root_info && result.root_info.resultStatus != "S") {
					if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
					return;
				}
				// 공인인증서 전자서명 모듈 호출
				if (window.frameElement) {
					//팝업창일 경우에도 view 처리 
					if ("view"==hOption.useSign) {
						// 보안매체 종료처리
						if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
						
						//전자서명 확인 
						var headOption = hOption;
						headOption['pkcs7Data'] = result.SIGN_DOC.signData;
						headOption.serviceType = hOption.serviceType === 'MV' ? 'VE' : (hOption.serviceType === 'VE' ? 'VE' : (hOption.serviceType === 'CC' ? 'CC' : 'MG'));
						headOption.signData = '';
						
						var dummyPopupOption = {
							'title':'거래내용 확인' 
							,'w2xPath':shbComm.getSubContextPath() + '/include/popup/CO00055RP.xml'
							,'width':'500'
							,'height':'500'
							,'callback' : 'topWin.shbComm.makeDummySignDataCallback'
							,"dataObject": {"frameId":window.frameElement.id,"sid":sid,"headOption":headOption}
						};
						
						topWin.shbComm.openPopup(dummyPopupOption);
						
					} else {
						if (typeof window.topWin.INI_CUSTOM_BANNER_HANDLE != "undefined") {
							//window.topWin.INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("/comjsp/sign_banner.jsp");
							window.topWin.INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("");
						}
						if (window.topWin.shbComm.LANGUAGE == "en") {
							window.topWin.INI_LANGUAGE_HANDLE.setSystemLanguage("eng");
						} else {
							window.topWin.INI_LANGUAGE_HANDLE.setSystemLanguage("kor");
						}
						window.topWin.PKCS7SignedData(encodeURIComponent(result.SIGN_DOC.signData), function(signData, option) {
							var viewport = $('meta[name=viewport]'); 
							if (viewport.length > 0) {
								var clientWidth = document.documentElement.clientWidth;
								var winWidth = window.innerWidth;
								var initScale = parseInt(winWidth/(clientWidth+20)*10,10)/10;
								viewport[0].setAttribute('content', 'width=980, init-scale='+initScale+', user-scalable=yes');
							}
							if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
							if (signData) {
								option = JSON.parse(option);
								var headOption = option.headOption;
								var submissionId = option.submissionId;
								var frameId = option.frameId;
								// 전자서명값
								headOption['pkcs7Data'] = signData;
								headOption.serviceType = headOption.serviceType === 'MV' ? 'VE' : (headOption.serviceType === 'VE' ? 'VE' : (headOption.serviceType === 'CC' ? 'CC' : 'MG'));
								headOption.signData = '';
								headOption.userCallback = headOption.callback;
								headOption.callback = "shbObj.security.verifySecurityEndCallback";
								headOption.exceptionCallback = "shbObj.security.verifySecurityEndExceptionCallback";
								topWin.window[frameId].getWindow().shbComm.executeSubmission(submissionId, headOption);
							}
						}, JSON.stringify({'frameId' : window.frameElement.id, 'submissionId' : sid, 'headOption' : hOption}), true);
					}

						
				} else {
					if("dummy"==hOption.useSign) {
						
						var headOption = hOption;
						headOption['pkcs7Data'] = result.SIGN_DOC.signData;
						headOption.signData = '';
						headOption.serviceType = headOption.serviceType === 'MV' ? 'VE' : (headOption.serviceType === 'VE' ? 'VE' : (headOption.serviceType === 'CC' ? 'CC' : 'MG'));
						shbComm.executeSubmission(sid, headOption);
						
					} else if ("view"==hOption.useSign) {
						
						//전자서명 확인 
						var headOption = hOption;
						headOption['pkcs7Data'] = result.SIGN_DOC.signData;
						var dummyPopupOption = {
							'title':'거래내용 확인' 
							,'w2xPath':shbComm.getSubContextPath() + '/include/popup/CO00055RP.xml'
							,'width':'500'
							,'height':'500'
							,'callback' : 'topWin.shbComm.makeDummySignDataCallback'
							,"dataObject":{"sid":sid,"headOption":hOption}
						};
						topWin.shbComm.openPopup(dummyPopupOption);
						
					} else {
						
						// 금융 인증서 
						var hOptionUseSign = hOption.useSign.toLowerCase();
						if (( "true"==hOptionUseSign || "viewsign"==hOptionUseSign)&& shbComm.session.fincert !=null &&  shbComm.session.fincert == "Y"){
							FINCERT_WRP.init().then(function() {
								var signArray = new Array();
								signArray.push(result.SIGN_DOC.signData); 
								var contents = signArray;
								var reqParam = {};
								reqParam.polName = 'SIGN';
								return FINCERT_WRP.sign('ETC', contents, reqParam);
							}).then( function(result) {
								var viewport = $('meta[name=viewport]'); 
								if (viewport.length > 0) {
									var clientWidth = document.documentElement.clientWidth;
									var winWidth = window.innerWidth;
									var initScale = parseInt(winWidth/(clientWidth+20)*10,10)/10;
									viewport[0].setAttribute('content', 'width=980, init-scale='+initScale+', user-scalable=yes');
								}
								if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
								// 전자서명값
								var headOption = hOption;
								headOption['pkcs7Data'] = result.signedDataBase64;
								headOption.signData = '';
								headOption.serviceType = headOption.serviceType === 'MV' ? 'VE' : (headOption.serviceType === 'VE' ? 'VE' : (headOption.serviceType === 'CC' ? 'CC' : 'MG'));
								shbComm.executeSubmission(sid, headOption);
							}).catch( function(error) {
								shbComm.hideProcessMsg();
								var submitObj = $w.getSubmission(sid);
								submitObj.abortTrigger = false;
								if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
								$w.clearTimeout("clearAbortTrigger");
								shbComm.clearDuplicate();
							});
							return;
						}
						
						
						if (typeof INI_CUSTOM_BANNER_HANDLE != "undefined") {
							//INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("/comjsp/sign_banner.jsp");
							INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("");
						}
						if (shbComm.LANGUAGE == "en") {
							INI_LANGUAGE_HANDLE.setSystemLanguage("eng");
						} else {
							INI_LANGUAGE_HANDLE.setSystemLanguage("kor");
						}
						PKCS7SignedData(encodeURIComponent(result.SIGN_DOC.signData), function(signData, option) {
							var viewport = $('meta[name=viewport]'); 
							if (viewport.length > 0) {
								var clientWidth = document.documentElement.clientWidth;
								var winWidth = window.innerWidth;
								var initScale = parseInt(winWidth/(clientWidth+20)*10,10)/10;
								viewport[0].setAttribute('content', 'width=980, init-scale='+initScale+', user-scalable=yes');
							}
							if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
							if (signData) {
								option = JSON.parse(option);
								var headOption = option.headOption;
								var submissionId = option.submissionId;
								// 전자서명값
								headOption['pkcs7Data'] = signData;
								headOption.signData = '';
								headOption.serviceType = headOption.serviceType === 'MV' ? 'VE' : (headOption.serviceType === 'VE' ? 'VE' : (headOption.serviceType === 'CC' ? 'CC' : 'MG'));
								shbComm.executeSubmission(submissionId, headOption);
							}
						}, JSON.stringify({'submissionId' : sid, 'headOption' : hOption}), true);
					}
				}
			};
		}(submissionId, headOption));
		
		// execute submission
		shbComm.executeAjax('', body, option);
	}
};

//전자서명 팝업창 확인 후 dummy적재
shbComm.makeDummySignDataCallback = function(result) {
	
	if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
	var resultJson = JSON.parse(result);
	
	var headOption = resultJson.headOption;
	headOption.signData = '';
	headOption.serviceType = headOption.serviceType === 'MV' ? 'VE' : (headOption.serviceType === 'VE' ? 'VE' : (headOption.serviceType === 'CC' ? 'CC' : 'MG'));
	
	if (typeof resultJson.frameId != "undefined") {  
		// 팝업용
		topWin.window[resultJson.frameId].getWindow().shbComm.executeSubmission(resultJson.sid, headOption);
	} else { 
		shbComm.executeSubmission(resultJson.sid, headOption);
	}
}

// 공인인증모듈호출 
shbComm.makeSignVidData = function(submissionId, headOption) {
	var menuCode = shbComm.menu.getCurrentMenuCode();
//	menuCode == "252400000000" 
	if (typeof INI_CUSTOM_BANNER_HANDLE != "undefined") {
		if (menuCode == "252400000000" && topWin.shbComm.LANGUAGE == "ko") {
			INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("/comjsp/login_banner.jsp");
		} else {
			INI_CUSTOM_BANNER_HANDLE.setCustomBannerUrl("");
		}
	}
	if (topWin.shbComm.LANGUAGE == "en") { 
		INI_LANGUAGE_HANDLE.setSystemLanguage("eng");
	} else {
		INI_LANGUAGE_HANDLE.setSystemLanguage("kor"); 
	}
	try {
		PKCS7SignVIDData('', function(result, option) { 
			var viewport = $('meta[name=viewport]'); 
			if (viewport.length > 0) {
				var clientWidth = document.documentElement.clientWidth;
				var winWidth = window.innerWidth;
				var initScale = parseInt(winWidth/(clientWidth+20)*10,10)/10;
				if (shbComm.isEasyService()) {
					viewport[0].setAttribute('content', 'width=device-width,init-scale=1,maximum-scale=1.0,minimum-scale=1.0,user-scalable=no');
				} else {
					viewport[0].setAttribute('content', 'width=980, init-scale='+initScale+', user-scalable=yes');
				}
			}
			option = JSON.parse(option);
			var submitObj = $w.getSubmission(option['submissionId']);
			submitObj.abortTrigger = false;
			if (result) {
				var submissionId = option['submissionId'];
				var headOption = option['headOption'];
				headOption['pkcs7Data'] = result;
				shbComm.executeSubmission(submissionId, headOption);
			}
		}, JSON.stringify({'submissionId' : submissionId, 'headOption' : headOption}), true, headOption.isCmp && headOption.isCmp === 'true' ? true : false);
	} catch (e) {
		var submitObj = $w.getSubmission(option['submissionId']);
		submitObj.abortTrigger = false;
		shbComm.alert(shbComm.lang["CO01012"]);
	}
	return;
};
// 보안매체 검증
shbComm.verifySecurityMedia = function(submissionId, headOption) {
	// 보안매체 영역 활성화 된 경우
	if (shbObj.security) {
		if (!shbObj.security.isSecurity()) {
			return true;
		}
		var submitObj = $w.getSubmission(submissionId);
		submitObj.abortTrigger = false;	
		if (typeof shbObj.security.verifySecurityMedia === 'function') {
			shbObj.security.verifySecurityMedia(submissionId, headOption);
		} else {
			shbObj.security.startSecurity = false;
		}
	}
	// 보안매체 영역 활성화 안된 경우
	return true;
};
/* 공통 통신 함수 */
shbComm.executeSubmission = function(submissionId, headOption){
	try {
		if (headOption.serviceType == "LO") {
			if (shbComm.ASTX_INSTALL != undefined && !shbComm.ASTX_INSTALL) {
				shbComm.goInstallPageForLogin();
				return;
			}
			if (shbComm.platformInfo.IE9 || shbComm.platformInfo.IE8) {
				if (shbComm.CROSSWEB_INSTALL != undefined && !shbComm.CROSSWEB_INSTALL) {
					shbComm.goInstallPage("6");
					return;
				}
				if (shbComm.CROSSWEB_INSTALL != undefined && !shbComm.NXKEY_INSTALL) {
					shbComm.goInstallPage("7");
					return;
				}
			}
		}
		//navigator.platform 확인
		var platformName = shbComm.getCommonPopCookie("USER_PLATFORM");
		if (platformName == undefined || platformName == "") {
			shbComm.setCookie("USER_PLATFORM", navigator.platform);
		}
		var chkMandatory = false;
		if( "CC" != headOption.serviceType && "SR" != headOption.serviceType) {
			if (strLib.isEmpty(submissionId)) {
				chkMandatory = true; 
			}
		} else {
			if (strLib.isEmpty(submissionId)) {
				submissionId = 'sbm_common';
			}
		}
		var submitObj = $w.getSubmission(submissionId);
		if (submitObj.abortTrigger === true || (typeof shbObj.security != "undefined" && typeof shbObj.security.startSecurity != "undefined" && shbObj.security.startSecurity === true)) {
		//if (submitObj.abortTrigger === true) {
			shbComm.alert(shbComm.lang["CO01008"]+submissionId, null, shbComm.clearDuplicate);
			$w.setTimeout(function() {
				shbComm.yesButtonClick();
			}, {
				key : 'clearDuplicate',
				delay : 1000,
				callback : function() {
					$w.clearTimeout('clearDuplicate');
					var submitObj = $w.getSubmission(submissionId);
					submitObj.abortTrigger = false;
				}
			});
			return;
		}
		if( jsonLib.isNullObj(headOption) ) { chkMandatory = true; }
		if( strLib.isEmpty(headOption.serviceType) ) { chkMandatory = true; }
		if( "SR" != headOption.serviceType && "SG" != headOption.serviceType && "CC" != headOption.serviceType && "PC" != headOption.serviceType && strLib.isEmpty(headOption.serviceCode) ) { chkMandatory = true; }
		if( chkMandatory ) {
			shbComm.alert(shbComm.lang["CO01036"]);
			return;
		}
		if (submitObj.id !== 'sbm_session' && submitObj.id !== 'sbm_commonCode') {
			submitObj.abortTrigger = true;
			if (submitObj.id == "sbm_C2098" || submitObj.id == "sbm_C2099") {
				if (typeof shbObj.security != "undefined") {
					shbObj.security.startSecurity = true;
				}
			}
		}

		// 보안매체 검증
		if (headOption.serviceType === 'MM' || headOption.serviceType === 'MV') {
			// 보안 매체 검증서비스인 경우 이미 보안매체 검증에 한번성공한 경우에는 첫화면으로 이동시킨다
			if (shbObj.security && shbObj.security.isRequireBack) {
				submitObj.abortTrigger = false;
				var callbackStr = 'shbComm.goPage("' + shbComm.menu.getMenu(shbComm.menu.getCurrentMenuCode()) + '")';
				shbComm.alert(shbComm.lang["CO01010"], '', callbackStr);
				return;
			}
			shbComm.verifySecurityMedia(submissionId, headOption);
			//보안매체가 포함된 서비스인 경우 password인 경우 value를 clear한다.
			for (var i=0; i < shbComm._password.length; i++) {
				var obj = $w.comp[shbComm._password[i]];
				if (typeof obj != "undefined") {
					var obj2 = document.getElementById(shbComm._password[i]);
					var keep = obj2.getAttribute("userkeepvalue");
					if (typeof keep == "undefined" || keep != "true") {
						obj.setValue("");
					}
				}
			}
			return; 
		} else {
			if (headOption.useSign === 'true' || headOption.useSign === 'viewsign' || headOption.useSign || headOption.useYesSign === 'true' || headOption.useGPKI === 'true') {
				if (strLib.isEmpty(headOption.pkcs7Data)) {
					shbComm.makeSignData(submissionId, headOption);
					return;
				}
			} else if(headOption.useSign === 'dummy' || headOption.useSign === 'view') {
				if (strLib.isEmpty(headOption.pkcs7Data)) {
					shbComm.makeSignData(submissionId, headOption);
					return;
				}
			}
			if (headOption.useCert === 'true' || headOption.useCert === true) {
				if (strLib.isEmpty(headOption.pkcs7Data)) {
					shbComm.makeSignVidData(submissionId, headOption);
					return;
				}
			}
		}
		
		submitObj.hideProcessMsg = false;
		if (!headOption.hideProcess) shbComm.showProcessMsg("processing");
		
		shbComm.makeHeaderMap();
		dmReqHead.set('language', shbComm.LANGUAGE);
		if( !jsonLib.isNullObj(headOption) ) {
	    	for ( var headItem in headOption) {
				dmReqHead.set(headItem,headOption[headItem]);
			}
		}
		//if (!headOption.permitMultiTransaction) dmReqHead.set("permitMultiTransaction", "false");
		//if (!headOption.keepTransactionSession) dmReqHead.set("keepTransactionSession", "false");
		if (!headOption.clearTarget && headOption.clearTarget != "false") dmReqHead.set("clearTarget", submitObj.target);
		$w.executeSubmission(submissionId);
		dmReqHead.setEmpty();
		$w.setTimeout(function(submissionId) {
			var submitObj = $w.getSubmission(submissionId);
			submitObj.abortTrigger = false;
		}, {
			key : 'clearAbortTrigger',
			delay : 2000,
			args : [submissionId],
			callback : function() {
				$w.clearTimeout('clearAbortTrigger');
			}
		});

	} catch(e){
		shbComm.alert(shbComm.lang["CO01011"]);
		var submitObj = $w.getSubmission(submissionId);
		submitObj.abortTrigger = false;
		if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
		shbComm.printStackTrace(e);
		return;
	}
};
shbComm.clearDuplicate = function() {
	$w.clearTimeout("clearDuplicate");
};
// private 서브미션 전처리
shbComm.preSubmit = function(sbmObj) {
	var sActionUrl = sbmObj.action;
	if( strLib.isEmpty(sActionUrl) ){
		sbmObj.action = shbComm.ACTION_URL;
	}
	var url = sbmObj.action;
	if (url.indexOf("svr_type=") > 0) url = url.substring(0, url.indexOf("svr_type=")-1);
	var dmRoot = eval(shbComm.REQ_HEAD_DATAMAP_NM);
	if (url.indexOf("?") > 0) {
		url = url + "&";
	} else {
		url = url + "?";
	}
	url = url + "svr_type="+dmRoot.get("serviceType")+"&svr_code="+dmRoot.get("serviceCode");
	sbmObj.action = url;

	//@TODO 전자서명 데이터 확인 useSign, signData,
	var sRef = sbmObj.ref;
	var sAddHead = "{\"id\":\""+shbComm.REQ_HEAD_DATAMAP_NM+"\",\"key\":\""+shbComm.REQ_HEAD_DATA_NM+"\"}"; 
	if( strLib.isEmpty(sRef) ){
		sbmObj.ref = "data:json,"+sAddHead;
	} else {
		var preRef = sRef.substring(0, sRef.indexOf(","));
		var postRef = sRef.substring(sRef.indexOf(",")+1);
		if (postRef.indexOf("[") > -1) {
			if (postRef.indexOf(shbComm.REQ_HEAD_DATAMAP_NM) > -1) {
				postRef = "["+sAddHead+postRef.substring(postRef.indexOf("},")+1);
			} else {
				postRef = postRef.replace("[", "["+sAddHead+",");
			}
		} else {
			if (postRef.indexOf("{") > -1) {
				postRef = "["+sAddHead+","+postRef+"]";
			} else {
				postRef = "["+sAddHead+",\""+postRef+"\"]";
			}
		}
		sbmObj.ref = preRef+","+postRef;
	}
	shbComm.session.refreshSession();
};
//private 서브미션 http error 처리 (정상응답이 아닌 경우 )
shbComm.errorSubmit = function(e){
	shbComm.hideProcessMsg();
	var submissionId = e.id;
	var submitObj = $w.getSubmission(submissionId);
	if (submitObj.action.indexOf("checkGPKICertProcess") > 0) submitObj.action = "";
	submitObj.abortTrigger = false;
	if (typeof shbObj.security != "undefined") shbObj.security.startSecurity = false;
	$w.clearTimeout("clearAbortTrigger");
	shbComm.clearDuplicate();
	shbComm.log("shbComm.errorSubmit "+JSON.stringify(e));
	var httpCode = e.responseStatusCode;
	/*if ( httpCode == 800 || httpCode == 851 || httpCode >= 900 ){
		var warning = shbComm.getSFilterMessage(httpCode);  //SHTTP 오류 메시지를 얻음
		var oError = {"errorGubun":"http","errorCode":+warning.errorCode,"errorMsg":"동일한 오류 발생시 고객센터로 문의하시거나 가까운 영업점을 방문하시기 바랍니다.","errorDetailMsg1":warning.msg,"errorDetailMsg2":"","redirectUrl":warning.redirectUrl};
	} else {	
		var oError = {"errorGubun":"http","errorCode":+e.responseStatusCode,"errorMsg":"동일한 오류 발생시 고객센터로 문의하시거나 가까운 영업점을 방문하시기 바랍니다.","errorDetailMsg1":e.responseReasonPhrase,"errorDetailMsg2":"","redirectUrl":""};
	}*/
	var oError = {"errorGubun":"http","errorCode":+e.responseStatusCode,"errorMsg":shbComm.lang["CO01063"],"errorDetailMsg1":e.responseReasonPhrase,"errorDetailMsg2":"","redirectUrl":""};
	shbComm.viewWarningMsg(oError);//alert("통신에러 에러코드:"+e.responseStatusCode+" 에러내용:"+e.responseReasonPhrase);
};
//private 서브미션 업무에러 처리
shbComm.errorHandler = function(obj, submissionId){
	shbComm.hideProcessMsg();
	var submitObj = $w.getSubmission(submissionId);
	submitObj.abortTrigger = false;
	$w.clearTimeout("clearAbortTrigger");
	shbComm.clearDuplicate();
	var bResult = false;
	if( !jsonLib.isNullObj(obj) ){ 
		if( strLib.isEmpty(obj.root_info.resultStatus) || "S" != obj.root_info.resultStatus ){
			//var oError = {"errorCode":obj.root_info.errorCode,"errorMsg":obj.root_info.errorMsg,"errorDetailMsg1":obj.root_info.errorDetailMsg1,"errorDetailMsg2":obj.root_info.errorDetailMsg2,"redirectUrl":obj.root_info.redirectUrl};
			if (obj.root_info.serviceCode == "C2098" || obj.root_info.serviceCode == "C2099"
				|| strLib.isEmpty(obj.root_info.skipErrorMsg) || "true" != obj.root_info.skipErrorMsg) {
				shbComm.viewWarningMsg(obj.root_info);//alert(obj.root_info.errorCode+" : "+obj.root_info.errorMsg);
				//gibObj.security.nFilterClear() //보안매체 입력 오류시 값 초기화
			}
			if (obj.root_info.exceptionCallback && obj.root_info.exceptionCallback != "") {
				try {
					// 보안매체 검증 서비스는 exception callback 처리 안함
					//if (obj.root_info.serviceCode != "C2098" && obj.root_info.serviceCode != "C2099") {
						eval(obj.root_info.exceptionCallback + "( obj );" );
					//}
				} catch( e ) {
					e.detail = obj.root_info.exceptionCallback + strLib.getMessage(shbComm.lang["CO01064"], ["("+obj.root_info.serviceCode+")"]) + "\n"+JSON.stringify(root_info);
					shbComm.printStackTrace( e );
				}
			}
			bResult = true;
		}
	} else {
		bResult = true;
	}
	//if( !strLib.isEmpty(obj.root_info.skipError) && "true" == obj.root_info.skipError ) {
	//	bResult = false;
	//}
	if (bResult) {
		var tmp = obj.root_info.clearTarget;
		if (tmp != "false") {
			if (tmp.indexOf(",") > 0) {
				var target = tmp.substring(tmp.indexOf(",")+1);
				if (target.startsWith("{")) target = "["+target+"]";
				var targetJson = JSON.parse(target);
				for (var i=0; i < targetJson.length; i++) {
					var name = targetJson[i].id;
					if (name != "root_info") {
						var type = eval(name+".initializeType");
						if (type == "dataMap") {
							eval(name+".reset()");
						} else if (type == "dataList") { 
							eval(name+".setJSON([])");
						}
					}
				}
			}
		}
	}

	return bResult;//true일때는 callbackSubmitdone 실행안됨(postSubmit은 실행됨)
};
//private 서브미션 후처리 
shbComm.postSubmit = function(e) {
	var SECCARD_DATASET = 'dm_SecurityInfo';
	//통신 로깅
	shbComm.saveWebLog(e);
	//방어코드 :: 통신오류는 errorSubmit에서 처리
	if( 200 > e.responseStatusCode && 300 <= e.responseStatusCode ){ return; }
	//방어코드 :: 
	if( !strLib.isEmpty(e.errorType) ) { 
		shbComm.log("shbComm.postSubmit errorType exist ::"+e.errorType);
		//errorHandler true 리턴시 "errorType":"target-error"로 설정됨 그래서 로그만 찍도록 함
		//return;
	}
	// target에 바인딩된 그리드 자동 높이 조절 - resultStatus S 가 아닐때도 그리드 높이조절 되도록 함
	var arrGrd = shbComm.getArraySubmissionTarget(e.id);
	for ( var i = 0; i < arrGrd.length; i++) {
		var item = arrGrd[i];
		if( !strLib.isEmpty(item.grdId) ) { shbComm.setGrdHeightOnResult(item.grdId); }//그리드 높이조절
	}
	var retStr = e.responseText;
	var retObj = JSON.parse(retStr);
	if ("S" != retObj.root_info.resultStatus) {
		return;
	}
	var root_info = retObj.root_info;

	// 보안매체 session reference 정보체크
	if(retObj && retObj.SESSION_SECCARD) {
		var dataSetObj = WebSquare.util.getComponentById(SECCARD_DATASET);
		if (dataSetObj) {
			dataSetObj.setJSON(retObj.SESSION_SECCARD);
		}
	}

	var tranDateTime = root_info.COM_TRAN_DATE_TIME;

	if ( typeof root_info.callBack != "undefined" && root_info.callBack != "" ) {
		shbComm.printStackTrace("[shbComm.postsubmit] root_info.callBack]" + root_info.callBack);
		try {
			eval( root_info.callBack + "( retObj, tranDateTime );" );
			shbComm.printStackTrace(root_info.callBack+"    end");
		} catch( e ) {
			e.detail = root_info.callBack + strLib.getMessage(shbComm.lang["CO01064"], ["( "+ e.id+" )"])+"\n"+ JSON.stringify(root_info);
			shbComm.printStackTrace( e );
		}
	}
};
//private submission target에 잡혀있는 데이터 리스트를 바인딩하고 있는 GridView를 찾아냄
shbComm.getArraySubmissionTarget = function(sbmId){
	try {
		var arrDl = [];
		var oSbm = $w.getSubmission(sbmId);
		if( jsonLib.isNullObj(oSbm) || strLib.isEmpty(oSbm.target) ) { return arrDl; }
		var sTgt = strLib.replaceAll(oSbm.target,"data:json,","");
			sTgt = strLib.replaceAll(sTgt,"'","\"");// 싱글포텐션 JSON.parse에서 Exception 남
		var oTgt = null;
		if( !strLib.isEmpty(sTgt) && (sTgt.indexOf("{") > -1 || sTgt.indexOf("[") > -1 )) { oTgt = JSON.parse(sTgt); }
		if( !jsonLib.isNullObj(oTgt) ) {
			if( jsonLib.isArray(oTgt) ) {
				for( var i = 0 ; i < oTgt.length; i++ ){
					if( typeof oTgt[i] == "string" ) {
						arrDl.push({"dlId":oTgt[i]});
					} else {
						arrDl.push({"dlId":oTgt[i].id});
					}
				}
			} else {
				arrDl.push({"dlId":oTgt.id});
			}
		} else { //json object가 아님
			if( !strLib.isEmpty(sTgt)) { arrDl.push({"dlId":sTgt}); }
		}
	
		if( 0 == arrDl.length ) { return arrDl; }
		//팝업 여부에 따라 찾을 group 정의
		var oFindGrp = shbComm.getComponent("contents");
		var sPopupId = shbComm.getPopupId();
		if( !strLib.isEmpty(sPopupId) || (shbObj && shbObj.isNewWinPop && shbObj.isNewWinPop == true) ) {//윈도우오픈이나 외부노출팝업
			oFindGrp = shbComm.getComponent($('.detailPop').attr('id'));
			if( jsonLib.isNullObj(oFindGrp) ) {
				oFindGrp = shbComm.getComponent($('.pop_wrap').attr('id'));//퇴직연금
			}
		}
		if( jsonLib.isNullObj(oFindGrp) ){ return arrDl; }
		//화면에 그리드 찾기
		var arrExclude = [];
		var arrGrd = [];
		for (var item in shbComm.plugAllName) {
			arrExclude.push(item);
		}
		var arrFindResult = WebSquare.util.getChildren(oFindGrp, {excludePlugin:"span body Switch "+arrExclude.join(" "), recursive:true});
		for(var i = 0; i < arrFindResult.length; i++){
			if( "gridView" == arrFindResult[i].getPluginName() ){
				arrGrd.push(arrFindResult[i]);
			}
		}
		if( 0 == arrGrd.length ) { return []; }
		for( var j = arrDl.length-1 ; j >= 0 ; j-- ){
			if( "dataList" == shbComm.getComponent(arrDl[j].dlId).initializeType ) {
				for( var i = 0 ; i < arrGrd.length; i++ ){
					if( arrGrd[i].getDataList() == arrDl[j].dlId ) {
						arrDl[j].grdId = arrGrd[i].getID();
						break;
					}
				}
			} else {
				arrDl.splice(j,1);
			}
		}
	} catch(e) {
		shbComm.printStackTrace(e);
	}
	return arrDl;	
};

/* ajax 통신 - 특별한경우만 사용시 공통과 협의
 * mode : string asynchronous/synchronous
 * mediatype : string 
 * hideProcessMsg : boolean
 * callback string callback function name 
 */
shbComm.executeAjax = function(url, args, option) {
	var chkMandatory = false;
	if( strLib.isEmpty(url) ) { url = shbComm.ACTION_URL; }
	if( jsonLib.isNullObj(option) ) { chkMandatory = true; } 
//	if( strLib.isEmpty(option.serviceType) ) { chkMandatory = true; }
//	if( strLib.isEmpty(option.serviceCode) ) { chkMandatory = true; }
	if( chkMandatory ) {
		shbComm.alert(shbComm.lang["CO01009"]);
		return;
	}
	var rJson = "";
	var ajaxOption = {};
	args["root_info"] = option;
	ajaxOption.action = url;
	ajaxOption.mode = "asynchronous"; //synchronous
	if( !strLib.isEmpty(option.sync) && "synchronous" == option.sync ) {
		ajaxOption.mode = option.sync;
	}
	ajaxOption.mediatype = "application/json; charset=UTF-8";
	if( !strLib.isEmpty(option.mediatype) ) {
		ajaxOption.mediatype = option.mediatype;
	}	
	//navigator.platform 확인
	var platformName = shbComm.getCommonPopCookie("USER_PLATFORM");
	if (platformName == undefined || platformName == "") {
		shbComm.setCookie("USER_PLATFORM", navigator.platform);
	}
	ajaxOption.method = "post";
	ajaxOption.requestData = JSON.stringify(args);
	ajaxOption.type = "text";
	ajaxOption.processMsg = "";
	ajaxOption.hideProcessMsg = false;
	if( !strLib.isEmpty(option.hideProcessMsg) ) {
		ajaxOption.hideProcessMsg = WebSquare.util.getBoolean(option.hideProcessMsg);
	}
	if( ajaxOption.hideProcessMsg ) {
		ajaxOption.processMsg = " ";
	}
	var callbackFn = null;
	var isCallback = false;
	if( !jsonLib.isNullObj(option.callback) && "asynchronous" == ajaxOption.mode ) {
		if( typeof option.callback == "function" ) {
			callbackFn = option.callback;
			isCallback = true;
		} else if( !strLib.isEmpty(option.callback) ) {
			callbackFn = eval(option.callback);
			isCallback = true;
		}
	}
	if( isCallback ) {
		ajaxOption.success = function(e){
			callbackFn(e.responseJSON);
			shbComm.saveWebLog(e);
		};
		ajaxOption.error = function(e){
			callbackFn(e.responseJSON);
			shbComm.saveWebLog(e);
		};
	} else {
		ajaxOption.success = function(e){
			rJson = e.responseJSON;
			shbComm.saveWebLog(e);
		};
		ajaxOption.error = function(e){
			rJson = e.responseJSON;
			shbComm.saveWebLog(e);
		};
	}
	if (option.noTimeSet !== 'true') {
		shbComm.session.refreshSession();
	}
	WebSquare.net.ajax(ajaxOption);
	return rJson;
};
// 직접이체금액을 서버에 저장한다. type="init" 저장된 금액 초기화
shbComm.sendIcheAmt = function(amt, type) {
	if( strLib.isEmpty(amt) ) {
		shbComm.alert(shbComm.lang["CO01013"]);
		return;
	}
	var rJson = "";
	var ajaxOption = {};
	
	ajaxOption.action = "/comjsp/dataProcessE2EValue.jsp";
	ajaxOption.mode = "synchronous"; //synchronous
	ajaxOption.mediatype = "application/x-www-form-urlencoded; charset=UTF-8";
	ajaxOption.method = "post";
	ajaxOption.requestData = "amt="+amt+"&type="+(strLib.isEmpty(type)?"":type);
	ajaxOption.type = "text";
	ajaxOption.processMsg = "";
	ajaxOption.hideProcessMsg = false;
	if( ajaxOption.hideProcessMsg ) {
		ajaxOption.processMsg = " ";
	}
	ajaxOption.success = function(e){
		rJson = e.responseText;
		shbComm.saveWebLog(e);
	};
	ajaxOption.error = function(e){
		rJson = e.responseText;
		shbComm.saveWebLog(e);
	};
	shbComm.log("sendIcheAmt call :: "+JSON.stringify(ajaxOption));
	//세션 리프레쉬
	shbComm.session.refreshSession();
	WebSquare.net.ajax(ajaxOption);
	return rJson;
};

//private dmHeadMap이 없을때 동적으로 생성
//2020.12.07 certtype 1: 금융인증서 , 2:solpass
shbComm.makeHeaderMap = function() {
	var oHeaderMap = WebSquare.util.getComponentById(shbComm.REQ_HEAD_DATAMAP_NM);
	if( jsonLib.isNullObj(oHeaderMap) ) {
		var nodeList = "serviceType,serviceCode,nextServiceCode,pkcs7Data,signCode,signData,useSign,useCert,permitMultiTransaction,keepTransactionSession,skipErrorMsg,mode,language,exe2e,hideProcess,clearTarget,callBack,exceptionCallback,requestMessage,responseMessage,serviceOption,pcLog,preInqForMulti,makesum,removeIndex,redirectUrl,preInqKey,_multi_transfer_,_multi_transfer_count_,_multi_transfer_amt_,userCallback,menuCode,certtype";
		var rootNodeList = nodeList.split(",");

		var options = {"id":shbComm.REQ_HEAD_DATAMAP_NM,"type":"dataMap","option":{"baseNode":""},"keyInfo":[]};
		for (var nl = 0; nl < rootNodeList.length; nl++) {
			options.keyInfo.push({"id":rootNodeList[nl],"name":rootNodeList[nl],"dataType":"text"});
		}
		$w.data.create(options);
	}
};
/**
* shbComm.getCodeSelectbox 공통코드 데이터 조회 selectbox 구성
* @date 2016-10-26
* @param {string} codeArr
* @param {string} callbackFnNm
* @author 
* @example
var arrOption = [<br/>
{"codeKey":"", "selectboxId":"", "defaultValue":"", "excludeValue":""}<br/>
];<br/>
shbComm.getCodeSelectbox(arrOption, "shbObj.fncCallbackGetCodes");<br/>
* @since
*/
shbComm.getCodeSelectbox = function(optionArr, callbackFnNm){
	var newOption = {};
	var arrCodes = [];
	for (var i=0; i < optionArr.length; i++) {
		var temp = optionArr[i];
		newOption[temp.codeKey] = temp;
		arrCodes.push(temp.codeKey);
	}
	$w.getSubmission("sbm_commonCode").selectboxOption = JSON.stringify({"arrCodeInfo":newOption, "callback":(etcLib.isFunction(callbackFnNm) ? callbackFnNm : "")});
	shbComm.getCodeData(arrCodes);
};
//private 공통코드 조회실행
shbComm.getCodeData = function(codeArr){
	var option = {"serviceType":"CO","serviceCode":"code","permitMultiTransaction":"true","skipErrorMsg":"true", "callBack":"shbComm.sbm_commonCode_submitdone"};
	dm_S_code.set("codeKey",codeArr.join(";"));
	dm_S_code.set("language",topWin.shbComm.LANGUAGE);
	shbComm.executeSubmission("sbm_commonCode", option);
};
//private 공통코드조회 콜백
shbComm.sbm_commonCode_submitdone = function(jResult) {
	try{
		//var jResult = e.responseJSON;
		var arrCodeKey = dm_S_code.get("codeKey").split(";");
		var resultArray = [];
		var sTemp = $w.getSubmission("sbm_commonCode").selectboxOption || "";
		var jo = (strLib.isEmpty(sTemp) ? {"arrCodeInfo":{}} : JSON.parse(sTemp));
		for ( var i = 0; i < arrCodeKey.length; i++) {
			var sCodeGrp = arrCodeKey[i];
			//기존코드 존재시 삭제
			var arrOldDataIdx = dl_R_code.getMatchedIndex("codeGrp", sCodeGrp);
			if( !jsonLib.isNullObj(arrOldDataIdx) && arrOldDataIdx.length > 0 ){
				dl_R_code.removeRows(arrOldDataIdx);
			}
			var arrCode = jResult[sCodeGrp];
			var arrCodeGrpAllCode = arrCode;//sExclude 값이 없으면 전체 코드값
			var joCodeItem = jo.arrCodeInfo[sCodeGrp] || "";
			if( !strLib.isEmpty(joCodeItem.selectboxId) ){ //selectbox가 있으면
				var osb = WebSquare.util.getComponentById(joCodeItem.selectboxId);//selectbox object
				if( jsonLib.isNullObj(osb) ) { continue; }

				if( !strLib.isEmpty(joCodeItem.excludeValue) ) {
					arrCodeGrpAllCode = arrCode.slice(0);//sExclude 값을 제외하기전에 전체 코드값을 복사
					var sExclude = ";"+(strLib.isEmpty(joCodeItem.excludeValue) ? "" : joCodeItem.excludeValue)+";";
					for ( var k = arrCode.length-1; k >= 0; k--) {
						if( sExclude.indexOf(arrCode[k].code) >= 0 ) {
							arrCode.splice(k,1);
						}
					}
				}
				var odl = null;
				if( osb.itemsetObj && !strLib.isEmpty(osb.itemsetObj.nodeset) && osb.itemsetObj.nodeset.indexOf("data:") >= 0 ) {// itemset에 datalist 연결됨
					odl = WebSquare.util.getComponentById(strLib.replaceAll(osb.itemsetObj.nodeset, "data:", ""));
					if( !jsonLib.isNullObj(odl) && "dataList" != odl.initializeType ) {//itemset이 dataList가 아니면
						odl = null;
					}
				} else {
					odl = WebSquare.util.getComponentById("CmnCode_"+sCodeGrp);
					if( jsonLib.isNullObj(odl) ) {
						var dataListStr  = {"id":"CmnCode_"+sCodeGrp, "type":"dataList", "option" : {"baseNode":"list", "repeatNode":"map"},
											"columnInfo":[{"id":"code","name":"code","dataType":"text"},{"id":"value","name":"value","dataType":"text"}]};
						$w.data.create(dataListStr);
						odl = WebSquare.util.getComponentById("CmnCode_"+sCodeGrp);
					}
					osb.setNodeSet("data:CmnCode_"+sCodeGrp, "value", "code");
				}
				if( !jsonLib.isNullObj(odl) ) { odl.setJSON(arrCode); }
				if( !strLib.isEmpty(joCodeItem.defaultValue) ) {
					osb.setValue(joCodeItem.defaultValue);
				}
			}
			if( !jsonLib.isNullObj(arrCodeGrpAllCode) ) {//코드없을때 오류방지
				resultArray = resultArray.concat(arrCodeGrpAllCode);
			}
		}
		dl_R_code.setJSON(resultArray,true);//혹시 두번 호출되더라도 지원되게 append:true  
		if( !strLib.isEmpty(jo.callback) ) {
			etcLib.getFunction(jo.callback).call(this, jResult);	
		}
	}catch(e) {
		shbComm.printStackTrace(e);
	}
};
// 세션 조회
shbComm.getSession = function(sSession, sSessionList, callbackFnNm, sCode) {
	//var option = {"serviceType":"SG","serviceCode":"","callback":"shbComm.sbm_session_submitdone", "permitMultiTransaction":"true"};
	var option = {"serviceType":"SG","serviceCode":"","skipErrorMsg":"false","callBack":callbackFnNm, "permitMultiTransaction":"true"};
	if( !strLib.isEmpty(sCode) ) {
		option.serviceCode = sCode;
	}
	if( !strLib.isEmpty(sSession) ) {
		dm_S_session.set("session",sSession);
	}
	if( !strLib.isEmpty(sSessionList) ) {
		dm_S_session.set("sessionList",sSessionList);
	}
	if( etcLib.isFunction(callbackFnNm) ) {
		var oSbm = $w.getSubmission("sbm_session");
		//oSbm.callback = callbackFnNm;
	}
	shbComm.executeSubmission("sbm_session", option);
};

/**
 * 로그인 세션 객체관리 모듈
 * @function setSessionJSON : 로그인 후 세션 저장
 * @function getSession : 세션키값으로 세션값 추출
 * @function isLogin : 로그인 여부 체크
 */
shbComm.session = {};
shbComm.session._LOGIN_SESSION = null;
shbComm.session.loginTimeout = 10;
shbComm.session.count = 1;
shbComm.session.loginTimer = null;
shbComm.session.displayTimer = null;
shbComm.session.autologoutTimer = null;
shbComm.session.refreshTimer = null;
shbComm.session.solPassLogin = null;
shbComm.session.menuMessage = null;
shbComm.session.fincert = null;
shbComm.session.isLogin = function() {
	return topWin.shbComm.session._LOGIN_SESSION ? true : false;
};
shbComm.session.getSession = function(key) {
	var session = topWin.shbComm.session._LOGIN_SESSION;
	if (session) {
		return session[key] ? session[key] : '';
	}
	return '';
};
shbComm.session.setSession = function(sessionJson) {
	topWin.shbComm.session._LOGIN_SESSION = JSON.parse(sessionJson);
	
	// 금융인증서 크로스 도메인
	if( typeof topWin.shbComm.session._LOGIN_SESSION.fincert != "undefined" ){
		shbComm.session.fincert = topWin.shbComm.session._LOGIN_SESSION.fincert ;
	};
	// SOL 패스 크로스 도메인
	if( typeof topWin.shbComm.session._LOGIN_SESSION.solcert != "undefined"  && topWin.shbComm.session._LOGIN_SESSION.solcert == "Y" ){
		shbComm.session.solPassLogin = true;
	};
};
shbComm.session.removeSession = function() {
	topWin.shbComm.session.fincert = null;
	topWin.shbComm.session.solPassLogin = null;
	topWin.shbComm.session._LOGIN_SESSION = null;
};
shbComm.session.logout = function(isAutoLogout, callback) {
	var comp = WebSquare.util.getComponentById("btn_logout");
	if (typeof comp != "undefined") {
		var start = comp.getUserData("UserLogout");
		if (start == "true") {
			return;
		} else {
			comp.setUserData("UserLogout", "true");
			$w.setTimeout(function() {
				var comp = WebSquare.util.getComponentById("btn_logout");
				if (typeof comp != "undefined") comp.setUserData("UserLogout", "");
			}, {
				key : 'clearDuplicateLogout', 
				delay : 1000,
				callback : function() {
					$w.clearTimeout('clearDuplicateLogout');
				}
			});
		}
	}
	var option = {
		serviceType : 'LO',
		serviceCode : 'LOGOUT',
		hideProcessMsg : 'true',
		noTimeSet : 'true'
	};
	if (typeof isAutoLogout === 'undefined') {
		option.callback = function() {
			topWin.shbComm.session.removeSession();
			topWin.shbComm.session.clearSessionTimer();
		}
	} else {
		option.callback = function() {
			var comp = WebSquare.util.getComponentById("btn_logout");
			if (typeof comp != "undefined") comp.setUserData("UserLogout", "");
			topWin.shbComm.session.removeSession();
			topWin.shbComm.session.clearSessionTimer();
			if (callback) {
				callback.call(this);
			} else {
				if (topWin.shbComm.isEasyService()) {
					// 로그인 페이지 이동
					topWin.shbComm.goPage('210000000000');
				} else if (topWin.shbComm.isPremierService()) { 
					// 프리미어 메인페이지 이동
					if (topWin.hpeComm && typeof topWin.hpeComm.goPage === 'function') {
						topWin.hpeComm.goPage('400000000000');
					}
				} else {
					// 로그아웃 결과페이지 이동
					topWin.shbComm.goPage('252500000000', {param : {'isAutoLogout' : isAutoLogout}});
				}
			}
		}
		
	}
	topWin.shbComm.executeAjax('', {}, option);
};
//세션 timer object
shbComm.session.setLoginTimer = function() {
	if(topWin.shbComm.session.isLogin()){
		//타임아웃 시간 변경
		var tCount = 1000 * 60 * (topWin.shbComm.session.loginTimeout * topWin.shbComm.session.count - 1);	// 설정시간 - 1분
		//shbComm.session.clearSessionTimer('LOGIN_TIMER');
		topWin.shbComm.session.clearSessionTimer();
		// 로그인 타이머 display
		topWin.shbComm.session.showLoginTimer(topWin.shbComm.session.loginTimeout * topWin.shbComm.session.count * 60);
		topWin.shbComm.session.loginTimer = setTimeout((function() {
			return function() {
				// 자동로그아웃 팝업 호출
				var option = {
					'title':shbComm.lang["CO00099"]
					,'w2xPath':shbComm.getSubContextPath() + '/include/popup/CO00025RP.xml'
					,'width':'492'
					,'height':'443'
					,'callback' : 'topWin.shbComm.session.extendLoginPopCallback'
				};
				topWin.shbComm.openPopup(option);
			};
		}()), tCount); // 설정시간 - 1분 후에 실행
		topWin.shbComm.session.setRefreshTimer(topWin.shbComm.session.count);
	}
};
shbComm.session.setRefreshTimer = function(count) {
	// timer clear
	topWin.shbComm.session.clearSessionTimer('REFRESH_TIMER');
	if (count === 0) return;
	count = count - 1;
	var tCount = (1000 * 60 * topWin.shbComm.session.loginTimeout) - 5000;
	topWin.shbComm.session.refreshTimer = setTimeout((function(_count) {
			return function() {
				var option = {
					serviceType : 'SU',	// 서비스 구분
					serviceCode : 'SU0001',	// 서비스 코드
					noTimeSet : 'true'
				};
				topWin.shbComm.executeAjax('', {}, option);
				topWin.shbComm.session.setRefreshTimer(_count);
			};
	}(count)), tCount);
};

shbComm.session.extendLoginPopCallback = function(r) {
	var result = JSON.parse(r);
	if (result.type === 'LOGOUT') {
		// 로그아웃 처리
		if (topWin.shbComm) {
			topWin.shbComm.session.logout(result.isAutoLogout);
		}
	} else if (result.type === 'REFRESH_SESSION') {
		topWin.shbComm.session.refreshSession(true);
	}
	return;
};
// session time counter
shbComm.session.showLoginTimer = function(expireTime) {
	var day, hour, min, sec, mod;
	var count = "";
	var remainTime = expireTime - 1;
	sec = 0;
	if (remainTime >=0) {
		//남은 일수
		day = Math.floor(expireTime / (3600*24));
		mod = expireTime % (24 * 3600);
		//남은 시간
		hour = Math.floor(mod/3600);
		mod = mod % 3600;
		//남은 분
		min = Math.floor(mod/60);
		//남은 초
		sec = mod % 60;
		count = (day > 0) ? day +"day " : "";
		count = (hour > 0) ? count + hour +":" : (count.length > 0) ? count + ":" : count;
		//count = (min > 0) ? count + min + ":" : (count.length > 0) ? count + min + ":" :count;
		count = (min > 9) ? count + min + ":" : count + "0" + min + ":";
		count = (sec > 9) ? count + sec : count + "0" + sec;
	}
	if ((sec <=0 && count == "0") || (count == "")) count = "timeOut";

	//화면에 값 뿌리기 
	//해당 아이디가 없으면 카운트 함수는 실행하지 않는다.
	if(topWin.tbx_loginTimer !== null && typeof topWin.tbx_loginTimer !== 'undefined' && typeof topWin.tbx_loginTimer.setValue === 'function'){
		topWin.tbx_loginTimer.setValue(count);
	}
	if (topWin.shbComm.isEasyService()) {
		if (typeof topWin.tbx_loginTimer !== 'undefined' && typeof topWin.tbx_loginTimer.setValue === 'function') {
			topWin.tbx_loginTimer.setValue(count);
		}
		if (typeof topWin.tbx_loginTimer_mobile !== 'undefined' && typeof topWin.tbx_loginTimer_mobile.setValue === 'function') {
			topWin.tbx_loginTimer_mobile.setValue(count);
		}
	}
	topWin.shbComm.session.clearSessionTimer('DISPLAY_TIMER');
	if (count != "timeOut") {
		// 매 1초마다 재귀호출
		topWin.shbComm.session.displayTimer = setTimeout((function(rTime) {
			return function() {
				topWin.shbComm.session.showLoginTimer(rTime);
			};
		}(remainTime)), 1000);
	} else {
		topWin.shbComm.session.clearSessionTimer('LOGIN_TIMER');
		topWin.shbComm.session.logout(true);
	}
};
// 세션연장
shbComm.session.refreshSession = function(isCallServer) {
	if (!topWin.shbComm.session.isLogin()) return false;
	if (!isCallServer) {
		topWin.shbComm.session.setLoginTimer();
		return;
	}
	// submission option 설정
	var option = {
		serviceType : 'SU',	// 서비스 구분
		serviceCode : 'SU0001',	// 서비스 코드
		callback : function() {
			topWin.shbComm.session.setLoginTimer();
		}
	};
	topWin.shbComm.executeAjax('', {}, option);
};

shbComm.session.clearSessionTimer = function(type) {
	switch(type) {
		case 'LOGIN_TIMER':
			if(topWin.shbComm.session.loginTimer != null){
				clearTimeout(topWin.shbComm.session.loginTimer);
			}
			break;
		case 'DISPLAY_TIMER':
			if (topWin.shbComm.session.displayTimer != null) {
				clearTimeout(topWin.shbComm.session.displayTimer);
			}
			break;
		case 'REFRESH_TIMER':
			if (topWin.shbComm.session.refreshTimer != null) {
				clearTimeout(topWin.shbComm.session.refreshTimer);
			}
			break;
		default :
			clearTimeout(topWin.shbComm.session.loginTimer);
			clearTimeout(topWin.shbComm.session.displayTimer);
			clearTimeout(topWin.shbComm.session.refreshTimer);
	}
};
shbComm.securityCount = 0;
shbComm.securityTimeOut = 10;
shbComm.securityTimer = null;
shbComm.setSecurityTimer = function() {
	var timeSec = (60 * 1000 * (shbComm.securityTimeOut - 5));	// 5분마다 갱신
	shbComm.securityTimer = setInterval(function() {
		if (shbComm.securityCount == 3) {
			shbComm.securityClearTimeout();
			// 키보드보안 세션만료. 메인페이지 이동
			shbComm.alert(shbComm.lang.CO01125, '', 'shbComm.reloadSecurity("' + shbComm.menu.getCurrentMenuCode() + '")');
			return false;
		}
		var option = {
			serviceType : 'SU',	// 서비스 구분
			serviceCode : 'SU0001'	// 서비스 코드
		};
		shbComm.executeAjax('', {}, option);
		shbComm.securityCount++;
	}, timeSec);
};
shbComm.reloadSecurity = function(mCode) {
	if (topWin.shbComm.isEasyService()) {
		topWin.location.href = '/rib/easy/index.jsp?cr=' + mCode;
	//D.H.Koh 2019.10.04 Added PFM 자산관리 경로 추가로 인한 추가		
	} else if (topWin.shbComm.isPFMService()) { 
		topWin.location.href = '/pfm/index.jsp';		
	} else {
		if (shbComm.isEnLanguage()) {
			topWin.location.href = '/en/index.jsp?cr=' + mCode;
		} else {
			if (shbComm.isHomepage()) {
				topWin.location.href = '/hpe/index.jsp?cr=' + mCode;
			} else {
				topWin.location.href = '/index.jsp?cr=' + mCode;
			}
		}
	}
};
shbComm.securityClearTimeout = function() {
	shbComm.securityCount = 0;
	if (shbComm.securityTimer) {
		clearInterval(shbComm.securityTimer);
		shbComm.securityTimer = null;
	}
};

/**
 * 메뉴객체관리
 */
shbComm.menu = {
	currentMenuCode : null,	
	currentMenuName : null,	
	currentPMenuCode : null,
	currentMenuInfo : null,
	redirectUrl : '',
	redirectParam : null,
	menuAuth : '',
	completeSearchMenu : false
};
shbComm.menu.loadMenuList = function() {
	shbComm.loadMenuComplete = false;
	var option = {
		serviceType : '',
		serviceCode : '',
		callback : 'shbComm.menu.loadMenuListCallback'
	};
	shbComm.executeAjax('/comjsp/getAllMenuInfo.jsp?language=' + shbComm.LANGUAGE, {}, option);
};

shbComm.menu.loadMenuListCallback = function(response) {
	topWin.window._PAGEINFO_LIST = response;
	shbComm.loadMenuComplete = true;
	if (!shbComm.menu.completeSearchMenu && footerObj && typeof footerObj.fncInit === 'function') {
		footerObj.fncInit();
	}
	shbComm.menu.completeSearchMenu = true;
	if( etcLib.isFunction("shbObj.fncLoadMenuComplete") ) {
		shbObj.fncLoadMenuComplete("M");
	}
};

shbComm.menu.getMenuInfo = function(menuCode) {
	return topWin.window._PAGEINFO_LIST[menuCode];
};
shbComm.menu.getCenterInfo = function() {
	if (this.currentMenuCode) {
		return topWin.window._PAGEINFO_LIST[this.currentMenuCode].C_SYS_ID;
	}
	return null;
};
shbComm.menu.getMenuName = function(menuCode) {
	try {
		var info = topWin.window._PAGEINFO_LIST[menuCode];
		if (info) {
			return info.MENU_NAME;
		}
	} catch(e) {
		return '';
	}
	return '';
};
shbComm.menu.setTitle = function(stepTitle) {
	// 1. 기본형 (일반 M단위 화면) : 현재 메뉴명 | 신한은행 개인뱅킹
	// 2. 탭보유 : 탭 보유 메뉴명 - 현재 메뉴탭명 | 신한은행 개인뱅킹
	// 3. 스텝 : 현재 메뉴명 - 현재 단계명 | 신한은행 개인뱅킹
	// 4. 탭 + 스텝 : 탭 보유 메뉴명 - 현재 탭 메뉴명 - 현재 단계명 | 신한은행 개인뱅킹
	// pageTitle
	var mainTitle;
	var	title;
	if (shbComm.isBanking()) {
		if (shbComm.isEnLanguage()) {
			mainTitle = 'Shinhan Bank Personal Banking';
		} else {
			mainTitle = '신한은행 개인뱅킹';
		}
	} else if (shbComm.isHomepage()) {
		if (shbComm.isEnLanguage()) {
			mainTitle = 'Shinhan Bank';
		} else {
			mainTitle = '신한은행';
		}
	}
	if ($('.pageTop .titH01').length === 0) {
		title = shbComm.menu.getCurrentMenuName();
	} else {
		title = $('.pageTop .titH01').text();
	}
	// 탭타이틀
	if ($('#grpTab').length > 0) {
		title = title + '-' + $('#grpTab .on').text();
	}
	// stepTitle (DB에 메뉴명이 필수로 잡혀있어서 ' ' 값으로 등록된 메뉴가 있다. 메뉴 alter될떄까지 임시로 처리
	if (stepTitle && stepTitle !== '' && stepTitle !== ' ') {
		title = title + '-' + stepTitle;
	}
	if (title !== '') mainTitle = title + ' | ' + mainTitle;
	topWin.window.document.getElementsByTagName('title')[0].text = mainTitle;
	if (IS_DEV == "R") {
		var metas = document.getElementsByTagName("meta");
		var metaChk = false;
		for (var i=0; i < metas.length; i++) {
			try {
				if (metas[i].getAttribute("name") != null && metas[i].getAttribute("name") == "description") {
					metas[i].setAttribute("content", mainTitle);
					metaChk = true;
				}
			} catch (e) {}
		}
		if (!metaChk) {
			var meta = document.createElement('meta');
			meta.setAttribute("name", "description");
			meta.setAttribute("content", mainTitle);
			topWin.window.document.getElementsByTagName('head')[0].appendChild(meta);
		}
	}
};
/**
 * 현재메뉴정보는 서버 세션에 저장한다.
 * @deprecated
 */
shbComm.menu.setCurrentMenuInfo = function(menuInfo) {
	shbComm.menu.currentMenuInfo = menuInfo;
};
shbComm.menu.getCurrentMenuInfo = function() {
	if (topWin.window._PAGEINFO_LIST == null) return null;
	return topWin.window._PAGEINFO_LIST[this.currentMenuCode];
};
shbComm.menu.getCurrentMenuCode = function() {
	return this.currentMenuCode;
};
shbComm.menu.getCurrentMenuName = function() {
	return this.currentMenuName;
};
shbComm.menu.getCurrentCenterInfo = function() {
	if (topWin.window._PAGEINFO_LIST == null) return null;
	var menuInfo = topWin.window._PAGEINFO_LIST[this.currentMenuCode];
	if (menuInfo) {
		if (menuInfo.C_SYS_ID === '1' || menuInfo.C_SYS_ID === '3') {
			return menuInfo.C_SYS_ID;
		} else if (menuInfo.C_SYS_ID === '2') {
			return this.currentMenuCode.substr(2, 2);
		}
	}
	return null;
};
shbComm.menu.getParentMenuCode = function() {
	return this.currentPMenuCode;
};
shbComm.menu.isMenu = function(menuCode) {
	var menuInfo = topWin.window._PAGEINFO_LIST[menuCode];
	if (menuInfo) {
		if (menuInfo.DEPTH == '1' || menuInfo.DEPTH == '2') {
			return true;
		}
		if (menuInfo.DISPLAY_G === 'Y' || menuInfo.SITE_OPEN_YN === 'Y') {
			return true;
		}
	}
	return false;
};
shbComm.menu.getMenu = function(menuCode) {
	var mCode = menuCode;
	var menuInfo = topWin.window._PAGEINFO_LIST[mCode];
	if (menuInfo && menuInfo.C_SYS_ID === '25') {
		return menuCode;
	}
	var isMenu = false;
	while(!isMenu) {
		if (!menuInfo) {
			isMenu = true;
			return;
		}
		mCode = menuInfo.MENU_CODE;
		isMenu = shbComm.menu.isMenu(mCode);
		menuInfo = topWin.window._PAGEINFO_LIST[menuInfo.PARENT_MENU_CODE];
	}
	return mCode;
};

shbComm.goIntro = function() {
	if (shbComm.isBanking()) {
		if (shbComm.isEnLanguage()) {
			topWin.location.href = topWin.shbComm.hpeDomain;
		} else {
			shbComm.goSSOMovePage(topWin.shbComm.hpeDomain, '', '');
		}
	} else {
		topWin.document.location.href = IS_DEV === 'R' ? location.protocol + '//' + 'www.shinhan.com' : '/';
	}
};

shbComm.goPremier = function(id) {
	if (shbComm.isHomepage()) {
		topWin.document.location.href = topWin.shbComm.hpeDomain + '/bank_bridge.jsp?target=premier';
	} else {
		shbComm.goSSOMovePage(topWin.shbComm.hpeDomain, id, '');
	}
};
shbComm.goPwm = function(id) {
	if (shbComm.session.isLogin()) {
		shbComm.confirm('PWM 사이트로 이동하는 경우 자동으로 로그아웃됩니다.<br/>PWM 사이트로 이동하시겠습니까?', 'shbComm.goPwmCallback');
	} else {
		shbComm.goPwmCallback();
	}
	/*if (shbComm.isHomepage()) {
		topWin.document.location.href = '/bank_bridge.jsp?target=pwm';
	} else {
		shbComm.goSSOMovePage(topWin.shbComm.hpeDomain, id, '');
	}*/
};
shbComm.goPwmCallback = function() {
	topWin.document.location.href = topWin.shbComm.hpeDomain + '/pwm/index.jsp';
};

/**
 * SPA 페이지 이동  
 */
shbComm.goPage = function(id, opt) {
	//유량제어 호출
	if (typeof NetFunnel_Action == "function") {
		var menuCode = shbComm.menu.getCurrentMenuCode();
		var service_id = "";
		var action_id = "";
		if (shbComm.isBanking()) {
			if (id == "252400000000") {	//뱅킹 로그인
				service_id = "service_2";
				action_id = "rib_login_1";
			} else if (id == "010101100010") {	//거래내역조회
				service_id = "service_2";
				action_id = "rib_inquery_1";
			} else if (id == "010201010000") {	//이체
				service_id = "service_2";
				action_id = "rib_iche_1";
			}
		} else {
			if (id == "050404070000") {		//본인정보 이용/제공 조회
				service_id = "service_1";
				action_id = "rib_inquery_1";
			} else if (id == "252400000000") { //로그인
				service_id = "service_2";
				action_id = "hpe_login_1";
			}
		}
		if (service_id != "") {
			// 개발 유량제어 host 변경
			if (topWin.IS_DEV == "D" || topWin.IS_DEV == "T") {
				NetFunnel.TS_HOST = "apcdev.shinhan.com";
			}
			NetFunnel_Action({service_id:service_id, action_id:action_id},{
				success:function(ev,ret) {
					shbComm._goPage(id, opt);
				}
			});
		} else {
			shbComm._goPage(id, opt);
		}
	} else {
		shbComm._goPage(id, opt);
	}
};
shbComm._goPage = function(id, opt) {
	shbComm._startGoPage = true;
	var sysid;
	var regExp = /^[0-9]*$/;
	if (topWin.$('html').css('overflow') === 'hidden') {
		topWin.$('html').css('overflow', '');
	}
	// id 가 url인경우
	if (/^http/.test(id)) {
		topWin.window.location.href = id;
		return;
	}
	// 메뉴코드 적합성검사 
	if (!regExp.test(id)) {
		return false;
	}
	// 센터구분
	sysid = id.substr(0,2).replace(/(^0+)/, '');
	// 간편서비스 공인인증센터 연결 (메뉴정보가 없다)
	if (shbComm.isEasyService() && sysid === '20') {
		shbComm.openerRibGoPage(id);
		return;
	}
	
	var defaultOption = {
		spa : true,
		replaceHistory : false,
		urlHashText : id
	};
	var option = $.extend({}, defaultOption, opt);
	var qs;
	var url;
	if (typeof shbObj.replaceHistory !== 'undefined') {
		option.replaceHistory = shbObj.replaceHistory;
	}
	// 요청한 메뉴정보 추출
	var menuInfo = shbComm.menu.getMenuInfo(id);
	// menuInfo 가없는 경우 강제로 센터값하고 생성
	
	if (!menuInfo) {
		var mUrl = '';
		var winYn = '';
		var mNm = '';
		if (option.param && option.param.MENU_URL) {
			mUrl = option.param.MENU_URL
		}
		if (option.param && option.param.NEW_WINDOW_YN) {
			winYn = option.param.NEW_WINDOW_YN
		}
		if (option.param && option.param.MENU_NAME) {
			mNm = option.param.MENU_NAME
		}
		menuInfo = {};
		menuInfo['C_SYS_ID'] = sysid;
		menuInfo['MENU_CODE'] = id;
		menuInfo['MENU_URL'] = mUrl;
		menuInfo['MENU_NAME'] = mNm;
		menuInfo['NEW_WINDOW_YN'] = winYn;
	} else {
		// 메뉴URL에 메뉴코드 등록한 경우
		var changeMenuInfo = shbComm.menu.getMenuInfo(menuInfo.MENU_URL);
		if (changeMenuInfo) {
			shbComm.goPage(changeMenuInfo.MENU_CODE, opt);
			return;
		} else {
			if (menuInfo.MENU_URL != "" && regExp.test(menuInfo.MENU_URL)) {
				shbComm.goPage(menuInfo.MENU_URL, opt);
				return;
			}
		}
		// 새창열기인 경우
		if (menuInfo.NEW_WINDOW_YN === 'Y') {
			topWin.window.open(menuInfo.MENU_URL);
			return;
		}
	}
	url = menuInfo.MENU_URL;

	// 쏠패스 로그인 고객이 사용 불가한 화면	
	shbComm.solPassUrls = "/rib/banca/BC03/BC03101RM00.xml"
						+ ",/rib/loan/DL01/DL01100RM00.xml"
						+ ",/rib/loan/DL01/DL01120RM00.xml"
						+ ",/rib/loan/DL01/DL01130RM00.xml"
						+ ",/rib/loan/DL01/DL01140RM01.xml"
						+ ",/rib/loan/DL02/DL02010RM00.xml"
						+ ",/rib/loan/DL02/DL02030RM00.xml"
						+ ",/rib/loan/DL02/DL02070RM00.xml"
						+ ",/rib/loan/DL02/DL02080RM00.xml"
						+ ",/rib/loan/DL03/DL03030RM00.xml"
						+ ",/rib/loan/DL03/DL03031RM00.xml"
						+ ",/rib/loan/DL03/DL03032RM00.xml"
						+ ",/rib/loan/DL03/DL03041RM00.xml"
						+ ",/rib/loan/DL04/DL04010RM01.xml"
						+ ",/rib/loan/DL04/DL04030RM00.xml"
						+ ",/rib/loan/DL04/DL04031RM00.xml"
						+ ",/rib/loan/DL04/DL04032RM00.xml"
						+ ",/rib/loan/DL04/DL04033RM00.xml"
						+ ",/rib/loan/DL04/DL04040RM00.xml"
						+ ",/rib/loan/DL04/DL04045RM00.xml"
						+ ",/rib/loan/DL04/DL04054RM01.xml"
						+ ",/rib/loan/DL04/DL04058RM01.xml"
						+ ",/rib/loan/DL05/DL05030RM00.xml"
						+ ",/rib/loan/DL05/DL05070RM00.xml"
						+ ",/rib/loan/DL06/DL06050RM00.xml"
						+ ",/rib/loan/DL07/DL07010RM00.xml"
						+ ",/rib/loan/DL07/DL07040RM00.xml"
						+ ",/rib/loan/DL07/DL07050RM00.xml"
						+ ",/rib/loan/DL07/DL07080RM00.xml"
						+ ",/rib/loan/DL07/DL07090RM00.xml"
						+ ",/rib/banking/IB02/IB02060RM00.xml"
						+ ",/rib/banking/IB02/IB02061RM00.xml"
						+ ",/rib/banking/IB02/IB02062RM00.xml"
						+ ",/rib/banking/IB06/IB06090RM00.xml"
						+ ",/rib/banking/IB07/IB07010RM00.xml"
						+ ",/rib/banking/IB05/IB05016RM00.xml"
						+ ",/rib/loan/DL01/DL01110RM00.xml"
						/*2021.03.25 금소법 시행으로 인한 아래 메뉴 쏠패스 로그인 불가 추가*/
						+ ",/rib/deposit/DT03/DT03111RM00.xml"
						+ ",/rib/asset/MM06/MM06020RM00.xml"
						+ ",/rib/isa/IS01/IS01010RM00.xml"
						+ ",/rib/isa/IS02/IS02010RM00.xml"
						+ ",/rib/isa/IS02/IS02010RM00.xml"
						+ ",/rib/fund/SF01/SF01048RM00.xml"
						+ ",/rib/fund/SF02/SF02031RM00.xml"
						+ ",/rib/fund/SF02/SF02005RM00.xml"
						+ ",/rib/fund/SF02/SF02009RM00.xml"
						+ ",/rib/fund/SF02/SF02014RM00.xml"
						+ ",/rib/fund/SF02/SF02017RM00.xml"
						+ ",/rib/fund/SF02/SF02019RM00.xml"
						+ ",/rib/fund/SF02/SF02015RM00.xml"
						+ ",/rib/fund/SF02/SF02022RM00.xml"
						+ ",/rib/fund/SF02/SF02025RM00.xml"
						+ ",/rib/fund/SF02/SF02026RM00.xml"
						+ ",/rib/foreign/FX01/FX01130RM00.xml"
						+ ",/rib/foreign/FX01/FX01140RM00.xml"
						+ ",/rib/foreign/FX01/FX01150RM00.xml"
						+ ",/rib/foreign/FX01/FX01160RM00.xml"
						+ ",/rib/foreign/FX01/FX01180RM00.xml"
						+ ",/rib/foreign/FX01/FX01190RM00.xml"
						+ ",/rib/pension/PE02/PE02101RM00.xml"
						+ ",/rib/gold/GS02/GS02021RM00.xml"
						+ ",/rib/gold/GS02/GS02022RM00.xml"
						+ ",/rib/gold/GS02/GS02023RM00.xml"
						+ ",/rib/gold/GS02/GS02024RM00.xml"
						+ ",/rib/gold/GS02/GS02030RM00.xml"
						+ ",/rib/gold/GS02/GS02050RM00.xml"
						+ ",/rib/fund/SF00/SF00020RM00.xml?sp_g=0"
						+ ",/rib/fund/SF00/SF00020RM00.xml?sp_g=1"
						+ ",/rib/fund/SF00/SF00020RM00.xml?sp_g=2"
						+ ",/rib/fund/SF02/SF02001RM00.xml"
						+ ",/rib/fund/SF02/SF02027RM00.xml"
						+ ",/rib/loan/DL01/DL01100RM00.xml"
						+ ",/rib/loan/DL02/DL02070RM00.xml"
						+ ",/rib/loan/DL05/DL05030RM00.xml"
						+ ",/rib/loan/DL05/DL05070RM00.xml"
						+ ",/rib/pension/PE01/PE01402RM00.xml"
						+ ",/rib/pension/PE01/PE01403RM00.xml";

	// 금융인증서	
	shbComm.finCertUrls = "/rib/banca/BC03/BC03101RM00.xml";
	
	if (shbComm.session.solPassLogin == true && shbComm.session.isLogin()) 
	{ 
		if ( shbComm.solPassUrls.indexOf(url) > -1)  
		{
	        var option = {
	                'title':'쏠패스로그인 안내'
	                ,'w2xPath':'/rib/include/popup/CO00058RP.xml'
	                ,'width':'492'
	                ,'height':'405'
	                ,"dataObject": {"id":id, "option":option}
	            };
	        shbComm.openPopup(option);
	        return;			
		}
	}
	
	if (shbComm.session.fincert == "Y"&& shbComm.session.isLogin())
	{ 
		if (url != "" &&  shbComm.finCertUrls.indexOf(url) > -1)  
		{
			var option = {
					'title':'금융인증서로그인 안내'
					,'w2xPath':'/rib/include/popup/CO00058RP.xml'
					,'width':'492'
					,'height':'405'
					,"dataObject": {"id":id, "option":option}
			};
			shbComm.openPopup(option);
			return;			
		}
	}
	
	// 레이어팝업
	if (menuInfo.C_SYS_ID !== '21' && menuInfo.NEW_WINDOW_YN === 'P') {
		if (typeof option.param === 'undefined' || (option.param && !option.param.width && !option.param.height)) {
			if (url.indexOf('?') > -1) {
				var spliteUrl = shbComm.splitQueryString(url);
				if (spliteUrl) {
					url = spliteUrl.url;
					option.param = $.extend({}, option.param, spliteUrl.param);
				}
			}
		}
		var pOption = {	"title":menuInfo.MENU_NAME
			,"width":option.param.width || '912'
			,"height":option.param.height || ''
			,"modal":"false"
			,"dataObject":option.param};	// 파라미터 전달을 위한 수정
		if (shbComm.isBanking() && (menuInfo.C_SYS_ID === '4' || menuInfo.C_SYS_ID === '5' || menuInfo.C_SYS_ID === '30' || menuInfo.C_SYS_ID === '90')) {
			pOption["popupUrl"] = shbComm.getHpePopupUrl(url);
		} else if (shbComm.isHomepage() && (menuInfo.C_SYS_ID !== '4' && menuInfo.C_SYS_ID !== '5' && menuInfo.C_SYS_ID !== '30' && menuInfo.C_SYS_ID !== '90')) {
			pOption["popupUrl"] = shbComm.getRibPopupUrl(url);
		} else {
			pOption["w2xPath"] = url;
		}
		shbComm.openPopup(pOption);
		return;
	}
	// 간편서비스 오픈
	if (!shbComm.isEasyService() && menuInfo.C_SYS_ID === '21') {
		shbComm.openWindowPop('간편서비스', shbComm.ribDomain + '/rib/easy', {width:768, height:600, resizable:true, scrollbars:true});
		return;
	}
	if (typeof isIntro !== 'undefined' && isIntro) {
		qs = shbComm.makeQueryString(option.param);
		if (menuInfo.C_SYS_ID === '4' || menuInfo.C_SYS_ID === '5' || menuInfo.C_SYS_ID === '30' || menuInfo.C_SYS_ID === '90' || menuInfo.C_SYS_ID === '25') {
			if (shbComm.session.isLogin()) {
				topWin.window.location.href = shbComm.hpeDomain + '/bank_bridge.jsp?cr=' + id + qs;
			} else {
				topWin.window.location.href = shbComm.hpeDomain + '/hpe/index.jsp?cr=' + id + qs;
			}
		} else {
			shbComm.goSSOMovePage(topWin.shbComm.ribDomain, id, qs);
		}
		return;
	}
	// 뱅킹 -> 홈페이지 (금융서비스 : 4, 고객센터 : 5) 페이지 전환
	if (topWin.shbComm.isBanking() && (menuInfo.C_SYS_ID === '4' || menuInfo.C_SYS_ID === '5' || menuInfo.C_SYS_ID === '30' || menuInfo.C_SYS_ID === '90')) {
		qs = shbComm.makeQueryString(option.param);
		//topWin.window.location.href = shbComm.hpeDomain + '/index.jsp?cr=' + id + qs;
		shbComm.goSSOMovePage(topWin.shbComm.hpeDomain, id, qs);
		return;
	}
	// 홈페이지 -> 뱅킹 (금융서비스 : 4, 고객센터 : 5, 은행소개 : 30  아닌 경우) 페이지 전환
	if (topWin.shbComm.isHomepage() && (menuInfo.C_SYS_ID !== '4' && menuInfo.C_SYS_ID !== '5' && menuInfo.C_SYS_ID !== '30' && menuInfo.C_SYS_ID !== '90' && (menuInfo.C_SYS_ID !== '25' || menuInfo.MENU_CODE === '252800000000'))) {
		qs = shbComm.makeQueryString(option.param);
		//topWin.window.location.href = shbComm.ribDomain + '/index.jsp?cr=' + id + qs;
		shbComm.goSSOMovePage(topWin.shbComm.ribDomain, id, qs);
		return;
	}
	// 로그아웃 필수 페이지 체크
	if (menuInfo.LOGIN_G && menuInfo.LOGIN_G === 'O') {
		if (shbComm.session.isLogin()) {
			shbComm.confirm(shbComm.lang["CO01047"], 'shbComm.goPageLogout("' + id + '")');
			return;
		}
	}
	if (menuInfo.MENU_URL === '') return;
	url = menuInfo.MENU_URL;
	if (url.indexOf('?') > -1) {
		if (!option.param) {
			option.param = {};
		}
		var spliteUrl = shbComm.splitQueryString(url);
		if (spliteUrl) {
			url = spliteUrl['url'];
			var pObj = spliteUrl['param'];
			if (pObj) {
				for (var key in pObj) {
					option.param[key] = pObj[key];
				}
			}
		}
	}
	
	if (option && option.param) {
		shbComm.setSaveObject('pageParam', option.param);
		option.param = null;
	}
	if (option && option.redirectUrl) {
		shbComm.setSaveObject('redirectUrl', option.redirectUrl);
		if (option.redirectParam) {
			shbComm.setSaveObject('redirectParam', option.redirectParam);
		}
	}
	// 로그인인 경우 키보드 보안 세션떄문에 location.href로 이동
	if (id === '252400000000' || id === '210000000000') {
		if (typeof NetFunnel_Action == "function") {
			var action_id = "";
			if(shbComm.isHomepage()){
				action_id = "hpe_login_1";
			}else{
				action_id = "rib_login_1";
			}
			// 개발 유량제어 host 변경
			if (topWin.IS_DEV == "D" || topWin.IS_DEV == "T") {
				NetFunnel.TS_HOST = "apcdev.shinhan.com";
			}
			NetFunnel_Action({service_id:"service_2", action_id:action_id},{
				success:function(ev,ret) {
					shbComm.goLoginPage();
					// 스크롤 탑으로 이동
					topWin.window.scroll(0, 0);
				}
			});
		
			return;
		} else {
			shbComm.goLoginPage();
			// 스크롤 탑으로 이동
			topWin.window.scroll(0, 0);
			return;
		}
	} else {
		$w.url(url + '?mcd=' + menuInfo.MENU_CODE + '&language=' + topWin.shbComm.LANGUAGE, option);
		$w.setTimeout(function() {
			var urls = location.href;
			var menuCode = urls.substring(urls.indexOf("#")+1);
			if (menuCode.indexOf("&") > -1) menuCode = menuCode.substring(0, menuCode.indexOf("&"));
			if (menuCode.indexOf("?") > -1) menuCode = menuCode.substring(0, menuCode.indexOf("?"));
			var w2xPath = WebSquare.w2xPath;
			//주소창에 hash값은 변경되었으나 hashchange가 발생되지 않는 경우 직접 호출한다.
			if (w2xPath == "") WebSquare.util.onhashchange();
		}, {
			key : '__moveGoPage',
			delay : 200,
			callback : function() {
				$w.clearTimeout('__moveGoPage');
			}
		});
	}
};

shbComm.splitQueryString = function(url) {
	try {
		var qsArr = url.split(/\?/);
		var qs = qsArr[1];
		var pArray = qs.split(/\&/g);
		var param = {};
		for (var i=0; i < pArray.length; i++) {
			var tmpParam = pArray[i].split(/\=/);
			param[tmpParam[0]] = tmpParam[1];
		}
		return {
			url : qsArr[0],
			param : param
		};
	} catch(e) {
		return null;
	}
	return null;
};

shbComm.makeQueryString = function(param) {
	var qs = '';
	for (key in param) {
		var v = param[key];
		if (typeof v === 'object') {
			for (k in v) {
				qs += '&' + encodeURIComponent(k) + '=' + encodeURIComponent(v[k]);
			}
		} else {
			qs += '&' + encodeURIComponent(key) + '=' + encodeURIComponent(param[key]);
		}
	}
	return qs;
};

shbComm.goLoginPage = function(id) {
	if (topWin.shbComm.isEasyService()) {
		topWin.window.location.href = '/rib/easy/index.jsp?cr=210000000000';
	} else {
		if (shbComm.isEnLanguage()) {
			if (shbComm.isHomepage()) {
				topWin.window.location.href = shbComm.ribDomain + '/en/index.jsp?cr=252400000000';
			} else {
				topWin.window.location.href = '/en/index.jsp?cr=252400000000';
			}
		} else {
			if (shbComm.isHomepage()) {
				topWin.window.location.href = '/hpe/index.jsp?cr=252400000000';
				//topWin.window.location.href = shbComm.ribDomain + '/index.jsp?cr=252400000000';
			} else {
				topWin.window.location.href = '/index.jsp?cr=252400000000';
			}
		}
	}
};

shbComm.goPagePost = function(id) {
	var formObj = document.getElementById("doForm");
	if (!formObj) {
		formObj = document.createElement("form");
		formObj.id = "doForm";
		formObj.name = "doForm";
		formObj.method = "post";
		formObj.target = "_self";
		var inputObj = document.createElement("input");
		inputObj.type = "hidden";
		inputObj.name = "useReload";
		inputObj.id = "useReload";
		inputObj.value = 'true';
		formObj.appendChild(inputObj);
		document.body.appendChild(formObj);
	}
	formObj.action = '/#' + id;
	formObj.submit();
};

shbComm.goPageLogout = function(menuCode) {
	shbComm.session.logout(false, function() {
		shbComm.goPage(menuCode);
	});
}

shbComm.loadStyleSheet = function() {
	if (!shbComm.isEasyService()) {
		// 메인성 화면이 아닌 경우에 센터 content css를 로드한다. 메인화면에서는 로드제외
		if ($('.main').length === 0 && $('.submain').length === 0) {
			var linkTag;
			var hasContentCss = false;
			var hasEnCss = false;
			var links = document.getElementsByTagName('link')
			for (var i=0;i<links.length;i++) {
				if (links[i].href && links[i].href.indexOf('/contents.css') > -1) {
					hasContentCss = true;
				}
				if (links[i].href && links[i].href.indexOf('/en.css') > -1) {
					hasEnCss = true;
				}
			}
			if (!hasContentCss) {
				linkTag = document.createElement('link');
				linkTag.setAttribute('href', '/comcss/contents.css?dt='+shbComm.getCurrentServerDate());
				linkTag.setAttribute('type', 'text/css');
				linkTag.setAttribute('rel', 'stylesheet');
				topWin.window.document.getElementsByTagName('head')[0].appendChild(linkTag);
			}
			if (shbComm.isEnLanguage() && !hasEnCss) {
				linkTag = document.createElement('link');
				linkTag.setAttribute('href', '/comcss/en.css');
				linkTag.setAttribute('type', 'text/css');
				linkTag.setAttribute('rel', 'stylesheet');
				topWin.window.document.getElementsByTagName('head')[0].appendChild(linkTag);
			}
		}
	}
};

shbComm.getPageParam = function(isNotRemove) {
	var pageParam = shbComm.getSaveObject('pageParam', isNotRemove);
	if (pageParam !== '') {
		return pageParam;
	}
	var params = window.location.search.substring(1).split("&");
	var len = params.length;
	if (len === 0) return '';
	pageParam = {};
	for (var i=0; i < len; i++) {
		var part = params[i].split("=");
		pageParam[decodeURIComponent(part[0])] = part[1];
	}
	return pageParam;
};

shbComm.setSaveObject = function(key, value){
	var valueType = "object";
	if( typeof value == 'string' ) {
		valueType ='string';
	} else if(typeof value == 'object' && value != null) {
		if( ( typeof value.serialize == 'function' || typeof value.serialize == 'object' ) || ( typeof value.classType != 'undefined' )  ) {
			value = value.serialize();
			valueType = "xml";
		} else {
			try {
				var tmp = JSON.stringify(value);
				value = tmp;
				valueType = 'json';
			} catch (e) {
				valueType = 'object';
			}
		}
	}
	WebSquare.localStorage.setItem(key, value);
	WebSquare.localStorage.setItem(key+"__VALUETYPE", valueType);
};

shbComm.getSaveObject = function(key, isNotRemove) {
	var obfuscator_retStr = "";
	var retType = WebSquare.localStorage.getItem(key+"__VALUETYPE");
	var tempValue = WebSquare.localStorage.getItem(key);
	
	if( typeof obfuscator_retStr == 'undefined' || obfuscator_retStr == null) {
		return "";
	}
	if( typeof retType == 'undefined' || retType == null || typeof tempValue == 'undefined' || tempValue == null) {
		return obfuscator_retStr;
	} else {
		obfuscator_retStr = WebSquare.localStorage.getItem(key).slice(0);
		retType = WebSquare.localStorage.getItem(key+"__VALUETYPE").slice(0);
	}
	var retObj;
	if( retType.toLowerCase() == 'string' || retType.toLowerCase() == 'number' || retType.toLowerCase() == 'boolean') {
		retObj = obfuscator_retStr;
	} else if( retType == 'object' ) {
		retObj = obfuscator_retStr;
	} else if( retType == 'json' ) {
		retObj = JSON.parse(obfuscator_retStr);
	} else {
		retObj = eval('new ' + retType + '( obfuscator_retStr )');
	}
	if (!isNotRemove) {
		WebSquare.localStorage.removeItem(key);
		WebSquare.localStorage.removeItem(key+"__VALUETYPE");
	}

	return retObj;
};
shbComm.createLocalStorage = function() {
	if (topWin.shbComm.localStorage == undefined) {
		topWin.shbComm.localStorage = (function(global) {
			var keys = "";
			var _storage = {};
			var ret = {};
			ret.length = 0;
			ret.key = function(index) {
				var index = Number(index);
				if (isNaN(index) || index >= this.length || index < 0) {
					return null;
				} else {
					var tmp = keys.split(";");
					return tmp[index];
				}
			};
			ret.getItem = function(key) {
				return _storage[key];
			};
			ret.setItem = function(key, value) {
				if (key != undefined) {
					_storage[key] = value;
					ret.length++;
				}
			};
			ret.removeItem = function(key) {
				if (_storage[key] != undefined) {
					delete _storage[key];
					ret.length--;
				}
			};
			ret.clear = function() {
				_storage = {};
				keys = "";
				length = 0;
			};
			return ret;
		})(window);
	}
	return topWin.shbComm.localStorage;
};
shbComm.openPopupPost = function(url, param, option) {
	//ie11 관리자모드 실행 or administrator 계정으로 ie11 사용시 팝업으로 form target 사용이 불가능 현상 우회 localStorage 이용 
	if( WebSquare.util.isIEAllVersion() && "11" == WebSquare.core.browserVersion() ) {
		localStorage.setItem("ie11postparams",JSON.stringify(param));
		localStorage.setItem("ie11postaction",url);
		window.open('/websquare/popuppostie11.html', '_new', option ? option : 'width=1024,height=800,top=100');
	} else {
		// TODO : blank page 가져오는 api 적용
		window.open('/websquare/blank.html', 'popupPost', option ? option : 'width=1024,height=800,top=100');
		var body = document.getElementsByTagName('body')[0];
		if (!body) return;
		var form = document.getElementById('shbForm');
		if (!form) {
			form = document.createElement('form');
		}
		form.id = 'shbForm';
		form.name = 'shbForm';
		form.target = 'popupPost';
		form.method = 'post';
		form.action = url;
		form.style.visibility = "hidden";
		form.innerHtml = '';
		for (key in param) {
			var input = document.createElement('input');
			input.name = key;
			input.value = param[key];
			form.appendChild(input);
		}
		body.appendChild(form);
		form.submit();
		body.removeChild(form);
	}
};

/**
 * 팝업을 호출한다.
 * @param id : Popup창 id
 * @param url : 화면경로
 * @param options : Popup창 파라미터 Object
 * @example openPopup("alert", "/template/common/xml/zzAlertPop.xml", options);
 */
shbComm.openWindowPop = function(id, url, options) {
	var clientHeight = Math.min(window.screen.height, window.screen.availHeight, document.documentElement.clientHeight);
	var clientWidth = document.documentElement.clientWidth;

	if (typeof options == "undefined") options = {};
	var width = options.width || clientWidth;
	var height = options.height || clientHeight;

	var left = left || -1;
	var top = top || -1;
	var browserLeft = (self.screenLeft || window.screenX);
	var browserTop = (self.screenTop || window.screenY);
	if (left > 0 ){
		left = left + ( self.screenLeft || window.screenX);
	}else{
		left = browserLeft + Math.floor((clientWidth - width)/2);
	}
	if (top > 0 ){
		top = top + ( self.screenTop || window.screenY );
	}else{
		top = browserTop + Math.floor((clientHeight - height)/2);
	}
	options.width = width;
	options.height = height;
	options.left = left;
	options.top = top;
	var popupOption = shbComm.makePopupString(options);
	var popupId = window.open(url, id, popupOption);
};

shbComm.makePopupString = function(options) {
	try {
		var target = "width height resizable status menubar scrollbars title left top";
		var popupString = "";
		for (var idx in options) {
			if (target.indexOf(idx) > -1) {
				if (idx == "width" || idx == "height" || idx == "left" || idx == "top") {
					popupString += (idx+"="+parseInt(options[idx],10)+"px,");
				} else {
					var flag = options[idx] == true ? "yes" : "no";
					popupString += (idx+"="+flag+",");
				}
			}
		}
		if (!options["scrollbars"]) {
			//popupString += "scrollbars=auto";
		}
		return popupString;
	} catch(e) {
	}
};

// switch case문 이동
shbComm.switchWframe = function(objId, selected, focusTargetId) {
	var i; 
	var targetObj = eval(objId);
	var menuCode = null;
	var offset = $('#path').height() + 20;
	var preIndex = targetObj.getSelectedIndex();
	if (typeof selected === 'number') {
		// 선택할 case show
		targetObj.setSelectedIndex(selected);
		// 포커스는 무조건 top으로 팝업은 제외
		if (focusTargetId !== 'focusNoReset') {
			if( strLib.isEmpty(shbComm.getPopupId()) && targetObj.getSelectedIndex() !== preIndex) {
				$('#skipNavi').attr('tabindex', 0).focus().unbind('blur').bind('blur', function() {
					$(this).attr('tabindex', '');
				});
			}
		}
		eval(targetObj.getSelectedID()).show();
		menuCode = eval(targetObj.getSelectedID()).getAttribute('menuCode');
		// 나머지 case hide
		for (i=0; i < targetObj.caseArr.length; i++) {
			if (i != selected) {
				eval(targetObj.caseArr[i].caseID).hide();
			}
		}
		if (focusTargetId !== 'focusNoReset' && focusTargetId) {
			if (targetObj.getSelectedIndex() !== 0) {
				//$('#' + focusTargetId).attr('tabindex', 0).focus();
			}
			window.scroll(0, $('#' + focusTargetId).offset().top - offset);
		} else {
			if (targetObj.getSelectedIndex() !== 0) {
				//$('#' + targetObj.getSelectedID()).attr('tabindex', 0).focus();
			}
			window.scroll(0, 0);
		}
	} else if (typeof selected === 'string') {
		// 선택할 case show
		targetObj.setSelectedID(selected)
		// 포커스는 무조건 top으로 팝업은 제외
		if (focusTargetId !== 'focusNoReset') {
			if( strLib.isEmpty(shbComm.getPopupId()) && targetObj.getSelectedIndex() !== preIndex) {
				$('#skipNavi').attr('tabindex', 0).focus().unbind('blur').bind('blur', function() {
					$(this).attr('tabindex', '');
				});
			}
		}
		eval(targetObj.getSelectedID()).show();
		menuCode = eval(targetObj.getSelectedID()).getAttribute('menuCode');
		// 나머지 case hide
		for (i=0; i < targetObj.caseArr.length; i++) {
			if (targetObj.caseArr[i].caseID != selected) {
				eval(targetObj.caseArr[i].caseID).hide();
			}
		}
		if (focusTargetId !== 'focusNoReset' && focusTargetId) {
			if (targetObj.getSelectedIndex() !== 0) {
				//$('#' + focusTargetId).attr('tabindex', 0).focus();
			}
			window.scroll(0, $('#' + focusTargetId).offset().top - offset);
		} else {
			if (targetObj.getSelectedIndex() !== 0) {
				//$('#' + targetObj.getSelectedID()).attr('tabindex', 0).focus();
			}
			window.scroll(0, 0);
		}
	}
	// 브라우저 타이틀셋팅
	if (menuCode) {
		var stepMenuName = shbComm.menu.getMenuName(menuCode);
		shbComm.menu.setTitle(stepMenuName);
	}
	
	// GA360 가상페이지뷰 전송 
	shbComm.saveSwitchLog(selected);
};

//CEO 이름 조회
shbComm.getBankCeoNm = function(type) {
	var sReplaceSpace = "";
	var bReplace = false;
	if( numLib.isInt(type) ){
		bReplace = true;
		var iCnt = (typeof type == "string" ? parseInt(type,10) : type);
		if( iCnt > 0 ) {
			for ( var i = 0; i < iCnt; i++) {
				sReplaceSpace += " "; 
			}
		}
	}
	var option = {};
	option.serviceType = "CO";
	option.serviceCode = "code";
	option.permitMultiTransaction = "true";
	option.language=(topWin.shbComm.LANGUAGE != "ko" ? "en" : "ko");
	option.sync = "synchronous";
	var param = {"code":{"codeKey":"shb_ceo_nm_type1","language":(topWin.shbComm.LANGUAGE != "ko" ? "en" : "ko")}};
	var reObj = shbComm.executeAjax("", param, option);
	if( !jsonLib.isNullObj(reObj) && !jsonLib.isNullObj(reObj.root_info) && !strLib.isEmpty(reObj.root_info.resultStatus) && "S" == reObj.root_info.resultStatus) {
		var arrResult = reObj.shb_ceo_nm_type1;
		if( !jsonLib.isNullObj(arrResult) && jsonLib.isArray(arrResult) && arrResult.length > 0 ) {
			if(!strLib.isEmpty(arrResult[0].value) ) {
				var sCeoNm = arrResult[0].value; 
				if( bReplace && "ko" == topWin.shbComm.LANGUAGE ) {
					var temp = sCeoNm.replace(/\s/ig,"");
					sCeoNm = "";
					for ( var i = 0; i < temp.length; i++) {
						sCeoNm += temp.substr(i,1)+sReplaceSpace;
					}
					sCeoNm = sCeoNm.trim(); 
				}
				return sCeoNm
			}
		}
	}
	return "";
}
//영업일 조회 통신
shbComm.executeOPDate = function(param) {
	var option = {};
	option.serviceType = "ET";
	option.serviceCode = "ET0001";
	option.sync = "synchronous";
	option.permitMultiTransaction = "true";
	var reObj = shbComm.executeAjax("", param, option);
	if( !jsonLib.isNullObj(reObj) && !jsonLib.isNullObj(reObj.OPDate) ) {
		return reObj.OPDate;
	} else {
		return null;
	}
}
//영업일 조회 shbComm.getOPDate():현재영업일조회, shbComm.getOPDate(-1) 이전영업일
shbComm.getOPDate = function(days){
	var param = {"S_RIBET0001":{"days":"","day":"","isYn":""}};
	if( !strLib.isEmpty(days) ) { param.S_RIBET0001.days = days; }
	var opdate = shbComm.executeOPDate(param);
	return opdate.date;
};
//영업일여부
shbComm.isOPDate = function(day){
	var param = {"S_RIBET0001":{"days":"","day":"","isYn":"Y"}};
	if( !strLib.isEmpty(day) ) { param.S_RIBET0001.day = day; }
	var opdate = shbComm.executeOPDate(param);
	if( !jsonLib.isNullObj(opdate.isOPDate) && WebSquare.util.getBoolean(opdate.isOPDate) ) {
		return true;
	} else {
		return false;
	}
};
//입력일에 가장 가까운(과거) 영업일  
shbComm.getPreOPDate = function(sDate){
	var i = 0;
	while( !shbComm.isOPDate(sDate) && i < 100 ){
		sDate = dateLib.addDate("d", -1, sDate);
		i++;
	}
	return sDate
};
//입력일에 가장 가까운(미래) 영업일
shbComm.getNextOPDate = function(sDate) {
	var i = 0;
	while( !shbComm.isOPDate(sDate) && i < 100 ){
		sDate = dateLib.addDate("d", 1, sDate);
		i++;
	}
	return sDate
};
//서버 일시 조회
shbComm.getCurrentServerDate = function(pattern){
	var sPattern = "yyyyMMdd";
	if( !strLib.isEmpty(pattern) ) {
		sPattern = pattern;
	}
	return WebSquare.date.getCurrentServerDate(sPattern);
};
//서버 일시 조회 리턴 object
shbComm.getCurrentServerDateObj = function(){
	var dateTime = WebSquare.date.getCurrentServerDate("yyyyMMddHHmmss");
	return {
		DATETIME : dateTime,
		DATE : dateTime.substr(0, 8),
		TIME : dateTime.substr(8),
		YEAR : dateTime.substr(0, 4),
		MONTH : dateTime.substr(4, 2),
		DAY : dateTime.substr(6, 2),
		HOURMIN : dateTime.substr(8, 4),
		HOUR : dateTime.substr(8, 2),
		MIN : dateTime.substr(10, 2),
		SEC : dateTime.substr(12)
	};
};
//footer.xml grp_alertlayer :: alert layer control
shbComm.alertLayer = {};
shbComm.alertLayer.showOption = {"msgType":"","yesCallbackNm":"","noCallbackNm":"","cancelCallbackNm":"","closeCallbackNm":"","focusId":""};
//private alertLayer option 초기화
shbComm.alertLayer.clearOption = function() {
	shbComm.alertLayer.showOption = {"msgType":"","yesCallbackNm":"","noCallbackNm":"","cancelCallbackNm":"","closeCallbackNm":"","focusId":""};
};
//private alertLayer dimmed 처리
shbComm.alertLayer.showModalLayer = function(show) {
	if( show ){
		//혹시 alertLayer가 보이는 상태에서 또 alert을 실행하면 showModal 실행하지 않도록 
		var isViewAlert = false;
		var mspl = WebSquare.getBody().modalStackPopupLayer;
		if( !jsonLib.isNullObj(mspl) && mspl.length > 0 ) {
			for( var i = 0; i < mspl.length; i++) {
				if(isViewAlert) break;
				for( var j = 0; j < mspl[i].length; j++) {
					if( "grp_alertlayer" == mspl[i][j] ) {
						isViewAlert = true;
						break;
					}
				}
			}
		}
		if( !isViewAlert ) {
			WebSquare.getBody().showModal(null, ['grp_alertlayer']);
		} 
		//_modal.style.zIndex = 6000;
		_modal.style.height = document.body.scrollHeight + 'px';
		//팝업들이 있으면 모달밑으로 내림
		$('.w2popup_window').addClass('down_modal').css('z-index','5990');
	} else {
		WebSquare.getBody().hideModal();
		//팝업들이 있으면 모달위로 올림
		var popList = shbComm.getPopupList();
		if( !jsonLib.isNullObj(popList) && jsonLib.isArray(popList) && popList.length > 0 ){
			for( var i = popList.length-1; i >= 0; i-- ){
				popList[i].popupWin.setStyle("z-index","");
				popList[i].popupWin.removeClass("down_modal");
				if( popList[i].options.modal ) { break; }
			}
		}
	}
	return;
};
// 메시지 레이어에 표시할 메시지 내용과 버튼을 클릭했을 경우 처리할 Method를 설정
shbComm.alertLayer.displayAlertLayer = function(messageStr) {
	shbComm.designateFocus();
	shbComm.alertLayer.showModalLayer(true);
	if( messageStr.indexOf("\n") > -1 ) {
		messageStr = strLib.replaceAll(messageStr, "\n", "<br/>");
	}
	// 오류메시지에 포함된 <BR> 태그 삭제
	if( /(<br|<\/br)/ig.test(messageStr) ) {
		if( !out_alertLayer_message.hasClass("aL") ) {
			out_alertLayer_message.addClass("aL");
		}
	} else {
		if( out_alertLayer_message.hasClass("aL") ) {
			out_alertLayer_message.removeClass("aL");
		}
	}
	out_alertLayer_message.setValue(messageStr.replace(/<br\/><br\/>/gi,"<br/>") );
	
	btn_alertLayer_yes.hide();
	btn_alertLayer_no.hide();
	btn_alertLayer_cancel.hide();
	if( "1" == shbComm.alertLayer.showOption.msgType) {// alert
		//out_alertLayer_title.setValue("알림");
		btn_alertLayer_cancel.setValue(shbComm.lang["CO01065"]);
		btn_alertLayer_cancel.show("");
	} else if( "4" == shbComm.alertLayer.showOption.msgType) {// alert 후 콜백 필요시
		//out_alertLayer_title.setValue("알림");
		btn_alertLayer_yes.setValue(shbComm.lang["CO01065"]);
		btn_alertLayer_yes.show("");
	} else if( "2" == shbComm.alertLayer.showOption.msgType) {// confirm
		//out_alertLayer_title.setValue("확인");
		btn_alertLayer_yes.setValue(shbComm.lang["CO01065"]);
		btn_alertLayer_cancel.setValue(shbComm.lang["CO01068"]);
		btn_alertLayer_yes.show("");
		btn_alertLayer_cancel.show("");
	} else if( "3" == shbComm.alertLayer.showOption.msgType) {// 예/아니오/취소
		//out_alertLayer_title.setValue("확인");
		btn_alertLayer_yes.setValue(shbComm.lang["CO01066"]);
		btn_alertLayer_no.setValue(shbComm.lang["CO01067"]);
		btn_alertLayer_cancel.setValue(shbComm.lang["CO01068"]);
		btn_alertLayer_yes.show("");
		btn_alertLayer_no.show("");
		btn_alertLayer_cancel.show("");
	} else if( "5" == shbComm.alertLayer.showOption.msgType) {// 예/아니오
		btn_alertLayer_yes.setValue(shbComm.lang["CO01066"]);
		btn_alertLayer_cancel.setValue(shbComm.lang["CO01067"]);
		btn_alertLayer_yes.show("");
		btn_alertLayer_cancel.show("");
	}
	
	//$("#grp_alertlayer:wq").wq("setStyle","visibility","visible").jq().attr('tabindex', '0');
	grp_alertlayer.show("");
	$("#grp_alertlayer").attr('tabindex', '0');
	$("#grp_alertlayer").focus();
//	$("#grp_alertlayer .detailPop .layerContainer").attr('tabindex','0').focus();
	//pubApp.layerDefault 에서 위치밑 tab 키 이벤트 처리 binding됨 
	//var popWfrComp = WebSquare.util.getComponentById("grp_alertlayer");
	//var _l = WebSquare.util.parseInt(popWfrComp.getSize("width")/2,0)*-1;//+$(document).scrollLeft();
	//var _t = WebSquare.util.parseInt(popWfrComp.getSize("height")/2,0)*-1;//+$(document).scrollTop();
	//popWfrComp.setStyle("margin-left",_l+"px");
	//popWfrComp.setStyle("margin-top",_t+"px");
	//$("#grp_alertlayer .detailPop .layerContainer").on('keydown','pubApp.ignoreShiftTabKey');
	//$("#grp_alertlayer .detailPop .layerContainer .layerClose").on("keydown",pubApp.ignoreTabKey);
};
//private alertLayer show 실행
shbComm.alertLayer.showAlertLayer = function(messageStr){
	var pStr = messageStr;
	if((typeof messageStr) != "undefiend" && messageStr != null && messageStr != ""){
		if(pStr.indexOf("01234comma43210") > -1){
			pStr = messageStr.replace(/01234comma43210/gi, ",");
		}
	} else {
		shbComm.alert("have not message!");
		return false;
	}
	
	$w.setTimeout(function() {
		shbComm.alertLayer.displayAlertLayer(pStr);
	}, {
		key : 'alertLayerTimeout',
		delay : 400,
		callback : function() {
			$w.clearTimeout('alertLayerTimeout');
		}
	});
};
//private alertLayer 닫기
shbComm.alertLayer.closeAlertLayer = function(){
	shbComm.moveDesignatedFocus();
	if( !jsonLib.isNullObj(shbComm.alertLayer.showOption.focusId) ) {
		var oFocus = shbComm.alertLayer.showOption.focusId;
		if( typeof shbComm.alertLayer.showOption.focusId == "string" ) {
			oFocus = shbComm.getComponent(shbComm.alertLayer.showOption.focusId);
		}
		if( !jsonLib.isNullObj(oFocus) ) {
			if( !jsonLib.isNullObj($("#"+oFocus.id)) && $("#"+oFocus.id).length > 0 && !jsonLib.isNullObj($("#"+oFocus.id).offset()) ) {
				var inputTop = $("#"+oFocus.id).offset().top;
				var wintop = $(window).scrollTop();
				if (inputTop < wintop) {
					var toPx = inputTop-200;
					if (toPx < 0) toPx = 0;
					$(window).scrollTop(toPx);
				}
				//엔터키에 값체크 함수가 걸려있는 오브젝트에 값체크가 걸려 alert 레이어가 보이고 엔터키로 닫으면서 포커싱이 걸려 있으면
				//포커싱후에 엔터키 이벤트가 일어나서 alert이 계속 보임 해결을 위해 포커싱을 타이머걸어서 실행함
				$w.setTimeout(
					function(){ oFocus.focus(); },
					{
						key : 'moveFocusAlertObj',
						delay : 100,
						callback : function() {
							$w.clearTimeout('moveFocusAlertObj');
						}
					});
			}
		}
	}
	//grp_alertlayer.setStyle("visibility","hidden");
	grp_alertlayer.hide();
	$('#grp_alertlayer').removeAttr('tabindex');
	shbComm.alertLayer.showModalLayer();
};
//private alertLayer Close
shbComm.alertLayer_onclose = function() {
	if (grp_alertlayer.getStyle('visibility') == 'visible') { //보일때
		shbComm.alertLayer.closeAlertLayer();
		shbComm.alertLayer.clearOption();
	}
};
//private alertLayer에 예 버튼 클릭
shbComm.yesButtonClick = function() {
	shbComm.alertLayer.closeAlertLayer();
	if(shbComm.alertLayer.showOption.yesCallbackNm != null && shbComm.alertLayer.showOption.yesCallbackNm != ""){
		var oFn = eval(shbComm.alertLayer.showOption.yesCallbackNm);
		if(typeof oFn == 'function') {
			oFn.call(this, true);
		}
	}
};
//private alertLayer에 아니요 버튼 클릭
shbComm.noButtonClick = function() {
	shbComm.alertLayer.closeAlertLayer();
	if(shbComm.alertLayer.showOption.noCallbackNm != null && shbComm.alertLayer.showOption.noCallbackNm != ""){
		var oFn = eval(shbComm.alertLayer.showOption.noCallbackNm);
		if(typeof oFn == 'function') {
			oFn.call(this, false);
		}
	}
};
//private alertLayer에 취소버튼 클릭
shbComm.cancelButtonClick = function() {
	shbComm.alertLayer.closeAlertLayer();
	if(shbComm.alertLayer.showOption.cancelCallbackNm != null && shbComm.alertLayer.showOption.cancelCallbackNm != ""){
		var oFn = eval(shbComm.alertLayer.showOption.cancelCallbackNm);
		if(typeof oFn == 'function') {
			oFn.call(this, false);
		}
	}
};
//private alertLayer X 클릭
shbComm.closeAlertLayer = function(){
	shbComm.alertLayer.closeAlertLayer();
	if(shbComm.alertLayer.showOption.closeCallbackNm != null && shbComm.alertLayer.showOption.closeCallbackNm != ""){
		var oFn = eval(shbComm.alertLayer.showOption.closeCallbackNm);
		if(typeof oFn == 'function') {
			oFn.call(this, false);
		}
	}	
};
// alert, 호출시 꼭 바로 아래에서 return 시킬것
shbComm.alert = function(msgStr, focusId, yesFnNm) {
	shbComm.alertLayer.clearOption();
	shbComm.alertLayer.showOption.msgType = "1";
	if( (typeof yesFnNm) != "undefined" && yesFnNm != null && yesFnNm != "" ) {//alert인데 뒤에 다른작업이 꼭 필요할때
		shbComm.alertLayer.showOption.msgType = "4";
		shbComm.alertLayer.showOption.yesCallbackNm = yesFnNm;
		shbComm.alertLayer.showOption.closeCallbackNm = yesFnNm;
	}
	shbComm.alertLayer.showOption.focusId = focusId;
	shbComm.alertLayer.showAlertLayer(msgStr);
};
//confirm, 호출시 꼭 바로 아래에서 return 시킬것
shbComm.confirm = function(msgStr, yesFnNm, focusId, cancelCallbackNm) {
	shbComm.alertLayer.clearOption();
	if( (typeof yesFnNm) != "undefined" && yesFnNm != null && yesFnNm != "" ) {
		shbComm.alertLayer.showOption.yesCallbackNm = yesFnNm;
	};
	if( (typeof cancelCallbackNm) != "undefined" && cancelCallbackNm != null && cancelCallbackNm != "" ) {
		shbComm.alertLayer.showOption.cancelCallbackNm = cancelCallbackNm;
		shbComm.alertLayer.showOption.closeCallbackNm = cancelCallbackNm;
	}
	shbComm.alertLayer.showOption.msgType = "2";
	shbComm.alertLayer.showOption.focusId = focusId;
	shbComm.alertLayer.showAlertLayer(msgStr);
};
//3버튼 confirm, 호출시 꼭 바로 아래에서 return 시킬것
shbComm.confirmYesNoCancel = function(msgStr, yesFnNm, noFnNm, focusId, cancelCallbackNm) {
	shbComm.alertLayer.clearOption();
	if( (typeof yesFnNm) != "undefined" && yesFnNm != null && yesFnNm != "" ) {
		shbComm.alertLayer.showOption.yesCallbackNm = yesFnNm;
	};
	if( (typeof noFnNm) != "undefined" && noFnNm != null && noFnNm != "" ) {
		shbComm.alertLayer.showOption.noCallbackNm = noFnNm;
	};
	if( (typeof cancelCallbackNm) != "undefined" && cancelCallbackNm != null && cancelCallbackNm != "" ) {
		shbComm.alertLayer.showOption.cancelCallbackNm = cancelCallbackNm;
		shbComm.alertLayer.showOption.closeCallbackNm = cancelCallbackNm;
	}
	shbComm.alertLayer.showOption.msgType = "3";
	shbComm.alertLayer.showOption.focusId = focusId;
	shbComm.alertLayer.showAlertLayer(msgStr);
};
//confirm, 호출시 꼭 바로 아래에서 return 시킬것
shbComm.confirmYesNo = function(msgStr, yesFnNm, focusId, cancelCallbackNm) {
	shbComm.alertLayer.clearOption();
	if( (typeof yesFnNm) != "undefined" && yesFnNm != null && yesFnNm != "" ) {
		shbComm.alertLayer.showOption.yesCallbackNm = yesFnNm;
	};
	if( (typeof cancelCallbackNm) != "undefined" && cancelCallbackNm != null && cancelCallbackNm != "" ) {
		shbComm.alertLayer.showOption.cancelCallbackNm = cancelCallbackNm;
		shbComm.alertLayer.showOption.closeCallbackNm = cancelCallbackNm;
	}
	shbComm.alertLayer.showOption.msgType = "5";
	shbComm.alertLayer.showOption.focusId = focusId;
	shbComm.alertLayer.showAlertLayer(msgStr);
};
// 새창으로 열기
shbComm.openNewWindow = function(url, option) {
	if( jsonLib.isNullObj(option) ) option = {};
	if( !numLib.isInt(option.left) ) option.left=0;
	if( !numLib.isInt(option.top) ) option.top=0;
	if( !numLib.isInt(option.width) ) option.width=1024;
	if( !numLib.isInt(option.height) ) option.height=768;
	if( strLib.isEmpty(option.location) ) option.location="yes";
	if( strLib.isEmpty(option.menubar) ) option.menubar="no";
	if( strLib.isEmpty(option.toolbar) ) option.toolbar="no";
	if( strLib.isEmpty(option.scrollbars) ) option.scrollbars="yes";
	if( strLib.isEmpty(option.resizable) ) option.resizable="yes";
	var winAttribute = "left="+option.left+",top="+option.top+",width="+option.width+",height="+option.height+",location="+option.location+",menubar="+option.menubar+",toolbar="+option.toolbar+",scrollbars="+option.scrollbars+",resizable="+option.resizable;
	//fullscreen, channelmode, status
	window.open(url,"_blank",winAttribute);
};


/* ***** 공통팝업 [공통 팝업, common popup : for search]***** */
// 계좌비밀번호 오류횟수 조회 팝업
shbComm.inqryAccPwErrCntPopup = function(jParam, callbackFnNm){
	
	var option = {	"title":shbComm.lang["CO00100"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00001RP.xml"
					,"width":"662"
					,"height":"344"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	
	shbComm.openPopup(option);
};

// 보안매체 비밀번호 오류횟수 조회 팝업
shbComm.inqrysCardErrorCntPop = function(jParam, callbackFnNm){
	
	var pWidth = "662";
	var pHeight = "322";
	
	if(shbComm.LANGUAGE == "en"){
		pWidth = "662";
		pHeight = "357";
	}
	
	var option = {	"title":shbComm.lang["CO00101"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00002RP.xml"
					,"width":pWidth
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

// 장애은행조회 팝업
shbComm.inqryBankErrorListPop = function(jParam, callbackFnNm){
	
	var pWidth = "492";
	var pHeight = "435";
	
	if(shbComm.LANGUAGE == "en"){
		pWidth = "492";
		pHeight = "510";
	}
	
	var option = {	"title":shbComm.lang["CO00102"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00004RP.xml"
					,"width":pWidth
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

//이체한도조회 팝업
shbComm.inqryTrnsfrLmtPop = function(jParam, callbackFnNm){

	var pHeight = "372";
	
	if(shbComm.LANGUAGE == "en"){
		pHeight = "392";
	}
	var option = {	"title":shbComm.lang["CO00103"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00005RP.xml"
					,"width":"492"
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

//수수료 면제횟수조회 팝업
shbComm.inqryCmsnCntPop = function(jParam, callbackFnNm){
	
	var option = {	"title":shbComm.lang["CO00104"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00006RP.xml"
					,"width":"812"
					,"height":"593"
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

// 보안카드 번호 입력 후 거래중지안내 (미사용-> div형태로 security.xml에서 사용 예정)
shbComm.guideTransStopPop = function(jParam, callbackFnNm){
	
	var option = {	"title":shbComm.lang["CO00105"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00007RP.xml"
					,"width":"1044"
					,"height":"520"
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

// 출금계좌선택
shbComm.selectWdAcctPop = function(jParam, callbackFnNm){
	
	if(typeof jParam.출금계좌목록 == "object"){
		if(jParam.출금계좌목록.length == 1){
			if(jParam.출금계좌목록[0].계좌번호 == ""){
				shbComm.alert(shbComm.lang["CO01052"]);
				return;
			}
		}else if(jParam.출금계좌목록.length == 0){
			shbComm.alert(shbComm.lang["CO01052"]);
			return;
		}
	}
	
	var title = "";
	if(jParam.title == "" || typeof jParam.title =="undefined"){
		title = shbComm.lang["CO00106"]
	}else{
		title = jParam.title;
	}
	
	var option = {	"title":title
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00008RP.xml"
					,"width":"662"
					,"height":"467"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

// 계산기 레이어 팝업
shbComm.showCalculatorPop = function(jParam, callbackFnNm){
	
	var title = shbComm.lang["CO00107"]+"(KRW)";
	// set title
	if(jParam.통화코드 != "" && typeof jParam.통화코드 != "undefined" && jParam.통화코드 != "KRW"){
		title = shbComm.lang["CO00107"]+"("+jParam.통화코드+")";
	}
	
	// set position
	var ptop = String($("#"+jParam.btnId).offset().top - 10);
	var pleft = String($("#"+jParam.btnId).offset().left + 50);
	
	if(jParam.popYn == "Y"){
		var popList = parent.shbComm.getPopupList();
		var popTop = parent.$("#"+popList[0].id).offset().top;
		ptop = popTop + 56 + parseInt(ptop) + 8;
		ptop = ptop.toString();
		
		var popLeft = parent.$("#"+popList[0].id).offset().left;
		pleft = popLeft + parseInt(pleft) + 48;
		pleft = pleft.toString();
	}
	
	var option = {	"title":title
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00009RP.xml"
					,"modal":"false"
					,"top":ptop
					,"left":pleft
					,"width":"165"
					,"height":"306"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	
	shbComm.openPopup(option);
	topWin.shbComm.calcAddClass();
};

// iframe 내에서 띄울 경우 class 누락 방지 (팝업에서 계산기 호출 시 사용됨) - 개발자 사용금지
shbComm.calcAddClass = function(){
	if( $('.w2popup_window:last-child').attr('id').indexOf("CO00009RP") >= 0 ){
		$('.w2popup_window:last-child').addClass('popCalc');
	}
};

// OTP사용관련 안내 팝업
shbComm.guideOtpWarningPop = function(jParam, callbackFnNm){
	
	var pWidth = "662";
	var pHeight = "437";
	
	if(shbComm.LANGUAGE == "en"){
		pWidth = "662";
		pHeight = "497";
	}
	
	var option = {	"title":shbComm.lang["CO00108"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00010RP.xml"
					,"width":pWidth
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	
	if(shbComm.getCommonPopCookie("CO00010RP") != "CO00010RP"){
		shbComm.openPopup(option);
	}
};


// 보안카드 재발급 안내 팝업
shbComm.guideScardReisPop = function(jParam, callbackFnNm){

	var pHeight = "584";
	
	if(shbComm.LANGUAGE == "en"){
		pHeight = "648";
	}
	
	var option = {	"title":shbComm.lang["CO00109"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00011RP.xml"
					,"width":"492"
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	
	if(shbComm.getCommonPopCookie("CO00011RP") != "CO00011RP"){
		shbComm.openPopup(option);
	}
};

// 신계좌/구계좌 이용안내 팝업
shbComm.guideNewOldAcctPop = function(jParam, callbackFnNm){
	
	var option = {	"title":shbComm.lang["CO00110"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00014RP.xml"
					,"width":"662"
					,"height":"656"
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};


// 권유직원 레이어팝업
shbComm.inqryStaffPop = function(jParam, callbackFnNm){
	
	var option = {	"title":shbComm.lang["CO00111"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00016RP.xml"
					,"width":"662"
					,"height":"454"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};


// 은행선택 레이어팝업
shbComm.selectBankPop = function(jParam, callbackFnNm){
	
	var title = "";
	if(jParam.title == "" || typeof jParam.title =="undefined"){
		title = shbComm.lang["CO00112"];
	}else{
		title = jParam.title;
	}
	
	var option = {	"title": title
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00017RP.xml"
					,"width":"662"
					,"height":"627"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

//국세포함 은행선택 레이어팝업 -  R2018-5261 국세이체납부 업무 적용,
shbComm.selectBankPop2 = function(jParam, callbackFnNm){
	
	var title = "";
	if(jParam.title == "" || typeof jParam.title =="undefined"){
		title = shbComm.lang["CO00112"];
	}else{
		title = jParam.title;
	}
	
	var option = {	"title": title
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00054RP.xml"
					,"width":"662"
					,"height":"627"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

// 장기미이체안내 팝업
shbComm.guideExNoTrnsfrPop = function(jParam, callbackFnNm){
	
	var pWidth = "492";
	var pHeight = "492";
	
	if(shbComm.LANGUAGE == "en"){
		pWidth = "492";
		pHeight = "554";
	}
	
	var option = {	"title":shbComm.lang["CO00113"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00019RP.xml"
					,"width":pWidth
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	if(shbComm.getCommonPopCookie("CO00019RP") != "CO00019RP"){
		shbComm.openPopup(option);
	}
};

// 해외IP 로그인 접속알림
shbComm.guideContAbrdIp = function(jParam, callbackFnNm){

	var pHeight = "417";
	
	if(shbComm.LANGUAGE == "en"){
		pHeight = "428";
	}
	
	var option = {	"title":shbComm.lang["CO00114"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00027RP.xml"
					,"width":"662"
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	
	shbComm.openPopup(option);
};

// 해외IP 로그인 차단알림
shbComm.guideBlockAbrdIp = function(jParam, callbackFnNm){

	var pHeight = "441";
	
	if(shbComm.LANGUAGE == "en"){
		pHeight = "452";
	}
	
	var option = {	"title":shbComm.lang["CO00115"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00028RP.xml"
					,"width":"662"
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	shbComm.openPopup(option);
};

// 이용기기 추가 등록안내
shbComm.guideAddEquipPop = function(jParam, callbackFnNm){
	
	var pWidth = "492";
	var pHeight = "461";
	
	if(shbComm.LANGUAGE == "en"){
		pWidth = "492";
		pHeight = "501";
	}
	
	var option = {	"title":shbComm.lang["CO00116"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00036RP.xml"
					,"width":pWidth
					,"height":pHeight
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	
	shbComm.openPopup(option);
};

//영문주소 팝업
shbComm.inqryEngAddrPop = function(jParam, callbackFnNm){
	var option = {	"title":"주소찾기"
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00030RP.xml"
					,"width":"664"
					,"height":"599"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	shbComm.openPopup(option);
}
//주소찾기 팝업
shbComm.inqryAddrPop = function(jParam, callbackFnNm){
	var option = {	"title":"주소찾기"
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00022RP.xml"
					,"width":"662"
					,"height":"720"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	shbComm.openPopup(option);
}
//신계좌전환 팝업
shbComm.changeNewAccPop = function(jParam, callbackFnNm, callbackClose){
	var option = {	 "title":shbComm.lang["CO00117"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00029RP.xml"
					,"width":"492"
					,"height":(shbComm.isEnLanguage() ? "407" : "387")
					,"dataObject":jParam
					,"callback":callbackFnNm
					,"callbackClose":callbackClose};
	shbComm.openPopup(option);
}

// 자주쓰는문구
shbComm.inqryFreqPhrasePop = function(jParam, callbackFnNm){

	var option = {"title":shbComm.lang["CO00118"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00020RP.xml"
					,"width":"492"
					,"height":"583"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	shbComm.openPopup(option);
};

//구계좌보기
shbComm.inqryOldAccPop = function(jParam, callbackFnNm){
	var option = {
		 "title":shbComm.lang["CO00119"]
		,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00035RP.xml"
		,"width":"492"
		,"height":(shbComm.isEnLanguage() ? "334" : "314")
		,"modal":"false"
		,"callback":callbackFnNm
		,"dataObject":jParam};
	shbComm.openPopup(option);
};
/*
 * 프로그램설치 안내팝업
 * @param jParam = {type(1:라온, 2:로그인시필수설치프로그램, 3:이니텍공인인증서창 exe설치안내 ), mandtoryYn(Y:필수설치, N:선택설치) }
 * @param callbackFnNm
 * ex) var jParam = {"type":"1", "mandatoryYn":"Y"};
 *     shbObj.swInstallAlert(jParam);
*/
shbComm.swInstallAlert = function(jParam, callbackFnNm){
	if( shbComm.getCommonPopCookie("CO00015RP") == "" ){
		var option = {	"title":shbComm.lang["CO00098"]
						,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00015RP.xml"
						,"width":"492"
						,"height":"440"
						,"callback":callbackFnNm
						,"dataObject":jParam };
		
		shbComm.openPopup(option);
	}
};

//에러안내 팝업 {"에러코드":"PFM40122"}
shbComm.errorGuidePop = function(jParam, callbackFnNm){
	var option = {
		 "title":shbComm.lang["CO00120"]
		,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00023RP.xml"
		,"width":"662"
		,"height":"520"
		,"callback":callbackFnNm
		,"dataObject":jParam};
	shbComm.openPopup(option);
};
//신계좌/구계좌 조회 팝업 
shbComm.inqryAccPop = function(){
	var option = {
		 "title":shbComm.lang["CO00121"]
		,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00024RP.xml"
		,"width":"662"
		,"height":(shbComm.isEnLanguage() ? "583" : "534")
		,"modal":"false"};
	shbComm.openPopup(option);
}

// 관리자연동 컨텐츠공지팝업
/*
//title:제목, type: text/html, content:내용, period:all or (1d, 7d, 1m, 6m, no)
var jParam = {	"title":"공지제목입니다.", 
				"content":"공지테스트입니다.&nbsp;안녕하세요.<br>테스트입니다. <br> <b><font color='red'>테스트 값</font></b>",
				"period":"all"
};
shbComm.admContentsNoticePop(jParam);
*/
shbComm.admContentsNoticePop = function(jParam, callbackFnNm){
	
	var title = "";
	if(jParam.title == "" || typeof jParam.title =="undefined"){
		title = shbComm.lang["CO00122"]; // temp
	}else{
		title = jParam.title;
	}
	
	var option = {	"title":title
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00032RP.xml"
					,"width":"492"
					,"height":"402"
					,"modal":"false"
					,"callback":callbackFnNm
					,"dataObject":jParam };

	if(shbComm.getCommonPopCookie("CO00032RP") != "CO00032RP"){
		shbComm.openPopup(option);
	}
};


// 추천직원보기
shbComm.inqryRecmdStaffPop = function(jParam, callbackFnNm){
	
	var option = {	"title":shbComm.lang["CO00123"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00033RP.xml"
					,"width":"662"
					,"height":"351"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	
	shbComm.openPopup(option);
};

// 직업 및 직위조회
shbComm.inqryJobPosPop = function(jParam, callbackFnNm){
	
	var option = {	"title":shbComm.lang["CO00124"]
					,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00031RP.xml"
					,"width":"662"
					,"height":"337"
					,"callback":callbackFnNm
					,"dataObject":jParam };
	
	shbComm.openPopup(option);
};
//보고서인쇄 팝업
shbComm.printReportPop = function(jParam, nWidth) {
	var sWidth = (strLib.isEmpty(nWidth) ? "1000" : nWidth);  
	var option = {
		 "title":shbComm.lang["CO00125"]
		,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00040RP.xml"
		,"width":sWidth
		,"height":"600"
		,"dataObject":jParam};
	shbComm.openPopup(option);
};
//보고서인쇄 팝업(금리산출내역서용_
shbComm.printReportPop_interest = function(jParam, nWidth, callback) {
	var sWidth = (strLib.isEmpty(nWidth) ? "1000" : nWidth);  
	var option = {
		 "title":shbComm.lang["CO00125"]
		,"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00057RP.xml"
		,"width":sWidth
		,"height":"650"
		,"callback":callback+""
		,"dataObject":jParam};
	shbComm.openPopup(option);
};

//위.변조 방지 프로그램으로 출력 시작 drawStaticReport.jsp 에서 호출됨.
shbComm.printReportSgaStart = function(srcPath) {
	// srcPath : /sw/clipsoft/report/drawStaticReportSgaPrint.jsp ~~
   	if(typeof $("#reportFrame").attr("id") == "undefined"){
   		$("body").append("<div id='reportFrame'></div>");
   	}
	$("#reportFrame").html("<iframe src='"+ srcPath + "'></iframe>");
};  


//쿠키 셀렉트박스 리스트 추가
shbComm.addCookieSelect = function(selectObj, value) {
	selectObj.removeAll();
	selectObj.addItem("1d", shbComm.lang["CO00126"]);
	selectObj.addItem("7d", shbComm.lang["CO00127"]);
	selectObj.addItem("1m", shbComm.lang["CO00128"]);
	selectObj.addItem("6m", shbComm.lang["CO00129"]);
	selectObj.addItem("no", shbComm.lang["CO00130"]);
	if (value == undefined) {
		selectObj.setSelectedIndex(0);
	} else {
		selectObj.setValue(value)
	}
};

// 로그인 성공 시 띄우는 팝업 (팝업을 띄울 화면의 fncInit에서 호출 예정)
shbComm.openLoginNoticePop = function(level){
	
	var noticePopYN = WebSquare.localStorage.getItem( "noticePopYN" );
	if(noticePopYN == "" || typeof noticePopYN == "undefined" || noticePopYN == null){ // 최초이면
		//shbComm.getSession("system:고객회원등급;",";", "shbComm.loginNoticePopCallback", "");
		shbComm.loginNoticePopCallback(level);
	}
};

// 로그인 성공 시 getSession 콜백
shbComm.loginNoticePopCallback = function(level){
	// 팝업을 한 번 띄웠으면 session set / 이후 띄우지 않도록 설정
	WebSquare.localStorage.setItem( "noticePopYN" , "Y" ); // 로컬스토리지 초기화는 login.xml에서
	var noticePopYN = WebSquare.localStorage.getItem( "noticePopYN" );
	
	//if(typeof result == "object"){ // session 유무
		if(level == "1" || level == "2" || level == "3" || level == "4"){
			
			//var dm_jParam = shbComm.getPageParam()._A1000;
			var saveParam = shbComm.getSaveObject("loginPopParam", true);
			var dm_jParam = saveParam._A1000;
			
			if(typeof dm_jParam == "object"){
				// 1. 이전접속이 해외IP 접속 : 해외IP접속안내
				if(dm_jParam.이전해외IP접속여부 == "2"){
					shbComm.guideContAbrdIp();
				}
				
				// 2. 해외IP차단신청&해외 IP접속 : 해외IP로그인 차단안내
				if(dm_jParam.IP구분 == "2"){
					shbComm.guideBlockAbrdIp();
				}
				
				// 3. 이용기기등록&등록되지 않은 기기접속 : 이용기기추가등록안내
				if(( dm_jParam.고객정비확인여부 == "3" ) 
					|| ( dm_jParam.이용기기등록여부 == "1" && dm_jParam.등록MAC여부 != "Y")){    
					
					shbComm.guideAddEquipPop();
				}
				
				// 4. 장기미이체9개월이상 : 장기미이제로인한 거래제한예정안내
				var curDate = shbComm.getCurrentServerDate();
				if(dm_jParam.최종이체일자 != ""){
					
					var startDate = dateLib.addDate("m", 9, dm_jParam.최종이체일자); // 최종이체일자 9개월 후
					startDate = startDate.replaceAll("-", "");
					startDate = startDate.replaceAll(".", "");
					
					var endDate = dateLib.addDate("m", 12, dm_jParam.최종이체일자); // 최종이체일자 12개월 후
					endDate = endDate.replaceAll("-", "");
					endDate = endDate.replaceAll(".", "");
					
					if((startDate < curDate) && (curDate < endDate)){
						shbComm.guideExNoTrnsfrPop();
					}
				}
				
				// 5. OTP사용자&발급일기준 2년 11개월경과 : 보안기한 만료 OTP 주의안내
				if(dm_jParam.OTP카드교체여부 == "Y" || dm_jParam.OTP카드교체여부 == "R"){
					shbComm.guideOtpWarningPop(); // 쿠키는 함수 내에서 체크
				}
				
				// 5. 보안카드사용자&발급일기준 3년 경과 : 보안카드 재발급 안내
				if(	dm_jParam.보안매체정보 == "1" || dm_jParam.보안매체정보 == "2"
					|| dm_jParam.보안매체정보 == "3" || dm_jParam.보안매체정보 == "4"){
					
					var current_dd = shbComm.getCurrentServerDate("dd");
					
	          		if( ( dm_jParam.보안카드교체여부 == '1')
	          			&& ( ( parseInt(current_dd) > 1 ) && ( parseInt(current_dd) < 22 ) ) 
						&& ( dm_jParam.IP구분 != '2') ){
	          			
						shbComm.guideScardReisPop(); // 쿠키는 함수 내에서 체크
					}
				}
			} // end of [typeof dm_jParam == "object"]
		}
	//}
};

// 공통팝업 오픈 여부 쿠키 저장 - <개발자 사용금지>
// name : key, addPeriod : 1d, 7d, 6m, no
shbComm.setCommonPopCookie = function(name, addPeriod){
	
	var expiredays = ""; 	// period를 이용해 일자 계산 후 대입 (단위:일)
	var value = name;
	var fromDate = "";
	var toDate = "";
	
	if(addPeriod == "1d"){ // 1일간
		expiredays = 1;
	}else if(addPeriod == "7d"){ // 7일간
		expiredays = 7;
	}else if(addPeriod == "1m"){ // 1개월간
		fromDate = shbComm.getCurrentServerDate();
		toDate = dateLib.addDate("m", 1, fromDate);
		expiredays = dateLib.getDiffDay(fromDate, toDate);
	}else if(addPeriod == "6m"){ // 6개월간
		fromDate = shbComm.getCurrentServerDate();
		toDate = dateLib.addDate("m", 6, fromDate);
		expiredays = dateLib.getDiffDay(fromDate, toDate);
	}else if(addPeriod == "no"){
		fromDate = shbComm.getCurrentServerDate();
		toDate = dateLib.addDate("m", 999, fromDate);
		expiredays = dateLib.getDiffDay(fromDate, toDate);
	}else{
		return;
	}
	
	var todayDate = new Date();
    todayDate.setDate( todayDate.getDate() + expiredays );
    document.cookie = name + "=" + escape( value ) + "; path=/; expires=" + todayDate.toGMTString() +  ";";
};
shbComm.setCookie = function(sName, sValue, expires) {
    var cookieStr = sName + "=" + escape( sValue ) + "; path=/;";
    if( typeof expires != 'undefined' ) {
        cookieStr = cookieStr +";expires=" + expires.toGMTString();
    } else {
    	var current = new Date();
    	expires = new Date( current.getTime() + (60 * 1000 * 60 * 24 * 30 * 12 * 10)); // 10Year
        cookieStr = cookieStr +";expires=" + expires.toGMTString();
    }
    document.cookie = cookieStr;
};

//공통팝업 오픈 여부 쿠키 체크 - <개발자 사용금지>
shbComm.getCommonPopCookie = function(name){

	var nameOfCookie = name + "=";
    var x = 0;
    while (x <= document.cookie.length) {
        var y = (x + nameOfCookie.length);
        if (document.cookie.substring( x, y ) == nameOfCookie ) {
            if ((endOfCookie = document.cookie.indexOf( ";", y )) == -1 ) {
                endOfCookie = document.cookie.length;
            }
            return unescape(document.cookie.substring( y, endOfCookie ));
        }
        x = document.cookie.indexOf(" ", x) + 1;
        if (x == 0) {
            break;
        }
    }
    return "";
};
//private 오류알림팝업 열기
shbComm.viewWarningMsg = function(jError) {
	var option = {"title":shbComm.lang["CO00120"],"w2xPath":shbComm.getSubContextPath() + "/include/popup/warning.xml","width":"662","height":"550","callback":"","dataObject":jError};
	shbComm.openPopup(option);
};
shbComm.consts = {};
shbComm.consts.DEBUG = true;
// 팝업 호출시 TOP 에서 띄울지 여부
shbComm.consts.FULL_COVER = true;
// 레이어 팝업 사용 여부
shbComm.consts.USE_IFRAME = true;
// websquare namespace
shbComm.consts.NAME_SPACE = ' xmlns="http://www.w3.org/1999/xhtml" xmlns:w2="http://www.inswave.com/websquare" xmlns:ev="http://www.inswave.com/websquare"';
shbComm.consts.CONTEXT_ROOT = (WebSquare.baseURI.replace("/websquare/", "")).replace(location.protocol + "//" + location.hostname, "").replace(":" + location.port, "");

shbComm.downModal = function(popupId) {
	WebSquare.util.getComponentById(popupId).setStyle("z-index","5990");
};
shbComm.topDownModal = function() {
	requires("uiplugin.popup");
	topWin.shbComm.downModal($w.getParameter("popupID"));
};
shbComm.upModal = function(popupId) {
	WebSquare.util.getComponentById(popupId).setStyle("z-index","6010");
};
shbComm.topUpModal = function() {
	requires("uiplugin.popup");
	topWin.shbComm.upModal($w.getParameter("popupID")).setStyle("z-index","6010");
};
//팝업ID를 가져온다.
shbComm.getPopupId = function() {
	requires("uiplugin.popup");
	return $w.getParameter("popupID");
};
//현재 포커스 객체에 current 지정
shbComm.designateFocus = function() {
	try {
		$('.current').removeClass('current');
		$(':focus').addClass('current');
	}catch(e){
		shbComm.printStackTrace("shbComm.designateFocus exception");shbComm.printStackTrace(e);
	}
};
//지정된 포커스 객체로 포커스 이동
shbComm.moveDesignatedFocus = function() {
	try {
		$('.current').removeClass('current').focus();
	}catch(e){
		shbComm.printStackTrace("shbComm.moveDesignatedFocus exception");shbComm.printStackTrace(e);
	}
};
//private 모든 화면에서 자동실행되는 함수로 팝업일때 자동 팝업 높이조정 작업 처리
shbComm.callChangePopupHeight = function() {
	
	try{
		requires("uiplugin.popup");
		var p = $w.getParameter("popupID");
		if( strLib.isEmpty(p) ) { return; }//팝업이 아님
	
		var dataObject = JSON.parse(WebSquare.util.getPopupParam());
		//var title = topWin.window[p].getTitle(); //20170403 version에서 window.render.title 값이 없음 
		var title = document.getElementsByTagName('title')[0].text;
		if (typeof layerPopupTitle != "undefined") layerPopupTitle.setValue(title);
		if( dataObject.useHeight ) { return; } //고정높이 사용
		var h = strLib.getNumberOnly($('.detailPop').css('height'));
		if( h > 600 ) { h = 600; }
		topWin.shbComm.changePopupHeight(p,h);
		//프로그래스바 떠 있으면 중앙으로 이동
		var _d=WebSquare.document.getElementById("___processbar2_i");
		if( !jsonLib.isNullObj(_d) && _d.style.display != "none" ) {
			var _f=WebSquare.core.getConfiguration("processMsgHeight");
			var _10=WebSquare.core.getConfiguration("processMsgWidth");
			var _15=window.pageYOffset||document.documentElement.scrollTop||document.body.scrollTop||0;
			var _16=window.pageXOffset||document.documentElement.scrollLeft||document.body.scrollLeft||0;
			var _17=document.documentElement.clientHeight||document.body.clientHeight||0;
			var _18=document.documentElement.clientWidth||document.body.clientWidth||0;
			var _19=_15+_17/2-parseInt(_f)/2;
			var _1a=_16+_18/2-parseInt(_10)/2;
			_d.style.top=parseInt(_19)+"px";
			_d.style.left=parseInt(_1a)+"px";
		}
	}catch(e){
		return;
	}
};
//private top에서 호출되는 팝업높이조절후 좌표이동 처리
shbComm.changePopupHeight = function(popupID, contentHeight){
	var iNewHeight = WebSquare.util.getNumber(contentHeight) + 56;
	var oPopupLayer = shbComm.getComponent(popupID);
	if( !jsonLib.isNullObj(oPopupLayer) ){
		oPopupLayer.setSize(null, iNewHeight);

		var width = oPopupLayer.getSize("width");
		var height = iNewHeight;
		// Fixes dual-screen position
		var dualScreenLeft = typeof window.screenLeft !== 'undefined' ? window.screenLeft : screen.left;
		var dualScreenTop = typeof window.screenTop !== 'undefined' ? window.screenTop : screen.top;

		var brWidth = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
		var brHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

		var left = -1;
		var top = -1;

		if (width >= brWidth)
			width = brWidth;
		if (height >= brHeight)
			height = brHeight;

		if (left > 0) {
			left = left + (window.pageXOffset || window.document.documentElement.scrollLeft);
		} else {
			left = ((brWidth / 2) - (width / 2)) + (window.pageXOffset || window.document.documentElement.scrollLeft);
		}
		if (top > 0) {
			top = top + (window.pageYOffset || window.document.documentElement.scrollTop);
		} else {
			top = ((brHeight / 2) - (height / 2)) + (window.pageYOffset || window.document.documentElement.scrollTop);
		}
		left = parseInt(left,10);
		top  = parseInt(top, 10);
		oPopupLayer.setPosition(left,top);//높이조절된 팝업 중앙으로 이동
		if( oPopupLayer.getStyle("visibility") == "hidden" ) {
			oPopupLayer.show();
			oPopupLayer.focus();
		}
	}
};
//팝업창에서 자신의 팝업 타이틀 변경시 호출
shbComm.changePopupTitle = function(title){
	topWin.shbComm._changePopupTitle(shbComm.getPopupId(), title);
};
//top에서 호출되는 팝업 타이틀변경 함수
shbComm._changePopupTitle = function(popupId, title){
	try{
		var objPop = WebSquare.util.getPopup(popupId);
		objPop.popupWin.setWindowTitle(title);
		objPop.getWindow().document.getElementsByTagName('title')[0].text = title;
		$('#'+popupId+'_iframe').attr('title',title+" "+shbComm.lang["CO00136"]);
	}catch(e){
		shbComm.printStackTrace("shbComm._changePopupTitle::"+e);
	}
};
//private 
shbComm.getPopupList = function(){
	requires("uiplugin.popup");
	return WebSquare.uiplugin.popup.popupList;
};
/**
 * 팝업 오픈 함수.
 * 
 * @memberOf shbComm
 * @param <Object:Y> options
 *        options.title <String:Y> 팝업창의 제목
 *        options.w2xPath <String:Y> 팝업창에 표시할 화면 xml의 경로
 *        options.width <String:Y> 팝업창의 넓이
 *        options.height <String:Y> 팝업창의 높이
 *        options.modal <Boolean:N> 업무화면의 클릭을 방지할 수 layer 호출 여부
 *        options.useIFrame <Boolean:N> 팝업이 iframe으로 형식으로 open되는지의 선택
 *        options.callback <String:N> popup이 닫힐때 호출될 사용자의 콜백함수
 *        options.callbackClose <String:N> X click으로 popup이 닫힐때 호출될 사용자의 콜백함수 2016.11.25 추가
 *        options.dataObject <Object:N> popup에 전달할 json object 데이터
 * @example var options = {"title":"상품검색", "w2xPath":"/wq/submission_001.xml","width":"780","height":"602",
 *          "dataObject":{ "vitemQueryInfo" : "AAA" },"callback":"pageFunc._itemCodePopCallback"};
 */  
shbComm.openPopup = function(options) {
	try {
		var w2xPath = typeof options.w2xPath === "undefined" ? options.popupUrl : WebSquare.util.appendingPathComponent("/", options.w2xPath);
		var popFile = w2xPath.substring(w2xPath.lastIndexOf("/") + 1, w2xPath.lastIndexOf("."));
		if( "SF00009RP00" != popFile ) {//펀드에 수익률 달성 팝업은 여러개가 동시에 보여야 함
			var popList = shbComm.getPopupList();
			if( !jsonLib.isNullObj(popList) && jsonLib.isArray(popList) && popList.length > 0 ){
				for( var i = popList.length-1; i >= 0; i-- ){
					if( popList[i].id.indexOf(popFile) > -1 ) {//기존팝업이 존재한다면 
						return;
					}
				}
			}
		}
		shbComm._startGoPage = true;

		var _options = {};

		for ( var name in options) {
			if (name == "dataObject" || (typeof options[name] !== 'string' && typeof options[name] !== 'boolean'))
				continue;
			_options[name] = options[name];
		}

		var _dataObject = {
			"type" : "json",
			"data" : options.dataObject || {},
			"name" : "_popParam"
		};

		_dataObject["callback"] = options.callback || "";
		_dataObject["frameElementID"] = window.frameElement ? window.frameElement.id : "";
		_dataObject["useIFrame"] = typeof options.useIFrame === 'undefined' ? shbComm.consts.USE_IFRAME : WebSquare.util.getBoolean(options.useIFrame);
		//useHeight : 팝업화면에 detailPop 높이를 받아서 팝업창의 높이값을 제어하기위해 추가 2016.11.23(팝업 최상위 레이어 css중 visiblity:hidden으로 설정함) 
		_dataObject["useHeight"] = (strLib.isEmpty(options.height) ? false : true);
		//X Click으로 팝업 닫을때 실행할 함수 추가 2016.11.25
		_dataObject["callbackClose"] = options.callbackClose || "";
		//modal 설정 저장 팝업닫을때 모달여부를 판단하여 이전팝업창에 z-index를 조절할지 판단하기 위해 2016.12.06
		_dataObject["modal"] = typeof options.modal === 'undefined' ? true : WebSquare.util.getBoolean(options.modal);
		//현재 포지션 마킹 추가 2016.11.21
		shbComm.designateFocus();
		// tabControl/windowContainer 의 창에서 모달방식으로 열릴때, 모달은 전체를 덮는 모달 방식으로 호출 돼야 한다(?).
		// - tabControl/windowContainer 의 자식 창에 tabControl 또는 iframe 형식의 컴퍼넌트가 있을때 해당 자식창에서 팝업 호출은 또다른 고려가 필요하다..
		/*
		 * 1. iFrame 방식으로 호출 - frameElementID 가 있을때는 모든 팝업은 topWin.window 의 자식창 이다!! 해당 frame window 에 반환만 하면 된다.
		 *    1) 메인 창에서 호출 될때 frameElementID == ""
		 *    2) 자식 창에서 호출 될때 frameElementID != ""
		 *    3) 팝업 창에서 호출 될때 frameElementID != ""
		 * 
		 * 2. window 방식으로 호출 - 메인 창에서 호출과 팝업 창에서 호출에 대한 구분이 필요하다.
		 *    1) 메인 창에서 호출 될때 - opener window 에 반환 frameElementID == ""
		 *    2) 자식 창에서 호출 될때 - opener window 의 tabControl/windowContainer 의 창에 반환 frameElementID != ""
		 *    3) 팝업 창에서 호출 될때 - opener window 에 반환 frameElementID == ""
		 */
		if (shbComm.consts.FULL_COVER) {
			topWin.shbComm._callOpenPopup(JSON.stringify(_options), JSON.stringify(_dataObject));
		} else {
			shbComm._callOpenPopup(JSON.stringify(_options), JSON.stringify(_dataObject));
		}

	} catch (e) {
		WebSquare.logger.printLog('!! exception occurred [shbComm.openPopup] ' + e.message);
	}
};
/**
 * 팝업 오픈 함수 구현체. 화면에서 직접적인 호출을 금한다.
 */
shbComm._callOpenPopup = function(optStr, dataObjcetStr) {
	var options = JSON.parse(optStr);
	if (dataObjcetStr == undefined && dataObjcetStr == "") dataObjcetStr = "{}";
	var width = options.width || '500';
	var height = options.height || '250';

	// 기본적으로 iframe으로 호출한다. 팝업안에 iframe이 생성됨
	var useIFrame = typeof options.useIFrame === 'undefined' ? shbComm.consts.USE_IFRAME : WebSquare.util.getBoolean(options.useIFrame);
	// 기본적으로 Modal로 호출한다. 팝업뒤에 layer가 생성되어 화면 클릭 방지
	var modal = typeof options.modal === 'undefined' ? true : WebSquare.util.getBoolean(options.modal);

	// Fixes dual-screen position
	var dualScreenLeft = typeof window.screenLeft !== 'undefined' ? window.screenLeft : screen.left;
	var dualScreenTop = typeof window.screenTop !== 'undefined' ? window.screenTop : screen.top;

	var brWidth = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
	var brHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

	var left = options.left || -1;
	var top = options.top || -1;
	
	/*if (width >= brWidth)
		width = brWidth;
	if (height >= brHeight)
		height = brHeight; 팝업가로 스크롤을 없애서 윈도우 사이즈 최대값을 무시함*/

	if (!useIFrame) {
		if (left > 0) {
			left = left + dualScreenLeft;
		} else {
			left = ((brWidth / 2) - (width / 2)) + dualScreenLeft;
		}
		if (top > 0) {
			top = top + dualScreenTop;
		} else {
			top = ((brHeight / 2) - (height / 2)) + dualScreenTop;
		}
	} else {
		if (left > 0) {
			//left = left + (window.pageXOffset || window.document.documentElement.scrollLeft);
			left = parseInt(left); // 20161209
		} else {
			left = ((brWidth / 2) - (width / 2)) + (window.pageXOffset || window.document.documentElement.scrollLeft);
		}
		if( left < 0 ) { left = 0; }//모바일 확대상태에서 팝업오픈시 마이너스 좌표로 오픈되는것을 방지함
		if (top > 0) {
			//top = top + (window.pageYOffset || window.document.documentElement.scrollTop);
			top = parseInt(top);  // 20161209
		} else {
			top = ((brHeight / 2) - (height / 2)) + (window.pageYOffset || window.document.documentElement.scrollTop);
		}
		if( top < 0 ) { top = 0; }
	}
	top = parseInt(top, 10);
	left = parseInt(left, 10);

	var w2xPath = typeof options.w2xPath === "undefined" ? options.popupUrl : WebSquare.util.appendingPathComponent("/", options.w2xPath);
	var popID = "";
	if (typeof options.popID != "undefined" && options.popID != "") {
		popID = options.popID;
	} else {
		popID = w2xPath.substring(w2xPath.lastIndexOf("/") + 1, w2xPath.lastIndexOf(".")) + "_" + new Date().getTime();
	}

	requires("uiplugin.popup");

	var opts = {
		"id" : popID,
		"type" : "window", // popup 객체의 type으로 window, browser 중 하나, browser type의 경우 useIFrame 속성과 상관없이 window.open으로 열림.
		"width" : width + "px",
		"height" : height + "px",
		"top" : top, // useIframe이 true인 경우 브라우져를 기준 false인 경우 모니터를 기준으로 한다.
		"left" : left,
		"popupName" : options.title || popID, // useIframe : true시 popup 객체의 이름으로 popup 프레임의 표시줄에 나타납니다.
		"modal" : modal, // modal을 이용해서 뒤 쪽 배경을 동작하지 않도록 만들기 위한 인자 입니다. false이면 뒤쪽의 컴퍼넌트가 사용 가능합니다.
		"useIFrame" : useIFrame, // true : IFrame 을 사용하는 WebSquare popup / false: window.open 을 사용하는 popup
		"useMaximize" : false,
		"resizable" : (typeof options.resizable === 'undefined') ? false : WebSquare.util.getBoolean(options.resizable),
		"status" : false,
		"menubar" : false,
		"scrollbars" : (typeof options.scrollbar === 'undefined') ? false : WebSquare.util.getBoolean(options.scrollbar),
		"title" : options.title || popID,
		"className" : options.className || '',
		"xml" : dataObjcetStr,
		"popupUrl" : options.popupUrl || (shbComm.isEasyService() ? '../comjsp/easy_popup.jsp' : '../comjsp/popup.jsp?language=' + window.topWin.shbComm.LANGUAGE)
	// "dataObject" : JSON.parse(dataObjcetStr)
	};
	//팝업오픈전 열려있는 팝업에 down_modal class 부여하여 모달 밑으로 들어가도록 추가 2016.11.22
	if( useIFrame && modal ) { 
		$('.w2popup_window').addClass('down_modal').css('z-index','5990');
	}
	$w.openPopup((options.w2xPath || null), opts);
	if(useIFrame) {
		//지정 height 사용시 바로 팝업 show 처리 2016.11.23
		if( !jsonLib.isNullObj(options.height) && (options.useShow == undefined || options.useShow != true)) { shbComm.getComponent(popID).show(); }
		//라온키보드 보안을 위해 iframe에 name지정
		var obj = document.getElementById(popID+"_iframe");
		obj.name = popID+"_iframe";
		//웹 접근성:탭이동시 DIV는 포커스 안들어가서 A tag 하나 넣어줌 
		$('#'+popID+' .w2window_close').append('<A id="'+popID+'_btnmakedpopupclose" href="javascript:void(null)">닫기</A>');
		$('#'+popID+'_iframe').attr('title',opts.popupName+" "+shbComm.lang["CO00136"]);//iframe title 웹접근성 
		//X 클릭시 callbackClose 함수 호출 밑 마킹된 포커스로 이동하기 위해 _closePop을 호출하도록 함 
		$('#'+popID+' .w2window_close').on('click',function(){
			var xOption = {"popupId":popID,"dataObject":JSON.parse(dataObjcetStr)};
			var sRtn = null;
			if( popID.indexOf("warning") > -1 ) {//에러팝업일때 X 클릭시 확인버튼과 동일하게 작동하도록  
				WebSquare.util.getComponentById(popID+"_iframe").getWindow().shbObj.btn_warning_confirm_onclick();
			} else {
				shbComm._closePop(xOption.popupId, sRtn, xOption.dataObject.frameElementID, xOption.dataObject.callbackClose, xOption.dataObject.modal);
			}
			return false;
		});
		shbComm.log("popup layer length"+$('#'+popID).length);
		$('#'+popID+" .w2window_content").attr('tabindex', '0');
		$('#'+popID).css('max-width',(WebSquare.util.parseInt(width,0)-2)+'px');
		$('#'+popID).attr('title','');
		$('#'+popID).attr('tabindex', '0').focus();//팝업높이 자동처리시 visibility=hidden 상태여서 포커스가 안들어감 자동조절후 포커스 처리
		//shift+tab 안되게 처리
		$('#'+popID).on("keydown", {type:"backTab"}, function(e){
				switch(e.data.type){
				case "backTab" :
					if($(this).hasClass("w2popup_window")) {
						if($(this).is(":focus")){
							if (e.keyCode==9 && e.shiftKey) return false;
						}
					}
				break;
				
				case "tab" :
					if (e.keyCode==9 && e.shiftKey){}
					else if (e.keyCode==9) return false;
				break;
			}
		});
		//팝업일때 맨끝에서 tab 이동 못하게
		$('#'+popID).append('<div id="'+popID+'_makedpopupend" class="layerDocEnd" tabindex="0">'+shbComm.lang["CO00132"]+'</div>');
		$('#'+popID+'_makedpopupend').on("keydown", {type:"tab"}, function(e){
			switch(e.data.type){
				case "backTab" :
					if($(this).hasClass("layerWrap") || $(this).hasClass("infoPop")) {
						if($(this).is(":focus")){
							if (e.keyCode==9 && e.shiftKey) return false;
						}
					}
				break;
				
				case "tab" :
					if (e.keyCode==9 && e.shiftKey){}
					else if (e.keyCode==9) {
						$('#'+popID+'_btnmakedpopupclose').focus();
						return false;
					}
				break;
			}
		});
		shbComm.log("popup open focus layer::"+$(':focus').attr('id'));
	}
};
/**
 * 팝업 창에 넘긴 파라미터를 가져온다. 팝업 호출시 option에 지정한 dataObject를 반환한다.
 * 
 * @memberOf shbComm
 * @returns {Object}
 */
shbComm.getPopParam = function() {
	requires("uiplugin.popup");
	try {
		var jsonData = JSON.parse(WebSquare.util.getPopupParam());
		return jsonData.data; 
	} catch (e) {
		shbComm.log('!! exception occurred [shbComm.getPopParam] ' + e.message);
		return {};
	}
};
/**
 * 팝업 창에 넘긴 파라미터를 초기화한다.
 * 
 * @memberOf shbComm
 * @returns {Object}
 */
shbComm.removePopParam = function() {
	requires("uiplugin.popup");
	try {
		var jsonData = JSON.parse($w.getPopupParam());
		jsonData.data = {};
		delete jsonData.data;
		var idx = WebSquare.net.getParameter("idx");
		if (typeof idx != "undefined" && idx != "") {
			WebSquare.parentObj.WebSquare.uiplugin.popup.popupParams[idx] = JSON.stringify(jsonData);
		}
	} catch (e) {
		shbComm.log('!! exception occurred [shbComm.getPopParam] ' + e.message);
		return {};
	}
};
/**
 * 팝업창을 닫는다.
 * 
 * @memberOf shbComm
 * @param <Object:Y> rtnObj
 */
shbComm.closePopup = function(rtnObj) {
	requires("uiplugin.popup");
	try {
		var rtnStr, frameElementID, useIFrame, dataObject = JSON.parse($w.getPopupParam());

		if (typeof rtnObj !== "undefined") {
			rtnStr = typeof rtnObj !== "string" ? JSON.stringify(rtnObj) : rtnObj;
		} else {
			rtnStr = null;
		}

		frameElementID = dataObject.frameElementID;
		useIFrame = dataObject.useIFrame;

		if (shbComm.consts.FULL_COVER) {
			if (useIFrame) {
				topWin.shbComm._closePop($w.getParameter("popupID"), rtnStr, frameElementID, dataObject.callback, dataObject.modal);
			} else {
				opener.shbComm._closePop($w.getParameter("popupID"), rtnStr, frameElementID, dataObject.callback, dataObject.modal);
			}
		} else {
			(opener || parent).shbComm._closePop($w.getParameter("popupID"), rtnStr, frameElementID, dataObject.callback, dataObject.modal);
		}
	} catch (e) {
		shbComm.log('!! exception occurred [shbComm.closePop] ' + e.message);
	}
};
/**
 * 팝업이 닫힐때 실제 호출되는 공통 함수. 화면에서 직접적인 호출을 금한다.
 */
shbComm._closePop = function(popupID, rtnStr, frameElementID, callback, modal) { 
	try {
		//팝업이 닫히기전에 먼저 hide를 한다.(timeout으로 팝업이 약간 딜레이되어 닫힘)
		try {
			var oldPopup = $w.getPopup(popupID);
			if (oldPopup && oldPopup.popupWin && oldPopup.popupWin.render) {
				oldPopup.popupWin.render.style.display = "none";
			}
		} catch(e) {}
		$w.closePopup(popupID);
		//모달/비모달 팝업 둘다 closePopup호출시 hideModal을 호출하는듯 한데
		//WebSquare.uiplugin.popup.popupList에서는 해당 팝업이 호출시 삭제되고
		//timeout 100 으로 팝업(컴포넌트)을 제거하는 부분을 처리한후 hideModal이 처리되는것 같음
		//그래서 아래 로직은 hideModal 전에 처리되는것 같고
		//모달레이어 보이는 상태에서(모달팝업 or 비모달팝업이 같이 보이는 상태) 비모달 팝업을 닫을때 
		//hideModal 처리되면서 modalStack에서 지워버리니까 이런 작동을 막을수는 없고 
		//강제로 showModal을 한번 실행해서 modalStack이 원복되도록 함
		//2015.12.06 역순으로 모달(true) 팝업까지 z-index 지워서(.w2popup_window z-index:6010이 적용됨) 모달레이어 위에 팝업이 보이도록 함
		var popList = shbComm.getPopupList();
		if( !jsonLib.isNullObj(popList) && jsonLib.isArray(popList) && popList.length > 0 ){
			for( var i = popList.length-1; i >= 0; i-- ){
				popList[i].popupWin.setStyle("z-index","");
				popList[i].popupWin.removeClass("down_modal");
				if( popList[i].options.modal ) { break; }
			}
		}
		if( !modal ) {
			var modalStack = WebSquare.getBody().modalStack;
			if( !jsonLib.isNullObj(modalStack) && modalStack.length > 0 ) {
				WebSquare.getBody().showModal(null);
			} 
		}
		//팝업닫을때 alertLayer(top화면에)가 존재하면 modal 밑으로 숨어 버림.
		//alertLayer를 다시 showModal 시켜줌(팝업닫을때 100 delay 이므로 timeout 150 줌) 
		var ibreak = false;
		var mspl = WebSquare.getBody().modalStackPopupLayer;
		if( !jsonLib.isNullObj(mspl) && mspl.length > 0 ) {
			for( var i = 0; i < mspl.length; i++) {
				if(ibreak) break;
				for( var j = 0; j < mspl[i].length; j++) {
					if( "grp_alertlayer" == mspl[i][j] ) {
						$w.setTimeout(
							function(){
								WebSquare.getBody().hideModal();//modalStack에서 alertLayer용 제거 
								WebSquare.getBody().showModal(null, ["grp_alertlayer"]);
							},
							{
								key : 'modalAlertLayer',
								delay : 150,
								callback : function() {
									$w.clearTimeout('modalAlertLayer');
								}
							});
						var ibreak = true;
						break;
					}
				}
			}
		}
		if (shbComm.consts.FULL_COVER && frameElementID) {
			var contentFrame = $("#" + frameElementID).get(0).contentWindow;
			contentFrame.WebSquare.util.getGlobalFunction("shbComm.moveDesignatedFocus")();
			if (callback != "" && callback != null) {
				if (callback.endsWith(")")) {
					contentFrame.eval(callback);
				} else {
					contentFrame.WebSquare.util.getGlobalFunction(callback)(rtnStr);
				}
			}
		} else {
			WebSquare.util.getGlobalFunction("shbComm.moveDesignatedFocus")();
			if( typeof callback == "function" ) {
				callback(rtnStr);
			} else {
				if( callback != null && callback != "" ) {
					if (callback.endsWith(")")) {
						eval(callback);
					} else {
						var func = WebSquare.util.getGlobalFunction(callback);
						if (func != null)
							func(rtnStr);
					}
				}
			}
		}
	} catch (e) {
		shbComm.log('!! exception occurred [shbComm._closePop] ' + e.message);
	}
};
/**
 * Div Layer(wframe으로 구성)를 띄운다. 실제 window.popup이 아니므로 객체 id 중복 오류가 나지 않도록 한다.
 * 팝업내 스크립트 함수는 일반적으로 shbObj.popup 하위에 생성한다.(공통함수내에서 팝업 호출전 초기화 및 팝업 종료시 삭제된다.)
 * body에 아래의 onwframeunload 이벤트에서 삭제되어야할 id를 파라미터로 shbComm.clearObject를 호출한다.
 * 단 첫번째 인자는 파라미터로 전송받은 
 * <script ev:event="onwframeunload(src)" type="javascript"><![CDATA[
 *      shbComm.clearObject(shbComm.getLayerPopupId(this), "dm_dataMap", "dl_dataList", "submission1");
 *  ]]></script>
 * </body>
 * wframe 로 구현된다. ID 중복 오류에 대한 화면 구현이 필요하다.
 * 
 * @memberOf shbComm
 * @param <String:Y> w2xPath
 * @param <Object:Y> options
 *    options.title <String:N>      : 팝업창의 타이틀
 *    options.width <String:N>      : 팝업창의 넓
 *    options.height <String:N>     : 팝업창의 높이
 *    options.movable <Boolean:N>   : 창 이동 여부
 *    options.useModal <Boolean:N>  : 모달 팝업(layer 호출)
 *    options.callback <String:N>   : 팝업창 종료시 호출될 콜백함수명
 *    options.dataObject <Object:N> : 팝업창으로 전달할 json object
 *    options.target <String:N>     : 공통팝업이 아닌 특정한 id의 팝업인 경우 id
 * @return null
 * 
 * @example shbComm.getCookie("userid")
 */
shbComm.showLayer = function(w2xPath, options) {
	var options = options || {};

	options.title = options.title || "";
	options.width = options.width || "400";
	options.height = options.height || "400";
	options.movable = typeof options.movable === "undefined" ? false : WebSquare.util.getBoolean(options.movable);
	options.useModal = typeof options.useModal === "undefined" ? true : WebSquare.util.getBoolean(options.useModal);
	options.dataObject = typeof options.dataObject === "undefined" ? {} : options.dataObject;

	options.frameElementID = window.frameElement ? window.frameElement.id : "";

	if (shbComm.consts.CONTEXT_ROOT != "/") w2xPath = shbComm.consts.CONTEXT_ROOT + w2xPath;
	if (shbComm.consts.FULL_COVER) {
		topWin.shbComm._showLayer(w2xPath, JSON.stringify(options));
	} else {
		shbComm._showLayer(w2xPath, JSON.stringify(options));
	}
};
/**
 * shbComm.showLayer의 실제 구현체로 업무화면에서 직접 호출은 하지않는다.
 * layer 팝업 생성을 실제 생성한다.
 */
shbComm._layerPop = {};
shbComm._showLayer = function(w2xPath, options) {
	var options = JSON.parse(options);
	var layerID = "__cm__layer__";

	if (typeof options.target != "undefined" && options.target != "") layerID = layerID + options.target
	if (typeof options.callback == "undefined") options.callback = "";
	var width = options.width;
	var height = options.height;
	var brWidth = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
	var brHeight = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;
	brWidth = brWidth - 25;
	var left = options.left || -1;
	var top = options.top || -1;

	// Fixes dual-screen position
	var dualScreenLeft = typeof window.screenLeft !== 'undefined' ? window.screenLeft : screen.left;
	var dualScreenTop = typeof window.screenTop !== 'undefined' ? window.screenTop : screen.top;

	if (left > 0) {
		left = left + (window.pageXOffset || window.document.documentElement.scrollLeft);
	} else {
		left = ((brWidth / 2) - (width / 2)) + (window.pageXOffset || window.document.documentElement.scrollLeft);
	}
	if (top > 0) {
		top = top + (window.pageYOffset || window.document.documentElement.scrollTop);
	} else {
		top = ((brHeight / 2) - (height / 2)) + (window.pageYOffset || window.document.documentElement.scrollTop);
	}

	if (width >= brWidth)
		width = brWidth;
	if (height >= brHeight)
		height = brHeight;
	if (!$w.comp["__floatingLayer" + layerID]) {
		var layerCompStr = "";
		layerCompStr += '<w2:floatingLayer id="__floatingLayer' + layerID + '" title="' + options.title + '" style="position:absolute; display:none;height:' + (parseInt(height) + 40) + 'px;width:'
				+ (parseInt(width) + 25) + 'px;" movable="' + options.movable + '" useModal="' + options.useModal + '"' + shbComm.consts.NAME_SPACE + '>';
		layerCompStr += '</w2:floatingLayer>';

		$w.dynamicCreate("__floatingLayer" + layerID, "floatingLayer", layerCompStr, WebSquare.getBody());

		var contCompStr = '<w2:wframe id="__wframe' + layerID + '" style="width: 100%;height: 100%;"' + shbComm.consts.NAME_SPACE + '></w2:wframe>';
		$w.dynamicCreate("__wframe" + layerID, "wframe", contCompStr, document.getElementById("__floatingLayer" + layerID + "_contents"));
	}
	$w.comp["__floatingLayer" + layerID].setSize(width, height);
	$w.comp["__floatingLayer" + layerID].setPosition(left, top);
	$w.comp["__floatingLayer" + layerID].show();

	shbObj.popup = {};
	var wframe = $w.comp["__wframe" + layerID];
	shbComm._layerPop["__wframe" + layerID] = {};
	shbComm._layerPop["__wframe" + layerID].data = options.dataObject;
	shbComm._layerPop["__wframe" + layerID].callback = options.callback;
	/*
	if (w2xPath.indexOf("?") > -1) {
		w2xPath = w2xPath + "&layerPopupId=__wframe" + layerID;
	} else {
		w2xPath = w2xPath + "?layerPopupId=__wframe" + layerID;
	}
	*/
	wframe.setSrc(w2xPath);
	wframe.setUserData("userData_layerId", "__wframe" + layerID);
};
shbComm.getLayerPopupId = function(bodyObj) {
	var layerId = bodyObj.parentControl.getUserData("userData_layerId");
	/*
	src = src.substring(src.indexOf("?")+1);
	var aSrc = src.split("&");
	var layerId = "";
	for (var i=0; i < aSrc.length; i++) {
		var p = aSrc[i].split("=");
		if (p[0] == "layerPopupId") {
			layerId = p[1];
			break;
		}
	}*/
	return layerId;
};
/**
 * layerPopup으로 호출된 함수에서 팝업 파라미터를 가져오기 위한 함수
 * @example getLayerParam($w.getParameter("layerPopupId"));
 */
shbComm.getLayerParam = function(layerPopupId) {
	if (shbComm._layerPop[layerPopupId]) {
		return shbComm._layerPop[layerPopupId].data;
	} else {
		return {};
	}
};
/**
 * layerPopup으로 호출된 함수에서 callback 함수로 데이터를 전달하기위해 팝업에서 호출되는 함수
 * @example shbComm.showLayerCallback($w.getParameter("layerPopupId"), returnData);
 */
shbComm.showLayerCallback = function(layerPopupId, retJson) {
	if (shbComm._layerPop[layerPopupId]) {
		var callback = shbComm._layerPop[layerPopupId].callback;
		if (callback != undefined && callback != "") WebSquare.util.getGlobalFunction(callback)( retJson );
	}
	var floatLayer = layerPopupId.replace("__wframe","__floatingLayer");
	var olayer = $w.comp[floatLayer];
	delete shbComm._layerPop[layerPopupId];
	olayer.hide();
	var wframe = $w.comp[layerPopupId];
	wframe.setSrc(shbComm.consts.CONTEXT_ROOT+"/websquare/blank.xml");
};
/**
 * layerPopup에서 생성한 dataCollection과 submission등을 삭제하기 위한 함수
 * 동일한 layer의 wframe에 setSrc를 하는 경우 호출된다.
 * @example clearObject($w.getParameter("layerPopupId"), "dm_dataMap","submission1");
 */
shbComm.clearObject = function() {
	// 업무화면 WebSquare component 삭제
	/*
	var childObj = WebSquare.util.getChildren($w.comp["__wframe__cm__layer__"], {
		recursive : true
	});
	for ( var i = 0, iLen = childObj.length; i < iLen; i++) {
		var obj = childObj[i];
		try {
			if (typeof obj.remove != "undefined") {
				obj.remove();
			}
		} catch (e) {
		}
	}
	*/
	// 기본적으로 삭제되는 팝업업무화면 함수 delete
	shbObj.popup = {};

	// datacollection, submission 등 clear
	for ( var j = 1; j < arguments.length; j++) {
		var obj = arguments[j];
		if (typeof obj == "string") {
			var submitObj = WebSquare.ModelUtil.getSubmission(obj);
			if (submitObj == null) {
				obj = eval(obj);
				if (obj) {
					if (obj.initializeType) {
						if (obj.initializeType == "dataMap" || obj.initializeType == "dataList" || obj.initializeType == "linkedDataList") {
							var bFlag = WebSquare.DataCollection["stopBroadCast"];
							try {
								WebSquare.DataCollection["stopBroadCast"] = true;
								WebSquare.DataCollection.api.remove(obj.id);
								WebSquare.DataCollection["stopBroadCast"] = bFlag;
							} catch (e) {
							}
						}
					} else {
						if (obj.getPluginName()) {
							obj.remove();
						} else {
							eval("delete " + arguments[j]);
						}
					}
				}
			} else {
				WebSquare.ModelUtil.deleteSubmission(obj);
				continue;
			}
		}
	}
};
/**
* UI validation module
* @param {String} formName : validation체크할 group obect ID
* @param {boolean} checkReadOnly : validation체크할 group 내에서 readOnly 필드를 체크할지 여부
* @returns {boolean} ret : validation 체크 성공 여부
* @example shbComm.validateGroup('grpFrom', true)
* valdation=
* ACCOUNT_IN:컴포넌트명
* ACCOUNT_OUT:컴포넌트명
* DATE:컴포넌트명
* DATEDIFF:from컴포넌트명:to컴포넌트ID:to컴포넌트명:max일수
* DEFAULT:컴포넌트명
* DIGIT:컴포넌트명:min:max
* EMAIL:컴포넌트명
* FOREIGN_MONEY:컴포넌트명
* HANCHECK:컴포넌트명 -- 한글입력불가
* LENGTH:컴포넌트명:min:max
* LENGTHPASS:컴포넌트명:min:max
* MONEY:컴포넌트명
* TELEPHONE:컴포넌트명 -- '숫자-'
* TIME:컴포넌트명 -- 4자리 2359 시분
 */
shbComm.validateGroup = function(formName, checkReadOnly) {
	var ret = true;
	try {
		var formObj = null;
		var validationSeparator = ":";

		if (typeof formName == 'object') {
			formObj = formName;
		} else if (typeof formName == 'string') {
			formObj = eval(formName);
		} else {
			shbComm.alert('missing group or div id!!');
			return  false;
		}
		if (typeof formObj == 'undefined' || formObj == null) {
			shbComm.alert("No visible [" + formName + "] Object");
			return  false;
		}
		if (typeof checkReadOnly == 'undefined') checkReadOnly = false;
		var childObj = formObj.getChildren();
		for (var i=0; i<childObj.length; i++) {
			var obj = childObj[i];
			var pluginName = "";

			if (typeof obj.getPluginName == "undefined") {
				//html Object
				var temp = document.getElementById(obj.id);
				pluginName = temp.tagName.toLowerCase();
			} else {
				pluginName = obj.getPluginName().toLowerCase();
			}
			if (pluginName == "repeat" || pluginName == "group" || pluginName == "table" || pluginName == "tr" || pluginName == "td") {
				ret = shbComm.validateGroup(obj, checkReadOnly);
				if (!ret)  break;
			} else if (shbComm.getConfirm(pluginName, "valid")) {  // valid check 콤포넌트
				var idAttr = obj.id;
				var validation = obj.getUserData("validation");
				
				if (typeof validation != 'undefined' && (checkReadOnly || (!obj.getDisabled() && !obj.getReadOnly()) ) ) {
					validation = WebSquare.xml.decode(validation);
					validation = WebSquare.xml.decode(validation);
					
					var validationArr = validation.split(";");
					for (var v=0; v < validationArr.length; v++) {
						if (validationArr[v] != "") {
							var arrayOfFeatures = validationArr[v].split(validationSeparator);
							var functionStr = "shbComm.VALIDATION_";

							for (var j=0; j<arrayOfFeatures.length; j++) {
								var fText = arrayOfFeatures[j].replaceAll("'", "\\\'");
								if (j == 0) {
									functionStr += arrayOfFeatures[j] + "('" + idAttr + "'";
								} else {
									functionStr += ",'" + fText + "'";
								}
							}
							functionStr += ")";
							
							ret = true;
							try {
								ret = eval(functionStr);
							} catch (e1) {
								shbComm.alert(shbComm.lang["CO01016"]);	//FRM028
								shbComm.printStackTrace("입력값 검증 프로세스에서 '" + functionStr + "' 를 실행하는데 에러가 발생했습니다.");
								shbComm.printStackTrace(e1);
							}
							if (!ret) break;
						}
					}
					if (!ret) return false;
				}
			}
		}
	} catch (e2) {
		shbComm.printStackTrace(e2);
	}
	return ret;
};

shbComm.getConfirm = function(key, name) {
	var i;
	var objName = shbComm.plugAllName[key];
	if (typeof objName == "undefined") {
		return  false;
	}
	for (i=0; i<objName.length; i++) {
		var objVal = objName[i];
		if (typeof objVal == "undefined")  return  false;
		return  objVal[name];
	}
	return  false;
};
shbComm.VALIDATION_DEFAULT = function(id, displayName) {
	var e = eval(id);
	var value = e.getValue() == null ? "" : e.getValue().trim();
	var lang = shbComm.LANGUAGE;
	
	if (typeof displayName == 'undefined' || displayName == null || displayName == '') {
		displayName = e.id;
	}

	var str = '';
	var type = e.getPluginName().toLowerCase();
	
	if ((type == 'input' || type == "inputcalendar" || type == "secret" || type == "textarea") && (value == null || value == "")) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);	//%1을/를 입력해 주십시오.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if ( type == "selectbox" && e.getItemCount() == 0 ) {
		str = strLib.getMessage(shbComm.lang["CO01070"], [displayName]);	//선택할 %1이/가 없습니다.
		
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {
				str = str.replace("이/가", "이");
			} else {
				str = str.replace("이/가", "가");
			}
		}
		
		shbComm.alert(str,e);
		return false;
	} else if ((type == "multiselect" || type == "autofinder" || type == "selectbox" ||
				type == "radio" || type == "checkbox") && (value == null || value == "")) {
		str = strLib.getMessage(shbComm.lang["CO01017"], [displayName]);;	//%1을/를 선택하십시오.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	//
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	return true;
};
shbComm.VALIDATION_LENGTH = function(id, displayName, min, max) {
	var e = eval(id);
	var value = e.getValue();
	var lang = shbComm.LANGUAGE;

	if (typeof displayName == 'undefined' || displayName == null || displayName == '') {
		displayName = e.id;
	}

	var str = '';
	var type = e.getPluginName().toLowerCase();
	if (type == 'input' || type == "inputcalendar" || type == "secret" || type == "textarea") {
		if (value == null || value == "") {
			str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);	//%1을/를 입력해 주십시오.
			if (lang == "ko") {
				if (strLib.isFinalConsonant( displayName )) {
					str = str.replace("을/를", "을");
				} else {
					str = str.replace("을/를", "를");
				}
			}
			shbComm.alert(str,e);
			return false;
		} else if (value.length < min) {
			str = strLib.getMessage(shbComm.lang["CO01018"], [displayName, min]);	//%1은/는 %2자리 이상 입력해 주십시오.
			if (lang == "ko") {
				if (strLib.isFinalConsonant( displayName )) {	
					str = str.replace("은/는", "은");
				} else {
					str = str.replace("은/는", "는");
				}
			}
			shbComm.alert(str,e);
			return false;
		} else if (value.length > max) {
			str = strLib.getMessage(shbComm.lang["CO01019"], [displayName, max]);	//%1은/는 %2자리 미만으로 입력해 주십시오.
			if (lang == "ko") {
				if (strLib.isFinalConsonant( displayName )) {	
					str = str.replace("은/는", "은");
				} else {
					str = str.replace("은/는", "는");
				}
			}
			shbComm.alert(str,e);
			return false;
		}
	}
	return true;
};
shbComm.VALIDATION_LENGTHPASS = function(id, displayName, min, max) {
	var e = eval(id);
	var value = e.getValue();
	var lang = shbComm.LANGUAGE;
	
	if (typeof displayName == 'undefined' || displayName == null || displayName == '') {
		displayName = e.id;
	}

	var str = '';
	var type = e.getPluginName().toLowerCase();

	if (type == 'input' || type == "inputcalendar" || type == "secret" || type == "textarea") {
		if (value != null && value != "") {
			if (value.length < min) {
				//str = gibLangObj.getGIBMessage("FRM038", displayName, max);	//%1은/는 %2자리 이상 입력해 주십시오.
				str = strLib.getMessage(shbComm.lang["CO01018"], [displayName, min]);	//%1은/는 %2자리 이상 입력해 주십시오.
				if (lang == "ko") {
					if (strLib.isFinalConsonant( displayName )) {	
						str = str.replace("은/는", "은");
					} else {
						str = str.replace("은/는", "는");
					}
				}
				shbComm.alert(str,e);
				return false;
			} else if (value.length > max) {
				//str = gibLangObj.getGIBMessage("FRM038_1", displayName, max);	//%1은/는 %2자리 미만으로 입력해 주십시오.
				str = strLib.getMessage(shbComm.lang["CO01019"], [displayName, max]);	//%1은/는 %2자리 미만으로 입력해 주십시오.
				if (lang == "ko") {
					if (strLib.isFinalConsonant( displayName )) {	
						str = str.replace("은/는", "은");
					} else {
						str = str.replace("은/는", "는");
					}
				}
				shbComm.alert(str,e);
				return false;
			}
		}
	}
	return true;
};
// 숫자 입력 Check
shbComm.VALIDATION_HANCHECK = function(id, displayName) {
	var e = eval(id);
	var str = "";
	var value = e.getValue();
	var lang = shbComm.LANGUAGE;
	if( typeof displayName == 'undefined' || displayName == null || displayName == '' ) {
		displayName = e.name;
	}
	if( value == "" ) return true;

	if( value.length != strLib.getByteLen(value) ) {
		str = strLib.getMessage(shbComm.lang["CO01020"], [displayName]);	//%1 에는 한글없이 입력하셔야 합니다.
		shbComm.alert(str,e);
		return false;
	}

	return true;
};
// 숫자 입력 Check
shbComm.VALIDATION_DIGIT = function(id, displayName, min, max) {
	var e = eval(id);
	var str = "";
	var lang = shbComm.LANGUAGE;
	if( typeof displayName == 'undefined' || displayName == null || displayName == '' ) {
		displayName = e.id;
	}

	var value = e.getValue();
	if( !strLib.isDigit( value ) ) {
		str = strLib.getMessage(shbComm.lang["CO01021"], [displayName]);	//%1은/는 숫자만 입력해야 합니다.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( value == null || value == '' ) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);	//%1을/를 입력해 주십시오.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	if( typeof min != 'undefined' && min != '' ) {
		if( typeof max != 'undefined' && max != '' ) {
			if( min == max  ) {
				if( value.length != min ) {
					str = strLib.getMessage(shbComm.lang["CO01071"], [displayName, min]);	//%1은/는 %2자리를 입력해 주십시오.
					if (lang == "ko") {
						if (strLib.isFinalConsonant( displayName )) {	
							str = str.replace("은/는", "은");
						} else {
							str = str.replace("은/는", "는");
						}
					}
					shbComm.alert(str,e);
					return false;
				}
			}
			else{
				if( value.length < min || value.length > max ) {
					//str = gibLangObj.getGIBMessage("FRM037", displayName, min, max);	//%1은/는 %2에서 %3자리를 입력해 주십시오.
					str = strLib.getMessage(shbComm.lang["CO01071"], [displayName, min, max]);	//%1은/는 %2에서 %3자리를 입력해 주십시오.
					if (lang == "ko") {
						if (strLib.isFinalConsonant( displayName )) {	
							str = str.replace("은/는", "은");
						} else {
							str = str.replace("은/는", "는");
						}
					}
					shbComm.alert(str,e);
					return false;
				}
			}
		} else {
			if( value.length < min ) {
				//str = gibLangObj.getGIBMessage("FRM039", displayName, min);	//%1은/는 %2자리 이상 입력해 주십시오.
				str = strLib.getMessage(shbComm.lang["CO01018"], [displayName, min]);	//%1은/는 %2자리 이상 입력해 주십시오.
				if (lang == "ko") {
					if (strLib.isFinalConsonant( displayName )) {	
						str = str.replace("은/는", "은");
					} else {
						str = str.replace("은/는", "는");
					}
				}
				shbComm.alert(str,e);
				return false;
			}
		}
	}
	return true;
};
//금액만 포함되어있는지 Check
shbComm.VALIDATION_MONEY = function(id, displayName) {
	var e = eval(id);
	var str = "";
	var value = e.getValue();
	var lang = shbComm.LANGUAGE;
	if( typeof displayName == 'undefined' || displayName == null || displayName == '' ) {
		displayName = e.id;
	}
	if( !strLib.isMoney( value ) ) {
		str = strLib.getMessage(shbComm.lang["CO01021"], [displayName]);	//%1은/는 숫자만 입력해야 합니다.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( value == null || value == '' ) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);	//%1을/를 입력해 주십시오.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( parseInt(value, 10) <= 0) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	return true;
};

// 외환만 포함되어있는지 Check
shbComm.VALIDATION_FOREIGN_MONEY = function(id, displayName) {
	var e = eval(id);
	var str = "";
	var value = e.getValue();
	var lang = shbComm.LANGUAGE;
	if( typeof displayName == 'undefined' || displayName == null || displayName == '' ) {
		displayName = e.id;
	}
	if( !strLib.isForeignMoney( value ) ) {
		if( typeof displayName == 'undefined' || displayName == null || displayName == '' ) {
			displayName = e.name;
		}
		str = strLib.getMessage(shbComm.lang["CO01021"], [displayName]);
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( value == null || value == '' ) {
		if( typeof displayName == 'undefined' || displayName == null || displayName == '' ) {
			displayName = e.name;
		}
		str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( value <= 0) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	return true;
};

// 입금 계좌 Check
shbComm.VALIDATION_ACCOUNT_IN = function(id, displayName) {
	var e = eval(id);
	var str = "";
	var value = e.getValue().replaceAll("-", "");
	var lang = shbComm.LANGUAGE;
	if( typeof displayName == 'undefined' || displayName == null || displayName == '' ) {
		displayName = e.id;
	}
	if( !strLib.isAlphanumeric( value ) ) {
		str = strLib.getMessage(shbComm.lang["CO01022"], [displayName]);
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( value.length < 6  || value.length > 14 ) {
		str = strLib.getMessage(shbComm.lang["CO01023"], [displayName]);
		shbComm.alert(str,e);
		return false;
	} else if( value == null || value == '' ) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	return true;
};
// 출금 계좌 Check
shbComm.VALIDATION_ACCOUNT_OUT = function(id, displayName) {
	var e = eval(id);
	var str = "";
	var value = e.getValue();
	var lang = shbComm.LANGUAGE;
	if( typeof displayName == 'undefined' || displayName == null || displayName == '' ) {
		displayName = e.id;
	}
	if( !strLib.isDigit( value ) ) {
		//str = gibLangObj.getGIBMessage("FRM032", displayName);	//%1은/는 숫자만 입력해야 합니다.
		str = strLib.getMessage(shbComm.lang["CO01021"], [displayName]);
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( value.length != 11  && value.length != 12 ) {
		str = strLib.getMessage(shbComm.lang["CO01023"], [displayName]);
		shbComm.alert(str,e);
		return false;
	} else if( value == null || value == '' ) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [displayName]);
		if (lang == "ko") {
			if (strLib.isFinalConsonant( displayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	return true;
};
// 날짜  Check
shbComm.VALIDATION_DATEDIFF = function(id, startDisplayName, end,endDisplayName, max) {
	var startObj = eval(id);
	var e = startObj;
	var endObj = eval(end);
	var re = "/[/]/g";
	var day1 = startObj.getValue().replaceAll(".", "");
	var day2 = endObj.getValue().replaceAll(".", "");
	var str = "";
	var lang = shbComm.LANGUAGE;

	day1 = day1.replaceAll("-", "");
	day2 = day2.replaceAll("-", "");
	if( typeof startDisplayName == 'undefined' || startDisplayName == null || startDisplayName == '' ) {
		startDisplayName = startObj.id;
	}
	if( typeof endDisplayName == 'undefined' || endDisplayName == null || endDisplayName == '' ) {
		endDisplayName = endObj.id;
	}

	if( day1.length != 8 ) {
		str = strLib.getMessage(shbComm.lang["CO01024"], [startDisplayName]);	//%1은/는 yyyyMMdd형식이어야 합니다. %2
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	if( isNaN( day1 ) ) {
		str = strLib.getMessage(shbComm.lang["CO01021"], [startDisplayName]);	//%1은/는 숫자형식이어야 합니다. %2
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	if( day2.length != 8 ) {
		str = strLib.getMessage(shbComm.lang["CO01024"], [endDisplayName]);	//%1은/는 yyyyMMdd형식이어야 합니다. %2
		if (lang == "ko") {
			if (strLib.isFinalConsonant( endDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	if( isNaN( day2 ) ) {
		str = strLib.getMessage(shbComm.lang["CO01021"], [endDisplayName]);	//%1은/는 숫자형식이어야 합니다. %2
		if (lang == "ko") {
			if (strLib.isFinalConsonant( endDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}

	var y1 = parseInt( day1.substring( 0, 4 ), 10);
	var m1 = parseInt( day1.substring( 4, 6 ), 10);
	var d1 = parseInt( day1.substring( 6, 8 ), 10);

	var y2 = parseInt( day2.substring( 0, 4 ), 10);
	var m2 = parseInt( day2.substring( 4, 6 ), 10);
	var d2 = parseInt( day2.substring( 6, 8 ), 10);

	if( y1 > 2100 || y1 < 1900 ) {
		str = shbComm.lang["CO01026"] + " " + y1;
		shbComm.alert(str,e);
		return false;
	}
	if( m1 > 12 || m1 < 1 ) {
		str = shbComm.lang["CO01027"] + " " + m1;
		shbComm.alert(str,e);
		return false;
	}

	// 날짜 확인
	var total_days;

	if(m1 == 1) total_days = 31;
	else if(m1 == 2) {
		if(((y1 % 4 == 0) && (y1 % 100 != 0)) || (y1 % 400 == 0))
			 total_days = 29;
		else total_days = 28;
	}
	else if(m1 == 3) total_days = 31;
	else if(m1 == 4) total_days = 30;
	else if(m1 == 5) total_days = 31;
	else if(m1 == 6) total_days = 30;
	else if(m1 == 7) total_days = 31;
	else if(m1 == 8) total_days = 31;
	else if(m1 == 9) total_days = 30;
	else if(m1 == 10) total_days = 31;
	else if(m1 == 11) total_days = 30;
	else if(m1 == 12) total_days = 31;

	if( d1 > total_days || d1 < 1 ) {
		str = strLib.getMessage(shbComm.lang["CO01028"], [total_days]);
		shbComm.alert(str,e);
		return false;
	}

	if( y2 > 2100 || y2 < 1900 ) {
		str = shbComm.lang["CO01026"] + " " + y2;
		shbComm.alert(str,e);
		return false;
	}
	if( m2 > 12 || m2 < 1 ) {
		str = shbComm.lang["CO01027"] + " " + m2;
		shbComm.alert(str,e);
		return false;
	}

	// 날짜 확인

	if(m2 == 1) total_days = 31;
	else if(m2 == 2) {
		if(((y2 % 4 == 0) && (y2 % 100 != 0)) || (y2 % 400 == 0))
			 total_days = 29;
		else total_days = 28;
	}
	else if(m2 == 3) total_days = 31;
	else if(m2 == 4) total_days = 30;
	else if(m2 == 5) total_days = 31;
	else if(m2 == 6) total_days = 30;
	else if(m2 == 7) total_days = 31;
	else if(m2 == 8) total_days = 31;
	else if(m2 == 9) total_days = 30;
	else if(m2 == 10) total_days = 31;
	else if(m2 == 11) total_days = 30;
	else if(m2 == 12) total_days = 31;

	if( d2 > total_days || d2 < 1 ) {
		str = strLib.getMessage(shbComm.lang["CO01028"], [total_days]);
		shbComm.alert(str,e);
		return false;
	}
	if( d2 > 31 || d2 < 1 ) {
		str = shbComm.lang["CO01006"];
		shbComm.alert(str,e);
		return false;
	}

	var diff = WebSquare.date.dateDiff(day1, day2);

	if( isNaN( diff ) ) {
		str = shbComm.lang["CO01029"];
		shbComm.alert(str,e);
		return false;
	} else if( diff >= max ) {
		str = strLib.getMessage(shbComm.lang["CO01030"], [startDisplayName, endDisplayName, max]);	//{0}과/와 {1}은/는 {2}일 이내로 입력하세요.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {
				str = str.replace("과/와", "과");
			} else {
				str = str.replace("과/와", "와");
			}
			if (strLib.isFinalConsonant( endDisplayName )) {
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( diff < 0 ) {
		str = strLib.getMessage(shbComm.lang["CO01031"], [endDisplayName, startDisplayName]);	//%1이/가 %2보다 빠를 수 없습니다.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( endDisplayName )) {	
				str = str.replace("이/가", "이");
			} else {
				str = str.replace("이/가", "가");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( day1 == null || day1== '' ) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [startDisplayName]);	//%1을/를 입력해 주십시오.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	} else if( day2 == null || day2 == '' ) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [endDisplayName]);	//%1을/를 입력해 주십시오.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( endDisplayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	return true;
};
// 날짜  Check
shbComm.VALIDATION_DATE = function(id, startDisplayName) {
	var startObj = eval(id);
	var e = startObj;
	var re = "/[/]/g";
	var day1 = startObj.getValue().replaceAll(".", "");
	var str = "";
	var lang = shbComm.LANGUAGE;

	day1 = day1.replaceAll("-", "");
	if( typeof startDisplayName == 'undefined' || startDisplayName == null || startDisplayName == '' ) {
		startDisplayName = startObj.id;
	}

	if( day1.length != 8 ) {
		str = strLib.getMessage(shbComm.lang["CO01024"], [startDisplayName]);	//%1은/는 yyyyMMdd형식이어야 합니다. %2
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	if( isNaN( day1 ) ) {
		str = strLib.getMessage(shbComm.lang["CO01021"], [startDisplayName]);	//%1은/는 숫자형식이어야 합니다. %2
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	var y1 = parseInt( day1.substring( 0, 4 ), 10);
	var m1 = parseInt( day1.substring( 4, 6 ), 10);
	var d1 = parseInt( day1.substring( 6, 8 ), 10);

	if( y1 > 2099 || y1 < 1900 ) {
		str = shbComm.lang["CO01026"]+" "+y1;	//연도는 1900부터 2099사이 값이어야 합니다. %1
		shbComm.alert(str,e);
		return false;
	}
	if( m1 > 12 || m1 < 1 ) {
		str = shbComm.lang["CO01027"]+" "+m1;	//월은 1부터 12사이 값이어야 합니다. %1
		shbComm.alert(str,e);
		return false;
	}

	// 날짜 확인
	var total_days;

	if(m1 == 1) total_days = 31;
	else if(m1 == 2) {
		if(((y1 % 4 == 0) && (y1 % 100 != 0)) || (y1 % 400 == 0))
			 total_days = 29;
		else total_days = 28;
	}
	else if(m1 == 3) total_days = 31;
	else if(m1 == 4) total_days = 30;
	else if(m1 == 5) total_days = 31;
	else if(m1 == 6) total_days = 30;
	else if(m1 == 7) total_days = 31;
	else if(m1 == 8) total_days = 31;
	else if(m1 == 9) total_days = 30;
	else if(m1 == 10) total_days = 31;
	else if(m1 == 11) total_days = 30;
	else if(m1 == 12) total_days = 31;

	if( d1 > total_days || d1 < 1 ) {
		str = strLib.getMessage(shbComm.lang["CO01028"], [total_days]);	//%1 월의 일자는 1부터 %2 사이 값이어야 합니다. 입력값 %3 일
		shbComm.alert(str,e);
		return false;
	}

	if( day1 == null || day1 == '' ) {
		str = strLib.getMessage(shbComm.lang["CO01069"], [startDisplayName]);	//%1을/를 입력해 주십시오.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("을/를", "을");
			} else {
				str = str.replace("을/를", "를");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	return true;
};
// 전화번호 Check
shbComm.VALIDATION_TELEPHONE = function(id, startDisplayName) {
	var e = eval(id);
	var str = "";
	var lang = shbComm.LANGUAGE;

	if( typeof startDisplayName == 'undefined' || startDisplayName == null || startDisplayName == '' ) {
		startDisplayName = e.id;
	}

	if( ! strLib.isTelNumber( e.getValue() ) ){
		str = strLib.getMessage(shbComm.lang["CO01025"], [startDisplayName]);	//%1은/는 숫자와 - 만 입력 가능합니다.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	return true;
};
// 시간 Check
shbComm.VALIDATION_TIME = function(id, startDisplayName) {
	var e = eval(id);
	var str = "";
	var lang = shbComm.LANGUAGE;

	if( typeof startDisplayName == 'undefined' || startDisplayName == null || startDisplayName == '' ) {
		startDisplayName = e.id;
	}
	var value = e.getValue();

	if( ! strLib.isDigit( value ) ){
		str = strLib.getMessage(shbComm.lang["CO01021"], [startDisplayName]);	//%1은/는 숫자만 입력해야 합니다.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	if( value.length != 4 ){
		str = strLib.getMessage(shbComm.lang["CO01032"], [startDisplayName]);	//%1은/는 4자리를 입력하셔야 합니다.
		if (lang == "ko") {
			if (strLib.isFinalConsonant( startDisplayName )) {	
				str = str.replace("은/는", "은");
			} else {
				str = str.replace("은/는", "는");
			}
		}
		shbComm.alert(str,e);
		return false;
	}
	var hh = parseInt( e.value, 10 ) / 100;
	var mm = parseInt( e.value, 10 ) % 100;

	if( hh < 0 || hh > 23  || mm < 0 || mm > 59 ){
		str = strLib.getMessage(shbComm.lang["CO01033"], [startDisplayName]);	//은  0000에서 2359까지 입력 하실 수 있습니다.
		str = str.replace("은", "는");
		str += "'" + startDisplayName + "'"+str;
		shbComm.alert(str,e);
		return false;
	}

	return true;
};

// 이메일 주소 유효성 체크
shbComm.VALIDATION_EMAIL = function(id, startDisplayName) {
	var e = eval(id);
	var str = "";
	var lang = shbComm.LANGUAGE;

	if( typeof startDisplayName == 'undefined' || startDisplayName == null || startDisplayName == '' ) {
		startDisplayName = e.id;
	}
	if (!strLib.isEmail(e.getValue())) {
		str = strLib.getMessage(shbComm.lang["CO01034"], [startDisplayName]);	//%1 의 입력형식이 틀립니다. 다시 입력해주십시요.
		shbComm.alert(str,e);
		return false;
	}
	return true;
};

//특수문자 체크
shbComm.checkSpecialChar = function(str, objName) {
	for (var i=0; i < str .length; i++) {
		ch_char = str .charAt(i);
		ch = ch_char.charCodeAt();
		if( (ch >= 33 && ch <= 47) || (ch >= 58 && ch <= 64) || (ch >= 91 && ch <= 96) || (ch >= 123 && ch <= 126) ) {
			shbComm.alert(strLib.getMessage(shbComm.lang["CO01035"], [objName]));
			return false;
		}
	}
	return true;
};
//특수문자 체크 (-) 제외 (ch  = 45)
shbComm.nonDashcheckSpecialChar = function(str, objName) {
	for (var i=0; i < str .length; i++) {
		ch_char = str .charAt(i);
		ch = ch_char.charCodeAt();

		if((ch >= 33 && ch <= 44) ||(ch >= 46 && ch <= 47)|| (ch >= 58 && ch <= 64) || (ch >= 91 && ch <= 96) || (ch >= 123 && ch <= 126) ) {
			shbComm.alert(strLib.getMessage(shbComm.lang["CO01035"], [objName]));
			return false;
		}

	}
	return true;
};
shbComm._password = new Array();
shbComm.bindClickLog = function() {
	//$(':wq(anchor)').wq('bind','onclick',shbComm.callLogging);
	var arrExclude = [];
	shbComm._password = [];
	for( var item in shbComm.plugAllName ) { arrExclude.push(item); }
	var sExclude = "span body Switch gridView "+arrExclude.join(" ");
	sExclude = strLib.replaceAll(sExclude,"anchor ","");
	sExclude = strLib.replaceAll(sExclude,"input ","");
	//body 아래 그룹을 모두 찾음
	var arr = WebSquare.util.getChildren();
	for ( var k = 0; k < arr.length; k++ ) {
		var oFindGrp = arr[k];
		var arrFindResult = WebSquare.util.getChildren(oFindGrp, {excludePlugin:sExclude, recursive:true});
		for(var i = 0; i < arrFindResult.length; i++){
			if( "anchor" == arrFindResult[i].getPluginName() ){
				arrFindResult[i].bind("onclick",shbComm.callLogging);
			}
			//패스워드인 경우만 전역변수에 id를 기억한다.
			if ( "input" == arrFindResult[i].getPluginName() ) {
				if (arrFindResult[i].getAttribute("type") == "password") {
					shbComm._password.push(arrFindResult[i].getID());
				}
			}
		}
	}
};
//로깅 호출 화면진입시 
shbComm.callLogging = function(sAddLog) {
	if( topWin.IS_DEV === 'T' ) return;	//테스트 서버인 경우 제외
	try {
		var sPopupId = shbComm.getPopupId();
		var sCode = "";
		var pageUrl = "";
		if( !strLib.isEmpty(sPopupId) ) {
			sCode = sPopupId.substring(0, sPopupId.indexOf("_"));
			pageUrl = WebSquare.w2xPath;
		} else {
			var jMenu = shbComm.menu.getCurrentMenuInfo();
			if( !jsonLib.isNullObj(jMenu) ){
				sCode = jMenu.MENU_CODE
				pageUrl = jMenu.MENU_URL;
			} else {
				pageUrl = WebSquare.w2xPath;
				sCode = pageUrl.substring(pageUrl.lastIndexOf("/")+1);
				sCode = sCode.substring(0, pageUrl.indexOf(".xml"));
			}
		}
		var _n_click_image = null;
		var clickLoggingUrl = "/n_click_logging.htm";
		var loggingString = "?menuCode="+sCode;
		loggingString += "&page="+pageUrl+"&lang="+shbComm.LANGUAGE;
		//상품코드 수집
		var pageParam = shbComm.getSaveObject('pageParam', true);
		if (typeof pageParam != "undefined") {
			//상품코드, pcd, 펀드코드
			var pcd = pageParam["pcd"];
			if (pcd == undefined || pcd == "") {
				pcd = pageParam["상품코드"];
				if (pcd == undefined || pcd == "") pcd = pageParam["펀드코드"];
				if (pcd == undefined || pcd == "") pcd = pageParam["F_PROD_ID"];
			}
			if (pcd != undefined && pcd != "") {
				loggingString += "&pcd="+pcd;
			}
		}
		if( !strLib.isEmpty(sAddLog) ) { 
			loggingString += "&"+sAddLog;
		}
		if( !strLib.isEmpty(this.id) ) { //그냥 함수 콜일때는 this getUserData getPluginName 함수 호출시 오류남
			if( (typeof this.getUserData) == "function" ) {
				var sUserAddLog = this.getUserData("ADDLOG");
				if( !strLib.isEmpty(sUserAddLog) ) { 
					loggingString += "&"+sUserAddLog;
				}
			}
			if( (typeof this.getPluginName) == "function" && "anchor" == this.getPluginName()) {
				//loggingString += "&btnId="+encodeURIComponent(this.id)+(strLib.isEmpty(this.getValue()) ? "" : "&btnLabel="+encodeURIComponent(strLib.stripTag(this.getValue())));
				loggingString += "&btnId="+this.id+(strLib.isEmpty(this.getValue()) ? "" : "&btnLabel="+strLib.stripTag(this.getValue()));
			}
		}
		shbComm.log("logging call::"+clickLoggingUrl+loggingString);
		if( jsonLib.isNullObj(_n_click_image) ) {
			_n_click_image = new Image();
		}
		_n_click_image.src = clickLoggingUrl+loggingString;
	} catch(e) {
		shbComm.printStackTrace(e);
	}
};
//버튼에 로깅 함수가 안걸려 있는 경우를 대비해서 bind 다시해줌
shbComm.addLogDataBtn = function(btnId, strAddLogData){
	var oBtn = shbComm.getComponent(btnId);
	if( jsonLib.isNullObj(oBtn) ) {
		oBtn.setUserData("ADDLOG",strAddLogData);
		oBtn.unbind("onclick",shbComm.callLogging);
		oBtn.bind("onclick",shbComm.callLogging);
	}
};
//통신 로깅
shbComm.saveWebLog = function(e){
	try {
		if( topWin.IS_DEV === 'T' ) return;	//테스트 서버인 경우 제외
		var sPopupId = shbComm.getPopupId();
		var sCode = ""; 
		if( !strLib.isEmpty(sPopupId) ) {
			sCode = sPopupId.substring(0, sPopupId.indexOf("_"));
		} else {
			var jMenu = shbComm.menu.getCurrentMenuInfo();
			if( !jsonLib.isNullObj(jMenu) ){ 
				sCode = jMenu.MENU_CODE
			}
		}
		var req_url = "/n_click_logging.htm";
		req_url = req_url + "?menuCode="+sCode;
		var menuInfo = shbComm.menu.getCurrentMenuInfo();
		var pageUrl = menuInfo.MENU_URL;
		req_url += "&page="+pageUrl+"&lang="+shbComm.LANGUAGE;
		
		var retStr = e.responseText;
		if( !strLib.isEmpty(retStr) ) {
			var retObj = JSON.parse(retStr);
			var rootInfo = retObj.root_info;
			if (rootInfo && rootInfo.serviceType && rootInfo.serviceType == "SU") {
				return;
			}
			if( !jsonLib.isNullObj(rootInfo) ) {
				if( "S" == rootInfo.resultStatus ) {
					req_url = req_url + "&resultState="+"OK"; 
				} else {
					if( "EJ" == rootInfo.errorType ) {
						req_url = req_url + "&resultState="+"WARNING";
					} else if( "ES" == rootInfo.errorType ) {
						req_url = req_url + "&resultState="+"JERROR";
					} else {
						req_url = req_url + "&resultState="+"NOTOK"; 
					}
				}
				req_url = req_url + "&serviceType="+(strLib.isEmpty(rootInfo.serviceType) ? "" : rootInfo.serviceType);
				req_url = req_url + "&serviceCode="+(strLib.isEmpty(rootInfo.serviceCode) ? "" : rootInfo.serviceCode);
				req_url = req_url + "&beforeEJBCall="     + (strLib.isEmpty(rootInfo.beforeEJBCall) ? "" : rootInfo.beforeEJBCall) ;
				req_url = req_url + "&afterEJBCall="      + (strLib.isEmpty(rootInfo.afterEJBCall) ? "" : rootInfo.afterEJBCall) ;
				req_url = req_url + "&beforeServletCall=" + (strLib.isEmpty(rootInfo.beforeServletCall) ? "" : rootInfo.beforeServletCall);
				req_url = req_url + "&afterServletCall="  + (strLib.isEmpty(rootInfo.afterServletCall) ? "" : rootInfo.afterServletCall);
			} 
		} else {
			req_url = req_url + "&resultState="+e.responseStatusCode;
		}
		var _n_logging_image = null;
		if( jsonLib.isNullObj(_n_logging_image) ) {
			_n_logging_image = new Image();
		}
		shbComm.log("logging::"+req_url);
		_n_logging_image.src = req_url;
	} catch(e) {
		shbComm.printStackTrace(e);
	}
};

//정적보고서 출력 popWidth:꼭 필요한경우만 사용
shbComm.reportPrint = function(reportId, idsArrOption, popWidth){

	// infoMapId 에 필요한 정보 모두 추가필요
	var headOption = {"rptId":reportId};
	var idsArr = idsArrOption;
	try{
		if( !jsonLib.isNullObj(idsArrOption) ){
			if( !jsonLib.isArray(idsArrOption) ) {
				idsArr = [idsArrOption]; 
			}
			for ( var i = 0; i < idsArr.length; i++) {
				if( typeof idsArr[i] == "string" ){
					var pgDcNm = idsArr[i];
					var rpDcNm = pgDcNm;
					var dataCollection = WebSquare.util.getComponentById(pgDcNm);
				} else {
					var pgDcNm = idsArr[i]["id"];
					var rpDcNm = idsArr[i]["key"];
					var dataCollection = WebSquare.util.getComponentById(pgDcNm);
				}
				if( "dataList" === dataCollection.getObjectType() || "linkedDataList" === dataCollection.getObjectType()){ 
					headOption[rpDcNm] = dataCollection.getAllFilteredJSON();
				}else{
					headOption[rpDcNm] = dataCollection.getJSON();
				}
			}
		}
		shbComm.log("##### Rpt Send Data::"+strLib.stripTag(JSON.stringify(headOption).replace(/<(br)[/]?>/ig,"\\n")));
		var sParam = strLib.stripTag(JSON.stringify(headOption).replace(/<(br)[/]?>/ig,"\\n"));
		sParam = strLib.replaceAll(strLib.replaceAll(sParam,"&lt;","<"),"&gt;",">");
		var jParam = {"url":shbComm.STATIC_REPORT_URL,"param":sParam, "language":topWin.shbComm.LANGUAGE};
		if( shbComm.isEasyService() ) { 
			shbComm.printReportPop(jParam, "700");
		} else {
			if( !jsonLib.isNullObj(popWidth) && numLib.isInt(popWidth) ) {
				shbComm.printReportPop(jParam, popWidth);
			} else {
				shbComm.printReportPop(jParam);
			}
		}
	}catch(e){
		shbComm.printStackTrace("shbComm.reportPrint Exception::"+e);
	}
};

//정적보고서 출력 popWidth:꼭 필요한경우만 사용 (금리산정내역서)
shbComm.reportPrint_interest = function(reportId, options, popWidth){
	// infoMapId 에 필요한 정보 모두 추가필요
	var headOption = {"rptId":reportId};
	var idsArrOption = options.dataObj;
	var idsArr = idsArrOption;
	try{
		if( !jsonLib.isNullObj(idsArrOption) ){
			if( !jsonLib.isArray(idsArrOption) ) {
				idsArr = [idsArrOption]; 
			}
			for ( var i = 0; i < idsArr.length; i++) {
				if( typeof idsArr[i] == "string" ){
					var pgDcNm = idsArr[i];
					var rpDcNm = pgDcNm;
					var dataCollection = WebSquare.util.getComponentById(pgDcNm);
				} else {
					var pgDcNm = idsArr[i]["id"];
					var rpDcNm = idsArr[i]["key"];
					var dataCollection = WebSquare.util.getComponentById(pgDcNm);
				}
				if( "dataList" === dataCollection.getObjectType() || "linkedDataList" === dataCollection.getObjectType()){ 
					headOption[rpDcNm] = dataCollection.getAllFilteredJSON();
				}else{
					headOption[rpDcNm] = dataCollection.getJSON();
				}
			}
		}
		shbComm.log("##### Rpt Send Data::"+strLib.stripTag(JSON.stringify(headOption).replace(/<(br)[/]?>/ig,"\\n")));
		var sParam = strLib.stripTag(JSON.stringify(headOption).replace(/<(br)[/]?>/ig,"\\n"));
		sParam = strLib.replaceAll(strLib.replaceAll(sParam,"&lt;","<"),"&gt;",">");
		var jParam = {"url":shbComm.STATIC_REPORT_URL,"param":sParam, "language":topWin.shbComm.LANGUAGE};
		if( shbComm.isEasyService() ) { 
			shbComm.printReportPop_interest(jParam, "700");
		} else {
			if( !jsonLib.isNullObj(popWidth) && numLib.isInt(popWidth) ) {
				shbComm.printReportPop_interest(jParam, popWidth, options.callback);
			} else {
				shbComm.printReportPop_interest(jParam, "", options.callback);
			}
		}
	}catch(e){
		shbComm.printStackTrace("shbComm.reportPrint Exception::"+e);
	}
};


shbComm.reportDynamicPrint = function(reportOption){
	var rptDefaultOption = {};
	rptDefaultOption.useTitle=true;//타이틀 출력 여부
	rptDefaultOption.userTitle="";//타이틀
	rptDefaultOption.searchMapId="";//요약정보 map
	rptDefaultOption.searchMapViewKeys="조회기간,총건수,기준일시";//요약정보 출력
	rptDefaultOption.searchMapVwEnKeys=shbComm.lang["CO01073"]+","+shbComm.lang["CO01074"]+","+shbComm.lang["CO01075"];//요약정보 출력
	rptDefaultOption.landScape="1";//1:가로	
	rptDefaultOption.useHeader=true;
	rptDefaultOption.headerColor="#e8edf6";
	rptDefaultOption.headerFontColor="#b0b0b0";
	rptDefaultOption.headerFontName="신명조";
	rptDefaultOption.bodyFontColor="#000000";
	var options = $.extend(rptDefaultOption, reportOption);
	if (typeof options.gridViewId != "undefined") {
		var gridView = WebSquare.util.getComponentById(options.gridViewId);
		gridView.printCLIPReport(options);
	}
};

// private websquare componet return 
shbComm.getComponent = function(objId) {
	var returnObj = null;
	if( !jsonLib.isNullObj(objId) ) {
		if( typeof objId == "string" ) {
			returnObj = WebSquare.util.getComponentById(objId);
		} else {
			returnObj = objId;
		}
	}
	return returnObj;
};
// private GridView dataList 리턴
shbComm.getGridViewDataList = function(grdId) {
	var returnObj = null;
	var oGrd = shbComm.getComponent(grdId);
	if( !jsonLib.isNullObj(oGrd) ) {
		var returnObj = shbComm.getComponent(oGrd.getDataList());
	}
	return returnObj;
};
//영문모드여부 
shbComm.isEnLanguage = function(){
	if("en" == topWin.shbComm.LANGUAGE) {
		return true;
	} else {
		return false;
	}
};

/* ***** displayFormatter ***** */
shbComm.displayFormatterAddGun = function(value){
	return numLib.formatComma(value)+" "+shbComm.lang["CO01076"];
};

shbComm.displayFormatterAddWon = function(value){
	return numLib.formatComma(value)+" "+shbComm.lang["CO01077"];
};

shbComm.displayFormatterMoneyToHan = function(value){
	return numLib.moneyToHan(value);
};

shbComm.displayFormatterMoneyToHanAddWon = function(value){
	return shbComm.displayFormatterMoneyToHan(value)+" "+shbComm.lang["CO01077"];
};

shbComm.displayFormatterAddYear = function(value) {
	if( !strLib.isEmpty(value) ) {
		return value + " "+shbComm.lang["CO01078"];
	} else {
		return "";
	}
};

shbComm.displayFormatterAddMonth = function(value) {
	if( !strLib.isEmpty(value) ) {
		return value + " "+shbComm.lang["CO01079"];
	} else {
		return "";
	}
};
// 계좌번호 포맷팅
shbComm.displayFormatterAccNo = function(value) {
	var delim = "-";
	var reStr = value;
	if( !strLib.isEmpty(value) ) {
		if( value.length == 11 ) {
			reStr = value.substring(0,3) + delim + value.substring(3,5) + delim + value.substring(5,11);
		} else if( value.length == 12 ) {
			reStr = value.substring(0,3) + delim + value.substring(3,6) + delim + value.substring(6,12);
		}
	} else {
		reStr = "";
	}
	return reStr;
};
// 주민번호 마스킹
shbComm.displayFormatterSsnMask = function(value) {
	var reStr = value;
	if( !strLib.isEmpty(value) && value.length == 13 ) {
		reStr = value.substring(0,6)+"-"+"*******";
	}
	return reStr;
};

//이름 마스킹 (가운데 글자 마스킹 ex.이* 홍*동 을**덕)
//정보보호본부 가이드 - 업무연락 문서번호:정보보호본부-2019-00189 (2019.02.08)
shbComm.displayFormatterCusNmMask = function(value) {
	var reStr = value;
	if( !strLib.isEmpty(value) ) {
		if( value.length == 2 ) {
			reStr = value.substring(0,1)+"*";
		} else if( value.length == 3 ){
			reStr = value.substring(0,value.length-2)+"*"+value.substring(value.length-1);
		} else if( value.length >= 4 ){
			reStr = value.substring(0,value.length-3)+"**"+value.substring(value.length-1);
		}
	}
	return reStr;
};
//행번 마스킹 (뒷3자리만 표시)
shbComm.displayFormatterHwnNoMask = function(value) {
	var reStr = value;
	if( !strLib.isEmpty(value) ) {
		reStr = "*****"+value.substring(value.length-3);
	}
	return reStr;
};

/* ***** Grid DIV ***** */
//그리드 버튼 클릭 함수
shbComm.grdBtnComp = {"divMapInfo":{"A":"btn_addRow","B":"btn_delRow","C":"btn_uploadFile","D":"btn_uploadExcel","E":"btn_reportGrd","G":"btn_downFile","H":"btn_searchGrd","I":"btn_cancelSearchGrd","J":"sbx_viewRowCnt"}};
//private 그리드 아이디로 그리드 DIV 매핑정보 리턴
shbComm.grdBtnComp.findWfrIdInDivMapInfo = function(grdId){
	var reMapInfo = null;
	for ( var sWfrId in shbObj.divMapInfo) {
		var oItem = shbObj.divMapInfo[sWfrId];
		if( oItem.grdId == grdId ) {
			reMapInfo = oItem;
		}
	}
	return reMapInfo; 
};
//private 조회결과로 전체 보기 control
shbComm.grdBtnComp.controlSearchAfterGrd = function(grdId){
	var mapInfo = shbComm.grdBtnComp.findWfrIdInDivMapInfo(grdId);
	if( jsonLib.isNullObj(mapInfo) ){ return; }
	var oGrd = shbComm.getComponent(mapInfo.grdId);
	var oDl = shbComm.getGridViewDataList(mapInfo.grdId);
	if( jsonLib.isNullObj(oGrd) || jsonLib.isNullObj(oDl) || strLib.isEmpty(mapInfo.allViewGrpId) ){ return; }
	var oAllView = shbComm.getComponent(mapInfo.allViewGrpId);
	var oViewRowCnt = shbComm.getComponent(mapInfo.wfrId+"_"+shbComm.grdBtnComp.divMapInfo.J);
	if( jsonLib.isNullObj(oAllView) || jsonLib.isNullObj(oViewRowCnt) ){ return; }
	if( oDl.getRowCount() != 0 ) {
		if( oGrd.getVisibleRowNum() == oDl.getRowCount() ) {
			if(!jsonLib.isNullObj(oAllView)) { oAllView.hide(); }
			//if( "99" != oViewRowCnt.getValue() ) { oViewRowCnt.setValue("99"); } 접근성때문에 갯수 유지
		} else {
			if(!jsonLib.isNullObj(oAllView)) { oAllView.show(""); }
		}
	} else {
		if(!jsonLib.isNullObj(oAllView)) { oAllView.hide(); }
	}
};
//private 그리드 DIV 클릭 처리 
shbComm.grdBtnComp.grd_button_onclick = function(){
	var sBtnId = this.id;
	var sWfrId = "";
	var mapInfo;
	if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.A) > -1 ) {//행추가
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.A)-1);
		mapInfo = shbObj.divMapInfo[sWfrId];
		if( etcLib.isFunction(mapInfo.preCheckFn) ){
			var fnPreCheck = etcLib.getFunction(mapInfo.preCheckFn);
			if( !fnPreCheck("A") ) { return; }
		}
		shbComm.insertRowGrd(mapInfo.grdId);
	} else if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.B) > -1 ) {//행삭제
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.B)-1);
		mapInfo = shbObj.divMapInfo[sWfrId];
		if( etcLib.isFunction(mapInfo.preCheckFn) ){
			var fnPreCheck = etcLib.getFunction(mapInfo.preCheckFn);
			if( !fnPreCheck("B") ) { return; }
		}
		shbComm.deleteRowGrd(mapInfo.grdId,mapInfo.checkColumnId);
	} else if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.C) > -1 ) {//파일불러오기
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.C)-1);
		mapInfo = shbObj.divMapInfo[sWfrId];
		shbComm.uploadGrdPop(mapInfo.grdId, mapInfo.uploadTxtOption, mapInfo.uploadTxtCallback);
	} else if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.D) > -1 ) {//엑셀불러오기
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.D)-1);
		mapInfo = shbObj.divMapInfo[sWfrId];
		shbComm.uploadGrdPop(mapInfo.grdId, mapInfo.uploadXlsOption, mapInfo.uploadXlsCallback);
	} else if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.E) > -1 ) {//보고서인쇄
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.E)-1);
		var oGrpPrintChoice = shbComm.getComponent(sWfrId+"_"+"grp_reportPrintChoice");
		if( !jsonLib.isNullObj(oGrpPrintChoice) ) {
			oGrpPrintChoice.show("");
		} else {
			mapInfo = shbObj.divMapInfo[sWfrId];
			var reportOption = mapInfo.reportOption;
			if( jsonLib.isNullObj(reportOption) ) { reportOption = {}; }
			reportOption["gridViewId"] = mapInfo.grdId;
			if( strLib.isEmpty(reportOption["searchMapId"]) && !strLib.isEmpty(mapInfo.downloadOption.xlsInfo) ){
				reportOption["searchMapId"] = mapInfo.downloadOption.xlsInfo;
			}
			if( strLib.isEmpty(reportOption["excludeColumns"]) && !jsonLib.isNullObj(mapInfo.downloadOption.arrExcludeDownColumn) ){
				reportOption["excludeColumns"] = mapInfo.downloadOption.arrExcludeDownColumn;
			}
			shbComm.reportDynamicPrint(reportOption);			
		}
	} else if( sBtnId.indexOf("btn_closeReportPrintChoice") > -1 ) {//인쇄선택닫기
		sWfrId = sBtnId.substring(0, sBtnId.indexOf("btn_closeReportPrintChoice")-1);
		var oGrpPrintChoice = shbComm.getComponent(sWfrId+"_"+"grp_reportPrintChoice");
		if( !jsonLib.isNullObj(oGrpPrintChoice) ) {
			oGrpPrintChoice.hide("");
			shbComm.getComponent(sWfrId+"_"+shbComm.grdBtnComp.divMapInfo.E).focus();
		}
	} else if( sBtnId.indexOf("btn_reportVerticalPrint") > -1 || sBtnId.indexOf("btn_reportHorizontalPrint") > -1 ) {//가로세로인쇄
		var landScape = "1";
		if( sBtnId.indexOf("btn_reportVerticalPrint") > -1 ) {
			sWfrId = sBtnId.substring(0, sBtnId.indexOf("btn_reportVerticalPrint")-1);
			landScape = "0";//세로
		} else {
			sWfrId = sBtnId.substring(0, sBtnId.indexOf("btn_reportHorizontalPrint")-1);
			landScape = "1";//가로
		}
		mapInfo = shbObj.divMapInfo[sWfrId];
		var reportOption = mapInfo.reportOption;
		if( jsonLib.isNullObj(reportOption) ) { reportOption = {}; }
		reportOption["gridViewId"] = mapInfo.grdId;
		if( strLib.isEmpty(reportOption["searchMapId"]) && !strLib.isEmpty(mapInfo.downloadOption.xlsInfo) ){
			reportOption["searchMapId"] = mapInfo.downloadOption.xlsInfo;
		}
		if( strLib.isEmpty(reportOption["excludeColumns"]) && !jsonLib.isNullObj(mapInfo.downloadOption.arrExcludeDownColumn) ){
			reportOption["excludeColumns"] = mapInfo.downloadOption.arrExcludeDownColumn;
		}
		reportOption.landScape=landScape;//인쇄설정
		var oGrpPrintChoice = shbComm.getComponent(sWfrId+"_"+"grp_reportPrintChoice");
		if( !jsonLib.isNullObj(oGrpPrintChoice) ) {
			oGrpPrintChoice.hide("");
			shbComm.getComponent(sWfrId+"_"+shbComm.grdBtnComp.divMapInfo.E).focus();
		}
		shbComm.reportDynamicPrint(reportOption);
	} else if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.G) > -1 ) {//파일저장
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.G)-1);
		mapInfo = shbObj.divMapInfo[sWfrId];
		shbComm.downloadGrdPop(mapInfo.grdId, mapInfo.downloadOption);
	} else if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.H) > -1 ) {//검색
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.H)-1);
		mapInfo = shbObj.divMapInfo[sWfrId];
		if( jsonLib.isNullObj(mapInfo.searchOption) ) { mapInfo.searchOption = {}; }
		mapInfo.searchOption.searchBtnId = sWfrId+"_"+shbComm.grdBtnComp.divMapInfo.H;//mapInfo.searchOption.searchBtnId;
		mapInfo.searchOption.cancelBtnId = sWfrId+"_"+shbComm.grdBtnComp.divMapInfo.I;//mapInfo.searchOption.cancelBtnId;
		shbComm.searchGrd(mapInfo.grdId, mapInfo.searchOption);
	} else if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.I) > -1 ) {//검색취소
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.I)-1);
		mapInfo = shbObj.divMapInfo[sWfrId];
		shbComm.cancelSearchGrd(mapInfo.grdId, mapInfo.searchOption);
	} else if( sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.J) > -1 ) {//그리드 행수 변경
		sWfrId = sBtnId.substring(0, sBtnId.indexOf(shbComm.grdBtnComp.divMapInfo.J)-1);
		mapInfo = shbObj.divMapInfo[sWfrId];
		shbComm.setViewGrdRow(mapInfo.grdId, this.getValue());
	}
};
//private 그리드 버튼 보일건지 여부
shbComm.grdBtnComp.controlDivGrdBtn = function(option){
	var divMapInfo = shbComm.grdBtnComp.divMapInfo;
	var enLabel = {"A":shbComm.lang["CO01094"],"B":shbComm.lang["CO01095"],"C":shbComm.lang["CO01096"],"D":shbComm.lang["CO01097"],"E":shbComm.lang["CO00125"],"G":shbComm.lang["CO01098"],"H":shbComm.lang["CO00133"],"I":shbComm.lang["CO01099"],"J":""};
	var enViews = shbComm.lang["CO01100"];//"개 보기"" views"
	if( shbComm.isEnLanguage() ) {
		var arrChangeLabel = {"btn_reportVerticalPrint":shbComm.lang["CO00138"],"btn_reportHorizontalPrint":shbComm.lang["CO00137"]};
		for ( var item in arrChangeLabel) {
			var oComp = shbComm.getComponent(option.wfrId+"_"+item);
			if( !jsonLib.isNullObj(oComp) && !strLib.isEmpty(arrChangeLabel[item]) ){
				oComp.setValue(arrChangeLabel[item]);
			}
		}
	}
	for ( var item in divMapInfo) {
		var btnComp = WebSquare.util.getComponentById(option.wfrId+"_"+divMapInfo[item]);
		if( shbComm.isEnLanguage() ) {
			if( "J" == item ) {
				btnComp.removeAll();
				btnComp.addItem("5","5"+enViews);
				btnComp.addItem("10","10"+enViews);
				btnComp.addItem("20","20"+enViews);
				btnComp.addItem("30","30"+enViews);
				btnComp.addItem("40","40"+enViews);
				btnComp.addItem("50","50"+enViews);
				btnComp.addItem("99",shbComm.lang["CO01101"]);//See All
			} else {
				btnComp.setValue(enLabel[item]);
			}
		}
		if( option.use.indexOf(item) > -1 ) {
			btnComp.show("");
		} else {
			btnComp.hide();
		}
		if( "J" == item ) {//x건 보기 
			if( strLib.isEmpty(option.defaultViewRow) ){ option.defaultViewRow = "10"; }
			btnComp.setValue(option.defaultViewRow);
		}
	}
};
//그리드 초기화
shbComm.grdBtnComp.initDivGrdBtn = function(option){
	shbObj.divMapInfo = shbObj.divMapInfo || {};
	shbObj.divMapInfo[option.wfrId] = option;
	shbComm.grdBtnComp.controlDivGrdBtn(option);
};
//엑셀다운
shbComm.downloadGrdExcel = function(grdId, options, infoArr){
	var oGrd = grdId;
	if( typeof grdId == "string" ){
		oGrd = shbComm.getComponent(grdId);
	}
	if( !jsonLib.isNullObj(oGrd) ) {
		oGrd.advancedExcelDownload(options, infoArr);
	};
};
//파일다운
shbComm.downloadGrdFile = function(grdId, options){
	var oGrd = grdId;
	if( typeof grdId == "string" ){
		oGrd = shbComm.getComponent(grdId);
	}
	if( !jsonLib.isNullObj(oGrd) ) {
		oGrd.advancedExcelDownload(options, infoArr);
	};
};
//그리드 검색
shbComm.searchGrd = function(grdId, searchOption){
	var oGrd = shbComm.getComponent(grdId);
	if( jsonLib.isNullObj(oGrd) ) return;

	var itemset;
	if( !jsonLib.isNullObj(searchOption.arrSearchColumn) && searchOption.arrSearchColumn.length > 0) {
		itemset = searchOption.arrSearchColumn;
		for( var i = itemset.length-1; i >= 0; i--) {
			var idxColumn = oGrd.getColumnIndex(itemset[i].cid);
			if( "checkbox" == oGrd.getColumnType(idxColumn) || "radio" == oGrd.getColumnType(idxColumn) || "expression" == oGrd.getColumnType(idxColumn) ){//checkbox, expression column 제외
				itemset.splice(i,1);
			} else {
				var isCf = (strLib.isEmpty(oGrd.getColumnOption(itemset[i].cid,"customFormatter")) ? false : true);
				if( isCf ) itemset.splice(i,1); //customFormatter 있는 컬럼 제외
			}
		}
	} else {
		itemset = [];
		for( var i = 0; i < oGrd.getColumnCount(); i++) {
			if( "checkbox" == oGrd.getColumnType(i) || "radio" == oGrd.getColumnType(i) ||"expression" == oGrd.getColumnType(i) ){//checkbox column 제외
				continue;
			} else {
				var sColId = oGrd.getColumnID(i);
				var isExclude = false;
				if( jsonLib.isArray(searchOption.arrExcludeSearchColumn) ){
					for( var k = 0; k < searchOption.arrExcludeSearchColumn.length; k++) {
						if( searchOption.arrExcludeSearchColumn[k] == sColId ) {
							isExclude = true;
							break;
						}
					}
				}
				if( isExclude ) continue;//제외설정컬럼 제외
				var isCf = (strLib.isEmpty(oGrd.getColumnOption(sColId,"customFormatter")) ? false : true);
				if( isCf ) continue; //customFormatter 있는 컬럼 제외
				
				itemset.push({"cid":sColId, "cnm":oGrd.getHeaderValue(oGrd.getHeaderID(i))});
			}
		}
	}
	
	var param = {"grdId":grdId,"itemset":itemset,"searchBtnId":searchOption.searchBtnId,"cancelBtnId":searchOption.cancelBtnId};
	var option = {"title":shbComm.lang["CO00133"],"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00003RP.xml","width":"492","height":"269","callback":"shbComm.callbackSearchGrd","dataObject":param};
	shbComm.openPopup(option);
};
//private 그리드검색용 columnFilter 함수
shbComm.fnColumnFilter = function(cellData, tmpParam, rowIdx) {
	if( strLib.isForeignMoney(cellData) && strLib.isForeignMoney(tmpParam) ) {
		if( numLib.isFloat(cellData) && numLib.isFloat(tmpParam) ) {
			var tgt = String(numLib.unformatComma(cellData));
			var cpr = String(numLib.unformatComma(tmpParam));
			if( tgt.indexOf(cpr) > -1 ) {
				return true;
			}
		} else {
			var tgt = strLib.getNumberOnly(cellData);
			var cpr = strLib.getNumberOnly(tmpParam);
			if( tgt.indexOf(cpr) > -1 ) {
				return true;
			}
		}
	} else {
		if( cellData.indexOf(tmpParam) > -1 ) {
			return true;
		}
	}
	return false;
};
//private 그리드 검색 팝업 콜백
shbComm.callbackSearchGrd = function(sReData){
	if( strLib.isEmpty(sReData) ){ return; }
	var result = JSON.parse(sReData);
	if( jsonLib.isNullObj(result) || strLib.isEmpty(result.cid) || strLib.isEmpty(result.keyword) ){ return; }
	var dl = shbComm.getGridViewDataList(result.grdId);
	shbComm.cancelSearchGrd(result.grdId);
	dl.setColumnFilter({type:'func', colIndex:result.cid, key:shbComm.fnColumnFilter, param:result.keyword, condition:'and'});
	WebSquare.util.getComponentById(result.searchBtnId).hide();
	WebSquare.util.getComponentById(result.cancelBtnId).show("");
	var sViewRow = strLib.replaceAll(result.searchBtnId,"_"+shbComm.grdBtnComp.divMapInfo.H,"")+"_"+shbComm.grdBtnComp.divMapInfo.J;
	shbComm.setViewGrdRow(result.grdId, WebSquare.util.getComponentById(sViewRow).getValue());
	
	if( typeof shbObj.initSearchGrdCnt != "undefined" && typeof shbObj.initSearchGrdCnt == "function" ){
		shbObj.initSearchGrdCnt(dl); 
	};
};
//그리드 검색취소
shbComm.cancelSearchGrd = function(grdId, option){
	var dl = shbComm.getGridViewDataList(grdId);
	if( !jsonLib.isNullObj(dl) ) {
		if( "linkedDataList" == dl.initializeType ) {
			dl.removeColumnFilterAll(); 
		} else if( "dataList" == dl.initializeType ) {
			var arrFilter = dl.getFilterList();
			for( var i = 0; i < arrFilter.length; i++ ) {
				if( arrFilter[i].key === shbComm.fnColumnFilter ){
					dl.removeColumnFilter(dl.getColumnID(arrFilter[i].colIndex));
				}
			}
		}
	}
	if( !jsonLib.isNullObj(option) ) {
		WebSquare.util.getComponentById(option.searchBtnId).show("");
		WebSquare.util.getComponentById(option.cancelBtnId).hide();
		var sViewRow = strLib.replaceAll(option.searchBtnId,"_"+shbComm.grdBtnComp.divMapInfo.H,"")+"_"+shbComm.grdBtnComp.divMapInfo.J;
		shbComm.setViewGrdRow(grdId, WebSquare.util.getComponentById(sViewRow).getValue());
	}
	if( typeof shbObj.initSearchGrdCnt != "undefined" && typeof shbObj.initSearchGrdCnt == "function" ){
		shbObj.initSearchGrdCnt(dl);
	};
};
//그리드 검색버튼 초기화
shbComm.clearSearchGrd = function(grdId){
	var mapInfo = shbComm.grdBtnComp.findWfrIdInDivMapInfo(grdId);
	if( jsonLib.isNullObj(mapInfo) || jsonLib.isNullObj(mapInfo.searchOption) ){ return; }
	var btnSearch = WebSquare.util.getComponentById(mapInfo.searchOption.searchBtnId);
	if( !jsonLib.isNullObj(btnSearch) && "none" == btnSearch.getStyle("display") ){
		shbComm.cancelSearchGrd(grdId, mapInfo.searchOption);
	}
	return;
}
//그리드 파일저장 팝업 열기
shbComm.downloadGrdPop = function(grdId, downloadOption) {
	var oGrd = shbComm.getComponent(grdId);
	var oDl = shbComm.getGridViewDataList(grdId);
	if( jsonLib.isNullObj(oGrd) || jsonLib.isNullObj(oDl)) return;
	if( oDl.getRowCount() < 1 ) {
		shbComm.alert(shbComm.lang["CO01037"]);
		return;
	}
	if( oDl.getRowCount() > 65000 ) {
		shbComm.alert(shbComm.lang["CO01038"]);
		return;
	}
	if( strLib.isEmpty(oGrd.getHeaderID(oGrd.getColumnCount()-1)) || !strLib.isEmpty(oGrd.getHeaderID(oGrd.getColumnCount())) ) {//헤더와 컬럼갯수가 같지 않으면 
		if( jsonLib.isNullObj(downloadOption.arrDownColumn) || 0 == downloadOption.arrDownColumn.length ) {
			shbComm.log("컬럼정보가 없습니다.");
			return;
		}
	}
	var itemset;
	if( !jsonLib.isNullObj(downloadOption.arrDownColumn) && 0 != downloadOption.arrDownColumn.length ) {
		itemset = downloadOption.arrDownColumn;
	} else {
		itemset = [];
		for( var i = 0; i < oGrd.getColumnCount(); i++) {
			var isExclude = false;
			if( "checkbox" == oGrd.getColumnType(i) || "radio" == oGrd.getColumnType(i) ){//checkbox column 제외
				isExclude = true;
			}
			var sColId = oGrd.getColumnID(i);
			if( !isExclude && jsonLib.isArray(downloadOption.arrExcludeDownColumn) ){
				for( var k = 0; k < downloadOption.arrExcludeDownColumn.length; k++) {
					if( downloadOption.arrExcludeDownColumn[k] == sColId ) {
						isExclude = true;
						break;
					}
				}
			}
			if( isExclude ) continue;//제외설정컬럼 제외
			itemset.push({"cid":sColId, "cnm":oGrd.getHeaderValue(oGrd.getHeaderID(i))});
		}
	}
	var param = {"grdId":grdId,"itemset":itemset};
	var option = {"title":shbComm.lang["CO01080"],"w2xPath":shbComm.getSubContextPath() + "/include/popup/CO00012RP.xml","width":"494","callback":"shbComm.callbackDownloadGrd","dataObject":param};
	shbComm.openPopup(option);
};
//엑셀다운시 numberExtraction 컬럼 숫자 포맷 적용을 위해 displayFormat 적용 및 제거
shbComm.excelDownFormatNumberExtraction = function(oGrd, pRmFlag) {
	var sGrdId = oGrd.getID();
	var bSetYn = true;
	if( pRmFlag ) bSetYn = false; 
	for( var i = 0; i < oGrd.getColumnCount(); i++ ) {
		if( oGrd.getColumnVisible(i) ) {
			var sGrdColumnId = oGrd.getColumnID(i);
			if( sGrdColumnId.indexOf("_display") > -1 ) {
				var oDlColumnInfo = oGrd._dataList.getColumnInfo(sGrdColumnId);
				if( oDlColumnInfo && oDlColumnInfo.dataType && oDlColumnInfo.numberExtraction ) {
					if( "number" == oDlColumnInfo.dataType && "true" == oDlColumnInfo.numberExtraction ) {
						if( !strLib.isEmpty(oDlColumnInfo.numberExtractionFormat) && "NOT" == oDlColumnInfo.numberExtractionFormat.toUpperCase() ) {
							continue;
						}
						var sTgtFindId = sGrdId+"_"+sGrdColumnId;
						var sDisplayFormat = "#,###";
						if( bSetYn ) {
							if( !strLib.isEmpty(oDlColumnInfo.numberExtractionFormat) ) {
								sDisplayFormat = oDlColumnInfo.numberExtractionFormat;
							}
						} else {
							sDisplayFormat = "";
						}
						var oFindColumn = WebSquare.xml.findNodes(oGrd.element, "//w2:column[@id='"+sTgtFindId+"']");
						WebSquare.xml.setAttribute(oFindColumn[0], "displayFormat", sDisplayFormat);
					}
				}
			}
		} 
	}
};
//그리드 파일저장팝업 콜백
shbComm.callbackDownloadGrd = function(sReData){
	var result = JSON.parse(sReData);
	var mapInfo = shbComm.grdBtnComp.findWfrIdInDivMapInfo(result.grdId);
	if( jsonLib.isNullObj(mapInfo) || jsonLib.isNullObj(mapInfo.downloadOption) ){ return; }
	var dnOption = mapInfo.downloadOption;
	var isFormatNumberExtraction = false;
	if( !jsonLib.isNullObj(mapInfo.downloadOption.isFormatNumberExtraction) ) {
		isFormatNumberExtraction =  WebSquare.util.getBoolean(mapInfo.downloadOption.isFormatNumberExtraction);
	}
	var oGrd = shbComm.getComponent(mapInfo.grdId);
	var oDl = shbComm.getGridViewDataList(mapInfo.grdId);
	if( jsonLib.isNullObj(oGrd) || jsonLib.isNullObj(oDl) ){ return; }

	var oDefault = {};
	oDefault.bodyNumberDefaultValue = "0";
	oDefault.numberToText="true";
	if( "xls" == result.fileExt ) {//엑셀저장 기본옵션 설정
		oDefault.type="1";
		oDefault.bodyWordwrap="true";
		oDefault.headerColor="#A6A6A6";
		oDefault.headerFontName="돋움";
		oDefault.bodyFontName="돋움";
		oDefault.subTotalFontName="돋움";
		oDefault.footerFontName="돋움";
		oDefault.rowNumHeaderFontName="돋움";
		oDefault.rowNumBodyFontName="돋움";
		oDefault.rowNumFooterFontName="돋움";
		oDefault.rowNumSubTotalFontName="돋움";
	}
	
	//개발자가 부여한 엑셀옵션으로 덮어쓰기
	if( !jsonLib.isNullObj(mapInfo.downloadOption.xlsOption) ) {
		var options = $.extend({}, oDefault, mapInfo.downloadOption.xlsOption);
	} else {
		var options = oDefault;
	}

	var dmData = {};
	if( !strLib.isEmpty(mapInfo.downloadOption.xlsInfo) ) {
		var dmInfo = shbComm.getComponent(mapInfo.downloadOption.xlsInfo);
		if( !jsonLib.isNullObj(dmInfo) ) {
			dmData = dmInfo.getJSON();
		}
	}
	if( strLib.isEmpty(dmData["기준일시"]) ){
		dmData["기준일시"] = shbComm.getCurrentServerDate("yyyyMMddHHmmss");
	} else {
		dmData["기준일시"] = strLib.replaceAll(strLib.replaceAll(strLib.replaceAll(strLib.replaceAll(dmData["기준일시"],".",""),":",""),"-","")," ","");
	}
	if( strLib.isEmpty(dmData["제목"]) ){
		if( strLib.isEmpty(dnOption.fileName) ) {
			dmData["제목"] = "조회결과";
		} else {
			dmData["제목"] = dnOption.fileName.split(".")[0];
		}
	}
	//신한은행_그리드명_조회기준일시.파일형식
	options.sheetName = shbComm.lang["CO01081"]+"_"+dmData["제목"].replace(/[?*:<>\\\/\[\]\|]/g,"")+"_"+dmData["기준일시"];
	options.fileName = options.sheetName+"."+result.fileExt;//+"_"+shbComm.session.getSession("고객성명");
	options.sheetName = options.sheetName.substring(0,30);
	
	var removeColumns = [];
	var cidArray = result.cid.split(","); 
	for ( var i = 0; i < oGrd.getColumnCount(); i++) {
		var colId = oGrd.getColumnID(i);
		var isRmCol = true;
		for ( var j = 0; j < cidArray.length; j++) {
			if( cidArray[j] == colId ) {
				isRmCol = false;
				break;
			}
		}
		if( isRmCol ) { removeColumns.push(""+i); }
	}
	if( removeColumns.length > 0 ) {
		options.removeColumns = removeColumns;
	}
	var iColCnt = oGrd.getColumnCount();
	var iViewColCnt = iColCnt - removeColumns.length;
	shbComm.session.refreshSession();
	if( "xls" == result.fileExt ) {
		var arrXlsInfo = [];
		var rowIndex = 0;
		arrXlsInfo.push({"rowIndex":rowIndex.toFixed(0),"colIndex":"0","rowSpan":"0","colSpan":iViewColCnt.toFixed(0),"textAlign":"center","fontSize":"14px","fontName":"돋움","fontWeight":"bold","drawBorder":"false","text":dmData["제목"]});
		rowIndex++;//빈줄
		rowIndex++;
		if( !strLib.isEmpty(dmData["계좌번호"]) ) {
			arrXlsInfo.push({"rowIndex":rowIndex.toFixed(0),"colIndex":"0","rowSpan":"0","colSpan":"0","textAlign":"center","fontSize":"10px","fontName":"돋움","fontWeight":"bold","drawBorder":"false","text":shbComm.lang["CO00135"]});
			arrXlsInfo.push({"rowIndex":rowIndex.toFixed(0),"colIndex":"1","rowSpan":"0","colSpan":"0","textAlign":"left","fontSize":"10px","fontName":"돋움","fontWeight":"","drawBorder":"false","text":dmData["계좌번호"]});
			rowIndex++;
		}
		if( !strLib.isEmpty(dmData["조회기간"]) ) {
			arrXlsInfo.push({"rowIndex":rowIndex.toFixed(0),"colIndex":"0","rowSpan":"0","colSpan":"0","textAlign":"center","fontSize":"10px","fontName":"돋움","fontWeight":"bold","drawBorder":"false","text":shbComm.lang["CO01073"]});
			arrXlsInfo.push({"rowIndex":rowIndex.toFixed(0),"colIndex":"1","rowSpan":"0","colSpan":"0","textAlign":"left","fontSize":"10px","fontName":"돋움","fontWeight":"","drawBorder":"false","text":dmData["조회기간"]});
			rowIndex++;
		}
		if( !strLib.isEmpty(dmData["총건수"]) ) {
			arrXlsInfo.push({"rowIndex":rowIndex.toFixed(0),"colIndex":"0","rowSpan":"0","colSpan":"0","textAlign":"center","fontSize":"10px","fontName":"돋움","fontWeight":"bold","drawBorder":"false","text":shbComm.lang["CO01074"]});
			arrXlsInfo.push({"rowIndex":rowIndex.toFixed(0),"colIndex":"1","rowSpan":"0","colSpan":"0","textAlign":"left","fontSize":"10px","fontName":"돋움","fontWeight":"","drawBorder":"false","text":dmData["총건수"]});
			rowIndex++;
		}
		rowIndex++;//빈줄
		options.startRowIndex = rowIndex.toFixed(0);
		if( isFormatNumberExtraction ) { 
			shbComm.excelDownFormatNumberExtraction(oGrd); 
			options.numberToText = "false";
		}
		oGrd.advancedExcelDownload(options, arrXlsInfo);
	} else {
		options.hidden="1";
		oGrd.saveCSV(options);
	}
};
shbComm.gridExcelFormatRemove = function(gridId) {
	var mapInfo = shbComm.grdBtnComp.findWfrIdInDivMapInfo(gridId);
	if( jsonLib.isNullObj(mapInfo) || jsonLib.isNullObj(mapInfo.downloadOption) ){ return; }
	var dnOption = mapInfo.downloadOption;
	var isFormatNumberExtraction = false;
	if( !jsonLib.isNullObj(mapInfo.downloadOption.isFormatNumberExtraction) ) {
		isFormatNumberExtraction =  WebSquare.util.getBoolean(mapInfo.downloadOption.isFormatNumberExtraction);
	}
	if( isFormatNumberExtraction ) {
		var oGrd = shbComm.getComponent(gridId);
		shbComm.excelDownFormatNumberExtraction(oGrd, "yes");
	}
};
//그리드 엑셀올리기 팝업 열기
shbComm.uploadGrdPop = function(grdId, options, callbackFnNm) {
	var obj = shbComm.getComponent(grdId);
	if( jsonLib.isNullObj(obj) ) { return; }
	var excelData = obj.getExcelUploadInfo(options);
	excelData.gridID = grdId;
	excelData.processMsg = "Processing..";
	var option = {
		 "title":shbComm.lang["CO01082"]
		,"w2xPath":shbComm.getSubContextPath() +"/include/popup/CO00041RP.xml"
		,"width":"492"
		,"height":"300"
		,"callback":callbackFnNm
		,"dataObject":excelData
	};
	shbComm.openPopup(option);
};
//그리드 행갯수 조정
shbComm.setViewGrdRow = function(grdId, rowCnt) {
	var oGrd = shbComm.getComponent(grdId);
	if( jsonLib.isNullObj(oGrd) ){ return; }
	var oDl = shbComm.getGridViewDataList(grdId);
	var iHeaderHeight = shbComm.GRID_ROW_HEAD_HEIGHT; 
	var iRowHeight = shbComm.GRID_ROW_HEIGHT;
	var iFooterHeight = 0;
	var iRowPerLine = 1;
	var iScrollXHeight = WebSquare.util.parseInt(strLib.getNumberOnly($("#"+grdId+"_scrollX_div").css("height")),0);

	//그리드 전체보기 row hide 수정
	var dlCnt = oDl.getRowCount();
	$("#"+grdId+"_main_div tbody tr").each(function(idx) {
		if(idx < dlCnt && this.className.indexOf("w2grid_hidedRow") > -1 ) {
			this.style.display = "";
			this.className = this.className.replace("w2grid_hidedRow", "");
		}
	});
	
	//	$("#"+grdId+" .w2grid_hidedRow").css({"display":""});
	//	$("#"+grdId+" .w2grid_hidedRow").removeClass("w2grid_hidedRow");

	if( oGrd.hasFooter ) { iFooterHeight = shbComm.GRID_FOOTER_HEIGHT; }
	if( oGrd.hasClass('grStyle01') ) {//퇴직연금
		/*var PE_GRID_ROW_HEAD_HEIGHT = 27;
		iHeaderHeight = PE_GRID_ROW_HEAD_HEIGHT;
		if( oGrd.hasClass('hrowH2') ) {
			iHeaderHeight = PE_GRID_ROW_HEAD_HEIGHT*2+1;//border 1px
		} else if( oGrd.hasClass('hrowH3') ) {
			iHeaderHeight = PE_GRID_ROW_HEAD_HEIGHT*3+2;//border 2px
		}*/
		//퇴직연금은 thead 높이를 사용한다.
		iHeaderHeight = WebSquare.util.parseInt(strLib.getNumberOnly($('#'+grdId+' thead.gridHeaderTableDefault').css('height')));
		if( !numLib.isInt(iHeaderHeight) ) { iHeaderHeight = 0; } else { iHeaderHeight = iHeaderHeight+1; }//border 1px 보정
		if( oGrd.hasClass('rowH2') ) {
			iRowHeight = 76;
		} else if( oGrd.hasClass('rowH3') ) {
			iRowHeight = 101;
		} else if( oGrd.hasClass('rowH4') ) {
			iRowHeight = 126;
		} else {
			iRowHeight = 51;
		}
		/*
		if( oGrd.hasClass('rowH2') ) {
			iRowHeight = 48;
		} else if( oGrd.hasClass('rowH3') ) {
			iRowHeight = 74;
		} else if( oGrd.hasClass('rowH4') ) {
			iRowHeight = 102;
		} else {
			iRowHeight = 34;
		}
		*/
		if( oGrd.hasClass('rowPerLine2') ) {
			iRowPerLine = 2;  
		} else if( oGrd.hasClass('rowPerLine3') ) {
			iRowPerLine = 3;
		}
		if( oGrd.hasFooter ) { iFooterHeight = 61; }
	} else {
		if( oGrd.hasClass('multiBody') || oGrd.hasClass('multiHeader') ){
			if( oGrd.hasClass('hrowH2') ) {
				iHeaderHeight = (shbComm.GRID_ROW_HEAD_HEIGHT-13)*2+1;//border 1px
			} else if( oGrd.hasClass('hrowH3') ) {
				iHeaderHeight = (shbComm.GRID_ROW_HEAD_HEIGHT-13)*3+2;//border 2px
			}
		} else {
			if( oGrd.hasClass('hrowH2') ) {
				iHeaderHeight = shbComm.GRID_ROW_HEAD_HEIGHT*2+1;//border 1px
			} else if( oGrd.hasClass('hrowH3') ) {
				iHeaderHeight = shbComm.GRID_ROW_HEAD_HEIGHT*3+2;//border 2px
			}
		}
		if( oGrd.hasClass('rowH2') ) {
			iRowHeight = shbComm.GRID_TWO_ROW_HEIGHT;
		} else if( oGrd.hasClass('rowH3') ) {
			iRowHeight = shbComm.GRID_THR_ROW_HEIGHT;
		} else if( oGrd.hasClass('rowH4') ) {
			iRowHeight = shbComm.GRID_FOU_ROW_HEIGHT;
		}
		if( oGrd.hasClass('rowPerLine2') ) {
			iRowPerLine = 2;  
		} else if( oGrd.hasClass('rowPerLine3') ) {
			iRowPerLine = 3;
		}
	}
	//브라우저별 보정치 조정
	var iCorrectHeight = 0;
	if( WebSquare.util.isIEAllVersion() || WebSquare.util.isSpartan() ) {//ie or edge
		iCorrectHeight = 2;
	} else if( WebSquare.util.isFF() ) {//firefox
		iCorrectHeight = 1;
	}

	var iViewRow = WebSquare.util.parseInt(rowCnt,0);
	if( iViewRow == 99 ) {
		iViewRow = oDl.getRowCount();
		//스크롤 된 상태에서 그리드 전체보기로 높이를 늘리면 현재 스크롤된 만큼 비워보여서 스크롤을 0으로 올리고 높이조절 하도록 함
		oGrd.setTopRowIndex(0);
		//oGrd.setScrollTop(0);
		//oGrd.drawData(0,0);
	} else if( oDl.getRowCount() < iViewRow ) {
		iViewRow = oDl.getRowCount();
		oGrd.setTopRowIndex(0);
	} else {
		var iEndTopRowIndex = oDl.getRowCount() - iViewRow
		if( oGrd.getTopRowIndex() > iEndTopRowIndex ){
			oGrd.setTopRowIndex(iEndTopRowIndex);
		}
	}
	if( iViewRow == 0 ) {
		var iNewHeight = 151 + iHeaderHeight + iFooterHeight;
	} else {
		var iNewHeight = (iViewRow * iRowPerLine * iRowHeight) + iHeaderHeight + iFooterHeight + iScrollXHeight + iCorrectHeight;
	}
	oGrd.setGridHeight(iNewHeight);
	shbComm.grdBtnComp.controlSearchAfterGrd(grdId);
	if( !jsonLib.isNullObj(shbComm.getComponent("wfr_footer_product")) && "none" != wfr_footer_product.getStyle("display") ) {
		var iGap = $(document).height() - $("#footer").outerHeight() - $(window).height();
		var iSTop = $(window).scrollTop();
		var bViewToday = (iSTop > iGap ? true : false);
		var oCss = {"position":"fixed","bottom":0};
		if( bViewToday ) { oCss  = {"position":"absolute","bottom":iGap*-1}; }
		$('.goodsListWrap').css(oCss);
	}
};
//그리드 높이 조정 - 조회후 사용
shbComm.setGrdHeightOnResult = function(grdId, viewRowCnt) {
	var mapInfo = shbComm.grdBtnComp.findWfrIdInDivMapInfo(grdId);
	var viewCnt = "";
	if( !jsonLib.isNullObj(mapInfo) ) {
		var oViewRowCnt = shbComm.getComponent(mapInfo.wfrId+"_"+shbComm.grdBtnComp.divMapInfo.J);
		var viewCnt = oViewRowCnt.getValue();
		if( oViewRowCnt.getStyle("display") == "none" ) {
			viewCnt = "99"
		}
	} else {//기본은 전체보기 모드, 고정로우로 할때는 viewRowCnt
		viewCnt = "99";
		if( !strLib.isEmpty(viewRowCnt) ) { viewCnt = viewRowCnt; }
	}
	var oGrd = shbComm.getComponent(grdId);
	if( !jsonLib.isNullObj(oGrd) && !oGrd.hasClass('off') ) {
		oGrd.addClass("off");
	}
	if( strLib.isEmpty(oGrd.getAttribute("visibleRowNum")) ) {
		shbComm.setViewGrdRow(grdId, viewCnt);
	}
};
//그리드 높이 조정 - 조회후 사용 NoData 메시지 보이도록 빈배열 세팅 포함
shbComm.setGrdHeightOnResultNoData = function(grdId, viewRowCnt) {
	shbComm.setGrdHeightOnResult(grdId, viewRowCnt);
	var oDl = shbComm.getGridViewDataList(grdId);
	if( !jsonLib.isNullObj(oDl) && 0 == oDl.getTotalRow() && "dataList" == oDl.getObjectType()) {
		oDl.setJSON([]);
	}
}
//private 뱅킹메인화면 그리드 건수 변경 - 메인화면에서만 사용할것
shbComm.changeMainGrdVisibleRow = function(btnAllId, grdId, value){
	var oGrd = shbComm.getComponent(grdId);
	var oDl = shbComm.getGridViewDataList(grdId);
	var oBtnAll = shbComm.getComponent(btnAllId);
	var defaultRowCnt = 5;
	var sFixRowCnt = ""+defaultRowCnt;
	if( !jsonLib.isNullObj(oGrd) && !oGrd.hasClass('off') ) {
		oGrd.addClass("off");
	}
	if( !strLib.isEmpty(value) ) {
		sFixRowCnt = value;
	}
	if( oDl.getTotalRow() > WebSquare.util.parseInt(defaultRowCnt,0) ) {
		if( "none" == oBtnAll.getStyle("display") ) oBtnAll.show("");
		var arrTmp = oBtnAll.getChildren();
		var oAll, oFive;
		if( arrTmp.length > 1 ) {
			oAll = arrTmp[0];
			oFive = arrTmp[1];
		}
		if( "99" == sFixRowCnt ) {
			if( !jsonLib.isNullObj(oAll) && "none" != oAll.getStyle("display") ) { 
				oAll.hide();
			}
			if( !jsonLib.isNullObj(oFive) && "none" == oFive.getStyle("display") ) { 
				oFive.show("");
			}
		} else {
			if( !jsonLib.isNullObj(oAll) && "none" == oAll.getStyle("display") ) { 
				oAll.show("");
			}
			if( !jsonLib.isNullObj(oFive) && "none" != oFive.getStyle("display") ) { 
				oFive.hide("");
			}
		}
	} else {
		if( "none" != oBtnAll.getStyle("display") ) oBtnAll.hide();
	}
	shbComm.setViewGrdRow(grdId, value);
};
//그리드 행추가
shbComm.insertRowGrd = function(grdId){
	var oDl = shbComm.getGridViewDataList(grdId);
	if( !jsonLib.isNullObj(oDl) ) {
		oDl.insertRow();
	}
};
//그리드 행삭제
shbComm.deleteRowGrd = function(grdId, chkColumnId){
	shbComm.classDeleteRowGrd().confirmDelete(grdId, chkColumnId);
};
//private 그리드 실제 행삭제
shbComm.exceuteGrdDeleteRow = function(grdId, chkColumnId, callbackFnNm) {
	var oGrd = shbComm.getComponent(grdId);
	var oDl = shbComm.getGridViewDataList(grdId);
	if( jsonLib.isNullObj(oGrd) || jsonLib.isNullObj(oDl) ) { return; }
	var arrChkIndex = oGrd.getCheckedIndex(chkColumnId);
	for ( var i = arrChkIndex.length-1; i >= 0; i--) {
		var row = oGrd.getRealRowIndex(arrChkIndex[i]);
		if( "C" == oDl.getRowStatus(row) ) { //새로 생성된 Row
			oDl.removeRow(row);
		} else {
			oDl.deleteRow(row);
		}
	}
	oDl.removeColumnFilter(chkColumnId);
	oDl.setColumnFilter({type:'regExp', colIndex:chkColumnId, key:/0|^$/gi, condition:'and'});
	if( oGrd.getRowCount() == 0 ) {
		$('#'+grdId+' .grdNoresultMsg').css('display','none');
	}
	if( !strLib.isEmpty(callbackFnNm) && etcLib.isFunction(callbackFnNm) ){
		etcLib.getFunction(callbackFnNm)("B");
	}
};
//private 그리드 행삭제 Class
shbComm.classDeleteRowGrd = function(){
	var _a = null;
	var _b = null;
	var _c = null;
	function confirmDelete(pGrdId, pChkColumnId){
		_a = pGrdId;
		_b = pChkColumnId;
		var oGrd = shbComm.getComponent(_a);
		var oDl = shbComm.getGridViewDataList(_a);
		var mapInfo = shbComm.grdBtnComp.findWfrIdInDivMapInfo(pGrdId);
		if( !jsonLib.isNullObj(mapInfo) && !strLib.isEmpty(mapInfo.callbackFn) ) {
			_c = mapInfo.callbackFn;
		}
		if( jsonLib.isNullObj(oGrd) || jsonLib.isNullObj(oDl) ) { return; }
		var arrChkIndex = oGrd.getCheckedIndex(_b);
		if( arrChkIndex.length < 1 ) {
			shbComm.alert(shbComm.lang["CO01039"]);
			return;
		}
		shbComm.confirm(shbComm.lang["CO01048"], callbackConfirm);
		return;
	}
	function callbackConfirm(){
		shbComm.exceuteGrdDeleteRow(_a, _b, _c);
	}
	return {"confirmDelete":confirmDelete};
};
//조회중입니다 메시지 컨트롤
shbComm.viewSearchingGrdMsg = function(grdId){
	var oGrd = shbComm.getComponent(grdId);
	//그리드 너무 작으면 기본 높이 만큼 늘려줌
	if( jsonLib.isNullObj(oGrd) ){ return; }
	//검색버튼 초기화
	shbComm.clearSearchGrd(grdId);
	var iHeaderHeight = shbComm.GRID_ROW_HEAD_HEIGHT; 
	var iFooterHeight = 0;
	if( oGrd.hasFooter ) { iFooterHeight = shbComm.GRID_FOOTER_HEIGHT; }
	var iScrollXHeight = WebSquare.util.parseInt(strLib.getNumberOnly($("#"+grdId+"_scrollX_div").css("height")),0);
	if( oGrd.hasClass('grStyle01') ) {//퇴직연금
		var PE_GRID_ROW_HEAD_HEIGHT = 27;
		if( oGrd.hasClass('hrowH2') ) {
			iHeaderHeight = PE_GRID_ROW_HEAD_HEIGHT*2+1;//border 1px
		} else if( oGrd.hasClass('hrowH3') ) {
			iHeaderHeight = PE_GRID_ROW_HEAD_HEIGHT*3+2;//border 2px
		}
	} else {
		if( oGrd.hasClass('multiBody') || oGrd.hasClass('multiHeader') ){
			if( oGrd.hasClass('hrowH2') ) {
				iHeaderHeight = (shbComm.GRID_ROW_HEAD_HEIGHT-13)*2+1;//border 1px
			} else if( oGrd.hasClass('hrowH3') ) {
				iHeaderHeight = (shbComm.GRID_ROW_HEAD_HEIGHT-13)*3+2;//border 2px
			}
		} else {
			if( oGrd.hasClass('hrowH2') ) {
				iHeaderHeight = shbComm.GRID_ROW_HEAD_HEIGHT*2+1;//border 1px
			} else if( oGrd.hasClass('hrowH3') ) {
				iHeaderHeight = shbComm.GRID_ROW_HEAD_HEIGHT*3+2;//border 2px
			}
		}
	}
	var iNewHeight = 151 + iHeaderHeight + iFooterHeight + iScrollXHeight;
	if( iNewHeight > WebSquare.util.parseInt(oGrd.getSize("height"),0) ) {
		oGrd.setGridHeight(iNewHeight);
	}
	
	oGrd.removeClass("off");
	if( !jsonLib.isNullObj(oGrd) && !oGrd.hasClass('grdSearchingMsg') ) {
		oGrd.addClass("grdSearchingMsg");
	}
	
};
/* ***** DIV ***** */
shbComm.setFromToDate = function(objId, frObjId, toObjId, baseDate) {
	var obj = shbComm.getComponent(objId);
	var ofr = shbComm.getComponent(frObjId);
	var oto = shbComm.getComponent(toObjId);
	if( jsonLib.isNullObj(obj) || jsonLib.isNullObj(ofr) || jsonLib.isNullObj(oto) ) { return; }
	var sValue = obj.getValue();
	if( strLib.isEmpty(sValue) || sValue.length < 2 ){ return; }
	var sGbnVal = sValue.substring(0,1);
	var sAddVal = sValue.substring(1);
	var sToDate = (strLib.isEmpty(baseDate) ? shbComm.getCurrentServerDate() : baseDate);
	var sFrDate = dateLib.addDateLastDayMonth(sGbnVal, WebSquare.util.parseInt(sAddVal,0)*-1, sToDate);
	ofr.setValue(sFrDate);
	oto.setValue(sToDate);
};

shbComm.setFromToDateMira = function(objId, frObjId, toObjId, baseDate) {
	var obj = shbComm.getComponent(objId);
	var ofr = shbComm.getComponent(frObjId);
	var oto = shbComm.getComponent(toObjId);
	if( jsonLib.isNullObj(obj) || jsonLib.isNullObj(ofr) || jsonLib.isNullObj(oto) ) { return; }
	var sValue = obj.getValue();
	if( strLib.isEmpty(sValue) || sValue.length < 2 ){ return; }
	var sGbnVal = sValue.substring(0,1);
	var sAddVal = sValue.substring(1);
	var sFrDate = (strLib.isEmpty(baseDate) ? shbComm.getCurrentServerDate() : baseDate);
	var sToDate = dateLib.addDateLastDayMonth(sGbnVal, WebSquare.util.parseInt(sAddVal,0), sFrDate);
	ofr.setValue(sFrDate);
	oto.setValue(sToDate);
};
//년, 월 컴포넌트로 form, to 날짜 세팅
shbComm.setFromToDateYM = function(yearObjId, monthObjId, frObjId, toObjId, baseDate, mira) {
	var oy = shbComm.getComponent(yearObjId);
	var om = shbComm.getComponent(monthObjId);
	var ofr = shbComm.getComponent(frObjId);
	var oto = shbComm.getComponent(toObjId);
	if( jsonLib.isNullObj(oy) || jsonLib.isNullObj(om) || jsonLib.isNullObj(ofr) || jsonLib.isNullObj(oto) ) { return; }
	if( strLib.isEmpty(baseDate) ) { baseDate = shbComm.getCurrentServerDate(); }
	if( jsonLib.isNullObj(mira) ) { mira = false; }
	var sYM = oy.getValue() + strLib.fillZero(om.getValue(),2);
	var cYM = baseDate.substring(0,6);
	var sStaDay = "01";
	var sEndDay = dateLib.getLastDayInMonth(WebSquare.util.parseInt(oy.getValue(), 0),WebSquare.util.parseInt(om.getValue(), 0));
	if( mira ) {
		if( sYM < cYM ) {
			shbComm.alert(shbComm.lang["CO01042"]);
			return;
		}
		if( sYM == cYM ) { sStaDay = baseDate.substring(6,8); }
	} else {
		if( sYM > cYM ) {
			shbComm.alert(shbComm.lang["CO01043"]);
			return;
		}
		if( sYM == cYM ) { sEndDay = baseDate.substring(6,8); }
	}
	ofr.setValue(sYM+sStaDay);
	oto.setValue(sYM+sEndDay);
};
// 사용안함 이체금액 금액이 radio였을때
shbComm.addAmt = function(thisId, tgtId, allAmtObjId){
	var value = shbComm.getComponent(thisId).getValue();
	var oTgt = shbComm.getComponent(tgtId);
	if( jsonLib.isNullObj(oTgt) ){ return; }
	if( numLib.isInt(value) ) {
		var iCalcAmt = WebSquare.util.parseInt(oTgt.getValue(), 0) + WebSquare.util.parseInt(value, 0);
		oTgt.setValue(""+iCalcAmt);
	} else if( !strLib.isEmpty(value) ) { 
		if( "A" == value ) {
			var oAllAmt = shbComm.getComponent(allAmtObjId);
			if( !jsonLib.isNullObj(oAllAmt) ) {
				oTgt.setValue(oAllAmt.getValue());
			}
		} else if( "C" == value ) {
			oTgt.setValue("");
		}
	}
};
// 아이디 값에서 더할 값을 추출해서 처리하도록 함 금액부만 숫자로 붙이고 그외에는 숫자를 쓰면 안됨
shbComm.addFixAmt = function(thisId, tgtId, allAmtObjId){
	if( strLib.isEmpty(thisId) || strLib.isEmpty(tgtId) ) return;
	var value = strLib.getNumberOnly(thisId);
	if( strLib.isEmpty(value) ) {
		if( thisId.length-2 == thisId.indexOf("_A") ) value = "A";
		else if( thisId.length-2 == thisId.indexOf("_C") ) value = "C";
	}
	var oTgt = shbComm.getComponent(tgtId);
	if( jsonLib.isNullObj(oTgt) ){ return; }
	if( numLib.isInt(value) ) {
		var iCalcAmt = WebSquare.util.parseInt(oTgt.getValue(), 0) + WebSquare.util.parseInt(value, 0);
		oTgt.setValue(""+iCalcAmt);
	} else if( !strLib.isEmpty(value) ) { 
		if( "A" == value ) {
			var oAllAmt = shbComm.getComponent(allAmtObjId);
			if( !jsonLib.isNullObj(oAllAmt) ) {
				oTgt.setValue(oAllAmt.getValue());
			}
		} else if( "C" == value ) {
			oTgt.setValue("");
		}
	}
};
//checkbox, radio, selectbox 라벨을 value로 세팅
shbComm.copyLabelText = function(oriId, tgtId){
	shbComm.getComponent(tgtId).setValue(shbComm.getComponent(oriId).getText());
};
//년도 더하기 
shbComm.addYear = function(tgtId, addValue) {
	var oTgt = shbComm.getComponent(tgtId);
	if( !strLib.isEmpty(oTgt.getValue()) ) {
		var val = (WebSquare.util.parseInt(oTgt.getValue(), 0) + addValue)
		var min = oTgt.getAttribute("minYear")||1900;
		var max = oTgt.getAttribute("maxYear")||2099;
		if( min <= val && val <= max ) {
			oTgt.setValue(val);
		}
	}
};
//월더하기
shbComm.addMonth = function(tgtId, addValue) {
	var oTgt = shbComm.getComponent(tgtId);
	if( !strLib.isEmpty(oTgt.getValue()) ) {
		var iVal = WebSquare.util.parseInt(oTgt.getValue(), 0) + addValue;
		if (iVal < 1) {
			iVal = 12;
		} else if (iVal > 12) {
			iVal = 1;
		}
		oTgt.setValue(iVal);
	}
};
//숫자를 한글로 세팅
shbComm.numToHan = function(oriId, tgtId) {
	try {
		var oOri = shbComm.getComponent(oriId);
		if( jsonLib.isNullObj(oOri) ){ return; }
		if( !strLib.isEmpty(tgtId) ) {
			var oTgt = shbComm.getComponent(tgtId);
		} else {
			var oTgt = shbComm.getComponent(oriId+"_korDesc");
		}
		if( jsonLib.isNullObj(oTgt) ){ return; }
		var sVal = shbComm.getComponent(oriId).getValue();
		if( !strLib.isEmpty(sVal) && strLib.isMoney(sVal) ) {
			if( "0" == sVal ) oOri.setValue("");
			oTgt.setValue(numLib.moneyToHan(numLib.unformatComma(sVal)));
		} else {
			oTgt.setValue("");
		}
	} catch(e) {
		shbComm.printStackTrace(e);
	}
};

// 조회영역 calender object
shbComm.calendarComp = {};

// calendar object initailize
shbComm.calendarComp.initialize = function(o){
	var defaultOption = {
		useItem : "",
		useYearMonth : false,
		currentDate : "",
		frRef : "",
		toRef : "",
		isMira : false,
		isValidation : false,
		isCheckPastFuture : true,//과거/미래 일자 체크 여부
		hasDefault : true,
		setDefault : "",
		callbackGiganClick:""
	};
	
	var option = $.extend({}, defaultOption, o);
	
	var frComp = shbComm.getComponent(option.wfrId + "_ica_fr");
	var toComp = shbComm.getComponent(option.wfrId + "_ica_to");
	var btnChoiceMonth = shbComm.getComponent(option.wfrId + "_btnChoiceMonth");
		btnChoiceMonth.setValue(shbComm.lang["CO01107"]);
	if (!option.currentDate) {
		option.currentDate = shbComm.getCurrentServerDate();
	}
	if (option.frRef) {
		frComp.setRef(option.frRef);
	}
	if (option.toRef) {
		toComp.setRef(option.toRef);
	}
	if (option.isValidation || option.isValidation == "true") {
		frComp.setAttribute('validation', 'DEFAULT:'+shbComm.lang["CO01088"]+';DATE:'+shbComm.lang["CO01088"]);
		toComp.setAttribute('validation', 'DEFAULT:'+shbComm.lang["CO01089"]+';DATE:'+shbComm.lang["CO01089"]);
	}
	shbComm.calendarComp.divMapInfo = shbComm.calendarComp.divMapInfo || {};
	shbComm.calendarComp.divMapInfo[option.wfrId] = option;
	shbComm.calendarComp.controlDivGigan(option);
	if( !strLib.isEmpty(option.setDefault) ) {
		var oSbx = shbComm.getComponent(option.wfrId+"_"+"rad_gigan");
		oSbx.setValue(option.setDefault);
	} else {
		if (option.hasDefault != false && option.hasDefault != "false") {
			frComp.setValue(option.currentDate);
			toComp.setValue(option.currentDate);
		}
	}
	if (option.useYearMonth == true || option.useYearMonth == "true") {
		var grpYearMonthComp = shbComm.getComponent(option.wfrId+"_grp_yearMonth");
		//if (option.hasDefault != false && option.hasDefault != "false") {
			var yearComp = shbComm.getComponent(option.wfrId+"_ibx_year");
			var monthComp = shbComm.getComponent(option.wfrId+"_ibx_month");
			yearComp.setValue(option.currentDate.substr(0, 4));
			monthComp.setValue(parseInt(option.currentDate.substr(4, 2),10));
		//}
		grpYearMonthComp.show();
	}
};
//private 기간 버튼 셋팅
shbComm.calendarComp.controlDivGigan = function(option){
	var oSbx = shbComm.getComponent(option.wfrId+"_"+"rad_gigan");
	oSbx.removeAll();
	var arrItem = option.useItem.split(":");
	for ( var i	 = 0; i < arrItem.length; i++) {
		if( "cd" == arrItem[i] ) {
			oSbx.addItem(arrItem[i], shbComm.lang["CO01083"], i); 
		//} else if( "zz" == arrItem[i] ) { //20170321 미기장내역 사용안함
		//	oSbx.addItem(arrItem[i], "미기장내역", i);
		} else {
			var gbn = arrItem[i].substring(0,1);
			var val = arrItem[i].substring(1);
			if( "y" == gbn ) {
				oSbx.addItem(arrItem[i], val+shbComm.lang["CO01108"], i);
			} else if( "m" == gbn ) {
				oSbx.addItem(arrItem[i], val+shbComm.lang["CO01085"], i);
			} else if( "d" == gbn ) {
				if( WebSquare.util.parseInt(val, 0)%7 > 0 ) {
					oSbx.addItem(arrItem[i], val+shbComm.lang["CO01086"], i);
				} else {
					val = WebSquare.util.parseInt(val, 0)/7;
					oSbx.addItem(arrItem[i], val+shbComm.lang["CO01087"], i);
				}
			}
		}
	}
	if( pubApp && pubApp.initRadioGrp ) { pubApp.initRadioGrp(); }
};
//기간 버튼 변경
shbComm.calendarComp.rad_gigan_onchange = function() {
	var sWfrId = this.id.substring(0, this.id.indexOf("rad_gigan")-1);
	var mapInfo = shbComm.calendarComp.divMapInfo[sWfrId];
	if( jsonLib.isNullObj(mapInfo.isMira) ) mapInfo.isMira = false;
	if( !mapInfo.isMira ) {
		shbComm.setFromToDate(this.id,sWfrId+"_"+"ica_fr",sWfrId+"_"+"ica_to",mapInfo.currentDate);
	} else {
		shbComm.setFromToDateMira(this.id,sWfrId+"_"+"ica_fr",sWfrId+"_"+"ica_to",mapInfo.currentDate);
	}
};
// 기간버튼 클릭 이벤트
shbComm.calendarComp.rad_gigan_onviewchange = function() {
	var sWfrId = this.id.substring(0, this.id.indexOf("rad_gigan")-1);
	var mapInfo = shbComm.calendarComp.divMapInfo[sWfrId];
	if( !strLib.isEmpty(mapInfo.callbackGiganClick) && etcLib.isFunction(mapInfo.callbackGiganClick) ){
		etcLib.getFunction(mapInfo.callbackGiganClick)();
	}
};
// validation check
shbComm.calendarComp.checkValidDate = function() {
	var sWfrId;
	if (this.id.indexOf("ica_fr") > -1) {
		sWfrId = this.id.substring(0, this.id.indexOf("ica_fr")-1);
	} else if (this.id.indexOf("ica_to") > -1) {
		sWfrId = this.id.substring(0, this.id.indexOf("ica_to")-1);
	}
	var oSbx = shbComm.getComponent(sWfrId+"_"+"rad_gigan");
	if( !jsonLib.isNullObj(oSbx) ){ oSbx.setValue(""); }
	var mapInfo = shbComm.calendarComp.divMapInfo[sWfrId];
	var frComp = shbComm.getComponent(sWfrId + "_ica_fr");
	var toComp = shbComm.getComponent(sWfrId + "_ica_to");
	var frDate = frComp.getValue();
	var toDate = toComp.getValue();
	var min = frComp.getAttribute("minYear")||1900;
	var max = frComp.getAttribute("maxYear")||2099;
	if( !strLib.isEmpty(frDate) ) {
		if( !shbComm.VALIDATION_DATE(frComp.id, shbComm.lang["CO01088"]) ) {
			frComp.setValue('');
			return;
		}
	}
	if( !strLib.isEmpty(toDate) ) {
		if( !shbComm.VALIDATION_DATE(toComp.id, shbComm.lang["CO01089"]) ) {
			toComp.setValue('');
			return;
		}
	}
	var bError = false;
	var oError = null;
	if( mapInfo.isCheckPastFuture ) {
		if( mapInfo.isMira || mapInfo.isMira == "true" ) {
			if (frDate && frDate < mapInfo.currentDate) {
				frComp.setValue('');
				bError = true;
				oError = frComp;
			}
			if (toDate && toDate < mapInfo.currentDate) {
				toComp.setValue('');
				bError = true;
				oError = oError || toComp
			}
			if( bError ) {
				shbComm.alert(shbComm.lang["CO01042"], oError.id);
				return;
			}
		} else {
			if (frDate && frDate > mapInfo.currentDate) {
				frComp.setValue('');
				bError = true;
				oError = frComp;
			}
			if (toDate && toDate > mapInfo.currentDate) {
				toComp.setValue('');
				bError = true;
				oError = oError || toComp;
			}
			if( bError ) {
				shbComm.alert(shbComm.lang["CO01043"], oError.id);
				return;
			}
		}
	}
	if (frDate == "" || toDate == "") return;
	if(parseInt(frDate, 10) > parseInt(toDate, 10)) {
		this.setValue('');
		shbComm.alert(shbComm.lang["CO01044"]);
		return;
	}
};
// 년 변경
shbComm.calendarComp.yearChange = function() {
	if (this.id.indexOf("btn_prevYear") > -1) {
		var sWfrId = this.id.substring(0, this.id.indexOf("btn_prevYear")-1);
		shbComm.addYear(sWfrId + "_ibx_year", -1);
	} else if (this.id.indexOf("btn_nextYear") > -1) {
		var sWfrId = this.id.substring(0, this.id.indexOf("btn_nextYear")-1);
		shbComm.addYear(sWfrId + "_ibx_year", 1);
	}
};
// 월변경
shbComm.calendarComp.monthChange = function() {
	if (this.id.indexOf("btn_prevMonth") > -1) {
		var sWfrId = this.id.substring(0, this.id.indexOf("btn_prevMonth")-1);
		shbComm.addMonth(sWfrId + "_ibx_month", -1);
	} else if (this.id.indexOf("btn_nextMonth") > -1) {
		var sWfrId = this.id.substring(0, this.id.indexOf("btn_nextMonth")-1);
		shbComm.addMonth(sWfrId + "_ibx_month", 1);
	}
};
// 사용자 validation
shbComm.calendarComp.isValid = function(wfrId) { 
	var vaidateGroup = shbComm.getComponent(wfrId + "_calendarGroup");
	return shbComm.validateGroup(vaidateGroup);
};
shbComm.calendarComp.getFromValue = function(wfrId) { 
	var fromComp = shbComm.getComponent(wfrId + "_ica_fr");
	return fromComp.getValue();
};
shbComm.calendarComp.getToValue = function(wfrId) { 
	var toComp = shbComm.getComponent(wfrId + "_ica_to");
	return toComp.getValue();
};
shbComm.calendarComp.setFromValue = function(wfrId, value) { 
	var fromComp = shbComm.getComponent(wfrId + "_ica_fr");
	fromComp.setValue(value);
};
shbComm.calendarComp.setToValue = function(wfrId, value) { 
	var toComp = shbComm.getComponent(wfrId + "_ica_to");
	toComp.setValue(value);
};
shbComm.calendarComp.getFormattedFromValue = function(wfrId) { 
	var fromComp = shbComm.getComponent(wfrId + "_ica_fr");
	return fromComp.getFormattedValue();
};
shbComm.calendarComp.getFormattedToValue = function(wfrId) { 
	var toComp = shbComm.getComponent(wfrId + "_ica_to");
	return toComp.getFormattedValue();
};
// 월별선택
shbComm.calendarComp.monthChoiceClick = function() {
	var sWfrId = this.id.substring(0, this.id.indexOf("btnChoiceMonth")-1);
	var mapInfo = shbComm.calendarComp.divMapInfo[sWfrId];
	if( jsonLib.isNullObj(mapInfo.isMira) ) mapInfo.isMira = false;
	var year = shbComm.getComponent(sWfrId + "_ibx_year");
	var month = shbComm.getComponent(sWfrId + "_ibx_month");
	if (year.getValue() != "" && month.getValue() != "") {
		var oSbx = shbComm.getComponent(sWfrId+"_"+"rad_gigan");
		if( !jsonLib.isNullObj(oSbx) ){ oSbx.setValue(""); }
		shbComm.setFromToDateYM(sWfrId + "_ibx_year", sWfrId + "_ibx_month", sWfrId + "_ica_fr", sWfrId + "_ica_to", mapInfo.currentDate, mapInfo.isMira);
	}
	//shbComm.setFromToDateYM(sWfrId + "_ibx_year", sWfrId + "_ibx_month", sWfrId + "_ica_fr", sWfrId + "_ica_to", mapInfo.currentDate);
};
//팝업 공통 버튼 영역
shbComm.popBtnComp = {};
//var option = {"notUse":"","reportId":"","dcNms":""};
shbComm.popBtnComp.initialize = function(option){
	if( jsonLib.isNullObj(shbObj) || jsonLib.isNullObj(shbComm.popBtnComp) ){ return; }
	shbObj.divPopMapInfo = $.extend({},option);
	btn_popupReport.setValue(shbComm.lang["CO00125"]);
	btn_popupPrint.setValue(shbComm.lang["CO01090"]);
	if( !strLib.isEmpty(shbObj.divPopMapInfo.notUse) ) {
		if("A" == shbObj.divPopMapInfo.notUse ){
			btn_popupReport.hide();
		} else if( "B" == shbObj.divPopMapInfo.notUse ){
			btn_popupPrint.hide();
		}
	}
	grp_popupComBtn.show("");
	if(typeof WebSquare.util.getComponentById( "wfr_poup_btn" ) == "object"){
		wfr_poup_btn.addClass( "on" );
	}
};
//팝업 공통 보고서 출력 버튼 클릭
shbComm.popBtnComp.btn_popupReport_onclick = function(){
	if( jsonLib.isNullObj(shbObj.divPopMapInfo) || strLib.isEmpty(shbObj.divPopMapInfo.reportId) || jsonLib.isNullObj(shbObj.divPopMapInfo.dcNms) ) {
		shbComm.alert(shbComm.lang["CO01045"]);
		return;
	}
	shbComm.reportPrint(shbObj.divPopMapInfo.reportId,shbObj.divPopMapInfo.dcNms);
};
//팝업 공통 화면 출력 버튼 클릭
shbComm.popBtnComp.btn_popupPrint_onclick = function(){
	var sPrtDivId; 
	if( $(".detailPop").length > 0 ) {
		sPrtDivId = $(".detailPop")[0].id;
	} 
	if( strLib.isEmpty(sPrtDivId) && $(".pop_wrap").length > 0 ) {
		sPrtDivId = $(".pop_wrap")[0].id;//퇴직연금
	}
	if( !strLib.isEmpty(sPrtDivId) ) {
		var clientWidth = document.documentElement.clientWidth;
		shbComm.printContent(sPrtDivId, clientWidth);
	}
};
//그리드 context관련 시작
shbComm.hideGridContext = function() {
	if (typeof shbObj.context == "undefined") return;
	for (var layerId in shbObj.context) {
		var layerObj = $w.comp[layerId];
		layerObj.hide();
		$('#'+layerId).removeAttr('tabindex');
		shbComm.moveDesignatedFocus();
		shbObj.context[layerId]["open"] = "false";
	}
	if (window.addEventListener) {
		window.removeEventListener('click', shbComm.onContentClick);
	} else {
		document.detachEvent('onclick', shbComm.onContentClick);
	}
};
shbComm.onContentClick = function(e) {
	if (typeof shbObj.context == "undefined") return;

	var contextLayerId = "gridContextLayer";
	var check = true;
	var eObj = e.target ? e.target : e.srcElement;
	for (var i=0; i < 5; i++) {
		if (shbObj.context[eObj.id]) {
			check = false;
			break;
		} else if (eObj.tagName.toLowerCase() == "body") {
			break;
		} else {
			eObj = eObj.parentElement;
		}
	}
	if (check) {
		shbComm.hideGridContext();
	}
};
shbComm.showGridContext = function(gridObj, row, col, layerId) {
	if (typeof shbObj.context == "undefined") shbObj.context = {};
	shbComm.hideGridContext();
	var gridContextLayer = $w.comp[layerId];
	if (gridContextLayer) {
		gridContextLayer.setStyle("visibility", "hidden");
		gridContextLayer.setStyle("display", "block");
		gridContextLayer.setStyle("position", "absolute");
		//gridContextLayer.setStyle("z-index", 7000);
		gridContextLayer.setStyle("z-index", 91);
		gridContextLayer.setPosition(0, 0);
		var nTopRowIdx = gridObj.getTopRowIndex();
		var row2 = row - nTopRowIdx;
		var nTop = gridObj.getCellPosition(row2, col, "top");
		var nLeft = gridObj.getCellPosition(row2, col, "left");
		var nCellWidth = parseInt(gridObj.getCellSize(row2, col, "width"));
		var nCellheight = parseInt(gridObj.getCellSize(row2, col, "height"));
		var nDataWidth = parseInt(gridObj.getCellData(row2, col).length) * 10;
		var layerWidth = parseInt(gridContextLayer.getStyle("width"), 10);
		var contextHeight = parseInt(gridContextLayer.getStyle("height"), 10);
		var lpadding = parseInt(gridContextLayer.getStyle("padding-left"),10);
		var tpadding = parseInt(gridContextLayer.getStyle("padding-top"),10);
		layerWidth = layerWidth + lpadding + lpadding;
		contextHeight = contextHeight + tpadding + tpadding;
		if ( nCellWidth < nDataWidth ) {
			nLeft = parseInt(nLeft) + nCellWidth + gridObj.getAbsolutePosition("left");
		} else {
			nLeft = parseInt(nLeft) + nDataWidth + gridObj.getAbsolutePosition("left");
		}
		nTop = nTop + gridObj.getAbsolutePosition("top");
		var maxHeight = window.scrollY+document.documentElement.clientHeight;
		var maxWidth = window.scrollX+document.documentElement.clientWidth;
		if (nTop + contextHeight > maxHeight) nTop = maxHeight - contextHeight - 10;
		if (nLeft + layerWidth > maxWidth) nLeft = maxWidth - layerWidth;
		gridContextLayer.setPosition(nLeft, nTop, "absolute");
		gridContextLayer.show();
		shbComm.designateFocus();
		$('#'+layerId).attr('tabindex','0').focus();
		shbObj.context[layerId] = {"gridView":gridObj.id,"row":row,"col":col,"open":"true"};
		$w.setTimeout(shbComm.addGridContextEvent, {
			key : 'gridContext',
			delay : 300,
			callback : function() {
				$w.clearTimeout('gridContext');
			}
		});
	}
};
shbComm.addGridContextEvent = function() {
	if (window.addEventListener) {
		window.removeEventListener('click', shbComm.onContentClick);
		window.addEventListener('click', shbComm.onContentClick, false);
	} else {
		document.detachEvent('onclick', shbComm.onContentClick);
		document.attachEvent('onclick', shbComm.onContentClick);
	}	
};
//그리드 context관련 끝
shbComm.printContent = function(divId, clientWidth) {
	if (typeof PTMPrintWebPage == "undefined") {
		WebSquare.util.js("/sw/printmade/print.js", function() { 
			shbComm.printContentCallback(divId, clientWidth);
		});
	} else {
		shbComm.printContentCallback(divId, clientWidth);
	}
};
shbComm.printContentCallback = function(divId, clientWidth) {
	var obj = $w.comp["layerPopupTitle"];
	var title = shbComm.lang["CO01090"];
	if (obj != undefined) {
		title = layerPopupTitle.getValue()+" "+shbComm.lang["CO01091"];
	}
	var isEng = 0;
	if (shbComm.isEnLanguage()) isEng = 1;
	if (topWin.PTMLIVECHECKFLAG) {
		if (isEng == 1) {
			PTMPrintWebPage({elementid:"#"+divId,ptmeng:1});
		} else {
			PTMPrintWebPage({elementid:"#"+divId});
		}
	} else {
		var width = "1080";
		if (typeof clientWidth != "undefined") width = (clientWidth+25)+"";
		var option = {
			 "title":title
			,"w2xPath":""
			,"width":width
			,"height":"600"
			,"popID":"PTM_Frame"
			,"popupUrl":"/comhtml/printMadeFrame.html?divId="+divId+"&isEng="+isEng};
		shbComm.openPopup(option);
	}
};
shbComm.printContentClose = function() {
	shbComm._closePop("PTM_Frame", null, "", "", true);
	//topWin.$w.closePopup("PTM_Frame");
};
//그리드 context관련 끝
//오픈 차수별로 컴포넌트 display설정
shbComm.hideComponent = function(componentId, openSeq) {
	// 테스트, 운영서버에서만 동작
	if (topWin.IS_DEV === 'T' || topWin.IS_DEV === 'R') {
		var obj = WebSquare.util.getComponentById(componentId);
		if (jsonLib.isNullObj(obj)) return;
		if (openSeq > topWin.shbComm.openSeq) {
			obj.hide();
		}
	}
};
// 차수별 open여부
// true : open, false : hide
shbComm.isOpen = function(openSeq) {
	// 테스트, 운영서버에서만 동작
	if (topWin.IS_DEV === 'T' || topWin.IS_DEV === 'R') {
		return openSeq <= topWin.shbComm.openSeq;
	}
	return true;
};
/*
 * 약관보기
 * - 단건인 경우는 TITLE을 지정하면 약관보기 대신 TITLE을 팝업 TITLE로 지정한다.
 * - 단건인 경우 왼쪽 form 목록을 표시하지 않는다.
 * - 여러건인 경우는 []와 같이 array로 전달한다.
 * - 여러건인 경우 VISIBLE을 true로 지정하면 해당 서식을 우선 선택하고 지정된 것이 없는 경우 첫번째가 표시된다.
 *   ex) shbComm.showPDFViewer([{"FORM_ID":"109692","FORM_CATE_CD":"F03"},{"FORM_ID":"109692","FORM_CATE_CD":"F04","VISIBLE":"true"}], "test");
 *   ex)shbComm.showPDFViewer({"PDF_URL":"http://devimg3.shinhan.com/nexhpe/download/ftpfile/data0/isa_shinhan_hometax_reg.pdf","TITLE":"PDF보기"}, "test");
 */
shbComm.showPDFViewer = function(data, callback) {
	var option = {
//		'title':shbComm.lang["CO01092"]
		'title':' '
		,'w2xPath':shbComm.getSubContextPath() + '/include/popup/CO00039RP.xml'
		,'width':'982'
		,'height':'660'
		,'callback': typeof callback === 'undefined' ? '' : callback
		,'useShow':true
		,'dataObject':data
	};
	shbComm.openPopup(option);
};

/*
 * 자료실 전용 약관보기
 */
shbComm.showSAPFPDFViewer = function(data, callback) {
	var option = {
		'title':' '
		,'w2xPath':shbComm.getSubContextPath() + '/include/popup/CO00048RP.xml'
		,'width':'982'
		,'height':'700'
		,'useShow':true
		,'dataObject':data
	};
	shbComm.openPopup(option);
};
/*
 * 자료실 전용 약관보기
 * - 단건인 경우는 TITLE을 지정하면 약관보기 대신 TITLE을 팝업 TITLE로 지정한다.
 * - 단건인 경우 왼쪽 form 목록을 표시하지 않는다.
 * - 여러건인 경우는 []와 같이 array로 전달한다.
 * - 여러건인 경우 VISIBLE을 true로 지정하면 해당 서식을 우선 선택하고 지정된 것이 없는 경우 첫번째가 표시된다.
 *   ex) shbComm.showPDFViewer([{"FORM_ID":"109692","FORM_CATE_CD":"F03"},{"FORM_ID":"109692","FORM_CATE_CD":"F04","VISIBLE":"true"}], "test");
 *   ex)shbComm.showPDFViewer({"PDF_URL":"http://devimg3.shinhan.com/nexhpe/download/ftpfile/data0/isa_shinhan_hometax_reg.pdf","TITLE":"PDF보기"}, "test");
 */
shbComm.showRDDPDFViewer = function(data, callback) {
	var option = {
		'title':' '
		,'w2xPath':shbComm.getSubContextPath() + '/include/popup/CO00049RP.xml'
		,'width':'982'
		,'height':'660'
		,'callback': typeof callback === 'undefined' ? '' : callback
		,'useShow':true
		,'dataObject':data
	};
	shbComm.openPopup(option);
};

shbComm.raonObjClear = function() {
	var p = new Array();
	for ( var i = 0; i < arguments.length; i++) {
		var t = arguments[i];
		if (typeof t == "string") {
			p.push(t);
		} else {
			p.push(t.id);
		}
	}
	var objIds = p.join("|");
	if (p.length > 0 && typeof raonClear == "function") {
		raonClear(objIds);
	}
};

shbComm.escapeToHTML = function(str) {
	if (typeof str == "string" && str != "") {
		var re1 = /&lt;(br|BR)(\s)*\/?&gt;/g;
		var re2 = /&apos;/g;
		return str.replace( re1 ,"<br/>").replace( re2 ,"'");
	} else {
		return str;
	}
};

shbComm.raonCallback = function(target, keytype) {
	switch(target) {
		case 'ipt_otpNo':
			shbObj.otpTarget = target;
			var length = ipt_otpNo.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_otpNo2');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_otpNo2.setValue(value);
			break;
		case 'ipt_otpNo2':
			shbObj.otpTarget = target;
			var length = ipt_otpNo2.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_otpNo');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_otpNo.setValue(value);
			break;
		case 'ipt_smartCardNo':
			shbObj.otpTarget = target;
			var length = ipt_smartCardNo.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_smartCardNo1');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_smartCardNo1.setValue(value);
			break;
		case 'ipt_smartCardNo1':
			shbObj.otpTarget = target;
			var length = ipt_smartCardNo1.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_smartCardNo');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_smartCardNo.setValue(value);
			break;
		case 'ipt_secNo11':
			shbObj.sCardTarget1 = target;
			var length = ipt_secNo11.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_secNo13');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_secNo13.setValue(value);
			break;
		case 'ipt_secNo12':
			shbObj.sCardTarget2 = target;
			var length = ipt_secNo12.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_secNo14');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_secNo14.setValue(value);
			break;
		case 'ipt_secNo13':
			shbObj.sCardTarget1 = target;
			var length = ipt_secNo13.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_secNo11');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_secNo11.setValue(value);
			break;
		case 'ipt_secNo14':
			shbObj.sCardTarget2 = target;
			var length = ipt_secNo14.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_secNo12');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_secNo12.setValue(value);
			break;
		case 'ipt_secNo21':
			shbObj.sCardTarget1 = target;
			var length = ipt_secNo21.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_secNo23');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_secNo23.setValue(value);
			break;
		case 'ipt_secNo22':
			shbObj.sCardTarget2 = target;
			var length = ipt_secNo22.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_secNo24');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_secNo24.setValue(value);
			break;
		case 'ipt_secNo23':
			shbObj.sCardTarget1 = target;
			var length = ipt_secNo23.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_secNo21');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_secNo21.setValue(value);
			break;
		case 'ipt_secNo24':
			shbObj.sCardTarget2 = target;
			var length = ipt_secNo24.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_secNo22');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_secNo22.setValue(value);
			break;
		case 'ipt_certSmartCardNo':
			shbObj.otpTarget = target;
			var length = ipt_certSmartCardNo.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_certSmartCardNo1');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_certSmartCardNo1.setValue(value);
			break;
		case 'ipt_certSmartCardNo1':
			shbObj.otpTarget = target;
			var length = ipt_certSmartCardNo1.getValue().length;
			var value = '';
			if (length === 1) {
				shbComm.raonObjClear('ipt_certSmartCardNo');
			}
			for (var i=0; i < length; i++) {
				value += '*';
			}
			ipt_certSmartCardNo.setValue(value);
			break;
	}
};
//팝업 모달처리시에 부모화면 스크롤 되지 않게 처리
shbComm.hiddenBodyScroll = function(hiddenYn, popId) {
	return;
	var bHidden = jsonLib.isNullObj(hiddenYn) ? true : WebSquare.util.getBoolean(hiddenYn);
	if( bHidden ) {
		var iScrollTop = $('body').scrollTop();
		$('body').css('overflow', 'hidden');
		$('#'+popId).css('top', (WebSquare.util.parseInt(strLib.getNumberOnly($('#'+popId).css('top')),0)-iScrollTop)+"px");
		shbObj.popupTopPostion = (!shbObj.popupTopPostion ? {} : shbObj.popupTopPostion);
		shbObj.popupTopPostion[popId] = iScrollTop;
		WebSquare.layer.showModal([popId]);
	} else {
		var noDisablePopList = [];
		var isExistModalPop = false;
		var popList = shbComm.getPopupList();
		if( !jsonLib.isNullObj(popList) && jsonLib.isArray(popList) && popList.length > 0 ){
			for( var i = popList.length-1; i >= 0; i-- ){
				if( popList[i].options.modal ) {
					isExistModalPop = true;
					noDisablePopList.push(popList[i].id);
					break;
				} else {
					noDisablePopList.push(popList[i].id);
				}
			}
		}
		WebSquare.layer.hideModal();
		if( isExistModalPop && noDisablePopList.length > 0 ) { WebSquare.layer.showModal(noDisablePopList); }

		if( "none" == $('#_modal').css('display') ) {
			$('body').css('overflow', 'visible');
			var iScrollTop = jsonLib.isNullObj(shbObj.popupTopPostion[popId]) ? 0 : shbObj.popupTopPostion[popId];
			$('body').scrollTop(iScrollTop);
		}
	}
};

// page unload event
shbComm.pageUnload = function(e) {
	shbComm.securityClearTimeout();
	/*if (shbComm.session.isLogin()) {
		shbComm.session.logout();
	}*/
};
// key event 
shbComm.keydown = function(e) {
	var remove = false;
	var key = 'which' in e ? e.which : e.keyCode;
	// F5
	if (key === 116) {
		remove = true;
	}
	// ctrl + R
	if (key === 82 && e.ctrlKey) {
		remove = true;
	}
	
	if (remove) {
		e.preventDefault();
		var menuCode;
		// TODO : shbObj.myParentId 지정된거 있는지 체크
		if (topWin.shbObj && topWin.shbObj.myParentId) {
			menuCode = topWin.shbObj.myParentId;
		// 없다면 현재 해시값으로 체크
		} else {
			menuCode = topWin.location.hash.replace(/^#/, '');
		}
		if (menuCode) {
			topWin.shbComm.goPage(topWin.shbComm.menu.getMenu(menuCode));
		} else {
			// TODO : 로그인 여부 따져서 각 센터별 전후 초화면으로 이동. index로 보내면 로그인 끊겨버린다
			//topWin.window.location.href = '/';
		}
	}
};

shbComm.raonCloseKeypad = function(objId, type) {
	if (typeof shbObj.raonCloseKeypad == "function") shbObj.raonCloseKeypad(objId, type)
};
shbComm.showProcessMessage = function() {
	shbComm.packageCnt++;
	WebSquare.layer.showProcessMessage("process");
	shbComm.checkShowProcessMsg();
	if (shbComm.packageCnt == 1) {
		//3초이내 hideProcessMessage가 갯수에 맞게 호출되지 않으면 강제로 hide한다.
		$w.setTimeout(function() {
			shbComm.packageCnt = 0;
			shbComm.hideProcessMessage();
		}, {
			key : 'clearPackageload',
			delay : 90000,	//90초이내 프로그래스바가 내려가지 않는 경우 발생하는 경우
			callback : function() {
				$w.clearTimeout('clearPackageload');
			}
		});
	}
};
shbComm.hideProcessMessage = function() {
	shbComm.packageCnt--;
	if (shbComm.packageCnt <= 0) {
		$w.clearTimeout('clearPackageload');
		//WebSquare.layer.hideProcessMessage();
		shbComm.checkHideProcessMsg();
		shbComm.packageCnt = 0;
	}
};
//submission 실행함수에서 호출한다.
shbComm.showProcessMsg = function(processMsg) {
	if (typeof processMsg == "undefined" || processMsg == "") processMsg = "Processing...";
	if (typeof shbComm.processMsgCnt == "undefined") {
		shbComm.processMsgCnt = 1;
	} else {
		shbComm.processMsgCnt = shbComm.processMsgCnt + 1;
	}
	WebSquare.layer.showProcessMessage(processMsg);
	shbComm.checkShowProcessMsg();
};
shbComm.hideProcessMsg = function() {
	try {
		if (typeof shbComm.processMsgCnt == "undefined") {
			//WebSquare.layer.hideProcessMessage();
			shbComm.checkHideProcessMsg()
		} else {
			shbComm.processMsgCnt = shbComm.processMsgCnt - 1;
			if (shbComm.processMsgCnt <= 0) {
				//WebSquare.layer.hideProcessMessage();
				shbComm.checkHideProcessMsg();
			}
			if (shbComm.processMsgCnt < 0) shbComm.processMsgCnt = 0;
		}
	} catch (e) {
		WebSquare.layer.hideProcessMessage();
	}
};
shbComm.checkShowProcessMsg = function() {
	if (frames["__processbarIFrame"] != undefined) {
		try {
			if (frames["__processbarIFrame"].reStart) {
				frames["__processbarIFrame"].reStart();
			}
		} catch (e) { }
	}
};
shbComm.checkHideProcessMsg = function() {
	if (frames["__processbarIFrame"] != undefined) {
		try {
			 if (frames["__processbarIFrame"].doStop) {
				 frames["__processbarIFrame"].doStop();
			 }
		} catch (e) {
			
		}
		WebSquare.layer.hideProcessMessage();  
		shbComm.packageCnt = 0;
	} else {
		$w.setTimeout(function() {
			if (shbComm.packageCnt == 0 && shbComm.processMsgCnt == 0) shbComm.checkHideProcessMsg();
		}, {
			key : 'clearProcessbarTimeout',
			delay : 500,
			callback : function() {
				$w.clearTimeout('clearProcessbarTimeout');
			}
		});
		
	}
};
// file download
shbComm.fileDownload = function(url, fileName, contentType) {
	if (typeof url =="undefined" || url == "") {
		shbComm.alert("filename is null");
		return;
	}
	if (typeof fileName == "undefined") fileName = "";
	if (typeof contentType == "undefined") contentType = "";
	//pdf, 이미지 파일인 경우는 새창을 띄워준다.
	var submitUrl = "";
	//if (url.toLowerCase().endsWith(".pdf") || url.toLowerCase().endsWith(".jpg") || url.toLowerCase().endsWith(".gif") || url.toLowerCase().endsWith(".png") ||url.toLowerCase().endsWith(".txt") ) {
	//	shbComm.openWindowPop("downloadPopup", url);
	//} else {
		var regExp = /^(http)/;
		if (regExp.test(url)) {
			if (shbComm.isHomepage()) {
				shbComm.openWindowPop("downloadPopup", url);
				return;
				//submitUrl = "/comjsp/fileDownload.jsp?fileUrl="+url+"&fileName="+fileName+"&contentType="+contentType;
			} else {
				if (url.toLowerCase().endsWith(".pdf") || url.toLowerCase().endsWith(".jpg") || url.toLowerCase().endsWith(".gif") || url.toLowerCase().endsWith(".png") ||url.toLowerCase().endsWith(".txt") ) {
					shbComm.openWindowPop("downloadPopup", url);
				} else {
					var downloadFrm = document.getElementById("__hiddenDownloadFrm__");
					if (!downloadFrm) {
						downloadFrm = document.createElement("iframe");
						downloadFrm.setAttribute("name", "__hiddenDownloadFrm__");
						downloadFrm.setAttribute("id", "__hiddenDownloadFrm__");
						downloadFrm.setAttribute("height", "0px");
						downloadFrm.setAttribute("frameborder", "0");
						downloadFrm.setAttribute("style", "position:absolute;top:0px");
						document.body.appendChild(downloadFrm);
					}
					downloadFrm.src = url;
				}
			}
		} else {
			submitUrl = "/comjsp/fileDownload.jsp?fileUrl="+url+"&fileName="+fileName+"&contentType="+contentType;
			shbComm.session.refreshSession();
		}
		if (submitUrl != "") $w.download(submitUrl);
	//}
};
shbComm.fileDownload2 = function(url, fileName, contentType) {
	// U2L file을 리눅스로 옮긴 후에는 원복 필요 
	shbComm.fileDownload(url);  
	/*   
	if (typeof url =="undefined" || url == "") {  
		shbComm.alert("filename is null");
		return;
	}
	if (typeof fileName == "undefined") fileName = "";
	if (typeof contentType == "undefined") contentType = "";
	submitUrl = "/comjsp/fileDownload.jsp?fileUrl="+url+"&fileName="+fileName+"&contentType="+contentType;
	shbComm.session.refreshSession();
	if (submitUrl != "") $w.download(submitUrl);
	*/
};
// 컴포넌트 엔터키 눌렀을때 함수 걸기 
shbComm.setEnterKeyEvent = function(arrObj, fnNm) {
	try {
		var objArr = [];
		if( jsonLib.isArray(arrObj) ) {
			for ( var i = 0; i < arrObj.length; i++) {
				if( (typeof arrObj[i]) == "string" ) {
					var obj = shbComm.getComponent(arrObj[i]);
					if( !jsonLib.isNullObj(obj) ) { objArr.push(obj); }
				} else {
					objArr.push(arrObj[i]);
				}
			}
		} else {
			if( (typeof arrObj) == "string" ) {
				var obj = shbComm.getComponent(arrObj);
				if( !jsonLib.isNullObj(obj) ) { objArr.push(obj); }
			} else {
				objArr.push(arrObj);
			}
		}
		var objFunc = WebSquare.util.getGlobalFunction(fnNm);
		if( objArr.length < 1 || (typeof objFunc != "function") ) { return; }
		for (var i = 0; i < objArr.length; i++) {
			try {
				if (typeof objFunc === "function") {
					objArr[i].bind("onkeyup", function(e) {
						if (e.keyCode === 13) {
							if (typeof this.getRef === "function") {
								var ref = this.getRef();
								var refArray = ref.substring(5).split(".");
								if ((typeof refArray !== "undefined") && (refArray.length === 2)) {
									var dataCollectionName = refArray[0];
									var columnId = refArray[1];
									var dataCollection = WebSquare.util.getComponentById(dataCollectionName);
									var dataType = dataCollection.getObjectType().toLowerCase();
									if (dataType === "datamap") {
										dataCollection.set(columnId, this.getValue());
									} else if ((dataType === 'datalist') && (typeof rowIndex !== "undefined")) {
										dataCollection.setCellData(rowIndex, columnId, this.getValue());
									}
								}
								objFunc();
							}
						}
					});
				}
			} catch(e) { 
				shbComm.log("[shbComm.setEnterKeyEvent] Exception :: " + e.message);
			} finally {
				dataCollection = null;
			}
		}
	} catch(e) { 
		shbComm.log("[shbComm.setEnterKeyEvent] Exception :: " + e.message);
	} finally {
		objArr = null;
	}
};
shbComm.clearPageResource = function() {
	var collectionArr = $w.data.getAllDataCollection();
	for (var i=0; i < collectionArr.length; i++) {
		var bFlag = WebSquare.DataCollection["stopBroadCast"];
		try {
			WebSquare.DataCollection["stopBroadCast"] = true;
			WebSquare.DataCollection.api.remove(collectionArr[i]);
			WebSquare.DataCollection["stopBroadCast"] = bFlag;
		} catch(e) {}
	}
	if (typeof videojs != "undefined") {
		for (var key in videojs.getPlayers()) {
			var obj = document.getElementById(key);
			clearInterval(obj.getAttribute("intervalKey"));
			videojs(key).dispose();
		}
	}
	var noop = function() {}; 
	var maxTimeout = setTimeout(noop, 0);
	var maxInterval = setInterval(noop, 0);
	//while (maxTimeout >= 0) { clearTimeout(maxTimeout); maxTimeout--; }
	//while (maxInterval >= 0) { clearInterval(maxInterval); maxInterval--; }
	// 키보드보안 세션 타이머 삭제
	shbComm.securityClearTimeout();
	// session timer 삭제
	if (shbComm.session.isLogin()) {
		shbComm.session.clearSessionTimer();
	}
	if (typeof TweenMax != "undefined") TweenMax.killAll();
};
//오늘본상품 관심상품 레이어 보이기 header.fncInit footer.fncInit에서 중복으로 실행함 shbComm.menu.loadMenuListCallback에서 footer.fncInit 실행됨 
shbComm.showfooterProductDiv = function(){
	try{
		var oMenuInfo = shbComm.menu.getCurrentMenuInfo();
		if( !jsonLib.isNullObj(oMenuInfo) ) {
			//cc 개인:1 자산관리:3 예금/신탁:01 ISA:02 대출:03 펀드:04 외환:05 퇴직연금:06 골드/실버:07 보험:08 미션플러스:09 , 자산관리:3/M폴리오/영업점제안
			var cc = shbComm.menu.getCurrentCenterInfo();
			if( strLib.isEmpty(cc) || "02" == cc || "06" == cc || "09" == cc ) { return; }//ISA,퇴직연금,미션플러스는 관심상품레이어 노출 제외 
			if( !strLib.isEmpty(oMenuInfo.DISPLAY_PRODUCT_YN) && "Y" == oMenuInfo.DISPLAY_PRODUCT_YN ) {
				if( !jsonLib.isNullObj(shbComm.getComponent("wfr_footer_product")) ) {
					if( "none" != wfr_footer_product.getStyle("display") ) { return; }
					var linkTag;
					var hasContentCss = false;
					var links = document.getElementsByTagName('link')
					for (var i=0;i<links.length;i++) {
						if (links[i].href && links[i].href.indexOf('/contents.css') > -1) {
							hasContentCss = true;
							break;
						}
					}
					if (!hasContentCss) {
						linkTag = document.createElement('link');
						linkTag.setAttribute('href', '/comcss/contents.css?dt='+shbComm.getCurrentServerDate() );
						linkTag.setAttribute('type', 'text/css');
						linkTag.setAttribute('rel', 'stylesheet');
						topWin.window.document.getElementsByTagName('head')[0].appendChild(linkTag);
					}
					wfr_footer_product.setSrc(shbComm.getSubContextPath() + "/include/div_product.xml");
					wfr_footer_product.show("");
				}
			}
		}
	} catch(e) {
		shbComm.printStackTrace(e);
	}	
};

shbComm.setIframeSrc = function(iframeObj, url) {
	if (typeof iframeObj == "string") {
		iframeObj = $w.comp[iframeObj];
	}
	if (url.indexOf("?") > 0) {
		url = url + "&";
	} else {
		url = url + "?";
	}
	url = url + "domainName="+encodeURIComponent(document.location.protocol+"//"+document.location.host)+"&iframeName="+iframeObj.id;
	iframeObj.setSrc(url);
	shbComm._iframeId = iframeObj.id;
};
shbComm.iframeResize = function(height, iframeName) {
	if (typeof iframeName == "undefined" || iframeName == "")  iframeName = shbComm._iframeId;
	var iframeObj = $w.comp[iframeName];
	iframeObj.setStyle("height", height+"px");
};
shbComm.initVideo = function(id, callback, autoPlay, seekControl) {
	var pVideo = videojs(id, {poster:"/img/temp/blank.gif"}).ready(function() {
		var player = this;
		var curTime = 0;
		player.on('ended', function() {
			var videoId = id;
			var player = videojs(id);
			if (typeof player.timerKey == "undefined" ) {
				if (typeof callback != "undefined" && callback != "") {
					WebSquare.util.getGlobalFunction(callback)();
				}
				var obj = document.getElementById(videoId);
				obj.setAttribute("isPlayComplete", "true");
			}
		});
		if (typeof seekControl == "undefined" || !seekControl) {
    		var intervalKey = setInterval(function() {
				var videoId = id;
				var player = videojs(id);
				if (typeof player.timerKey == "undefined") {
					var curTime = player.currentTime();
					var obj = document.getElementById(videoId);
					obj.setAttribute("currentTime", curTime);
				}
			}, 2000);
    		var obj = document.getElementById(id);
			obj.setAttribute("intervalKey", intervalKey);
			player.on('seeked', function() {
						var videoId = id;
						var player = videojs(id);
						var obj = document.getElementById(videoId);
						var curTime = obj.getAttribute("currentTime");
						var curTime2 = player.currentTime();
						if (curTime > curTime2) return;
						if (typeof player.timerKey != "undefined") {
							var obj = document.getElementById(videoId);
							var change = obj.getAttribute("changeTime");
							if (change == "true") {
								obj.setAttribute("changeTime", "");
								return;
							}
							clearTimeout(player.timerKey);
							delete player.timerKey;
						}
						player.timerKey = setTimeout((function(videoId) {
							clearTimeout(player.timerKey);
							delete player.timerKey;
							var obj = document.getElementById(videoId);
							curTime = obj.getAttribute("currentTime");
							player.currentTime(curTime);
							obj.setAttribute("changeTime", "true");
						}(videoId)), 1000); 
					});
		}
		if (typeof autoPlay == "undefined" || autoPlay) player.play();
	});
	return pVideo;
};
shbComm.isVideoViewComplete = function(id, minMin) {
	var player = videojs(id);
	var playTime = player.currentTime();
	var obj = document.getElementById(id);
	var isComplete = obj.getAttribute("isPlayComplete");
		if (typeof isComplete != "undefined" && isComplete == "true") {
			return true;
		} else {
    	if (typeof minSec == "undefined") {
			return false;
		} else if (parseInt(minMin,10)*60 < parseInt(playTime,10)) {
			return true;
		} else {
			return false;
		}
	}
};

shbComm.getSubContextPath = function() {
	if (shbComm.isHomepage()) return '/hpe';
	if (shbComm.isBanking()) return '/rib';
};

shbComm.isHomepage = function() {
	// TODO : www.shinhan.com property로
	if (topWin.location.href.indexOf(topWin.shbComm.hpeDomain) > -1 || topWin.location.href.indexOf('www.shinhan.com') > -1) {
		return true;
	}
	return false;
};
shbComm.isBanking = function() {
	if (topWin.location.href.indexOf(topWin.shbComm.ribDomain) > -1) {
		return true;
	}
	return false;
};

shbComm.isEasyService = function() {
	if (topWin.window.location.href.indexOf('/rib/easy') > -1) {
		return true;
	} else {
		return false;
	}
};
shbComm.isPremierService = function() {
	if (topWin.window.location.href.indexOf('/premier') > -1) {
		return true;
	} else {
		return false;
	}
};

//D.H.Koh 2019.10.04 Added PFM 자산관리 경로 추가로 인한 추가
shbComm.isPFMService = function() {
	if (topWin.window.location.href.indexOf('/pfm') > -1) { 
		return true;
	} else {
		return false;
	}
};

shbComm.openerRibGoPage = function(menuCode) {
	if (opener) {
		try {
			if (opener.topWin){
				opener.topWin.document.location.href = topWin.shbComm.ribDomain + "/index.jsp?cr=" + menuCode;
			} else {
				window.open(topWin.shbComm.ribDomain + "/index.jsp?cr=" + menuCode);
			}
		} catch (e) {
			window.open(topWin.shbComm.ribDomain + "/index.jsp?cr=" + menuCode);
		}
	} else {
		window.open(topWin.shbComm.ribDomain + "/index.jsp?cr=" + menuCode);
	}
};
shbComm.openerHpeGoPage = function(menuCode) {
	if (opener) {
		try {
			if (opener.topWin){
				opener.topWin.document.location.href = topWin.shbComm.hpeDomain + "/hpe/index.jsp?cr=" + menuCode;
			} else {
				window.open(topWin.shbComm.hpeDomain + "/hpe/index.jsp?cr=" + menuCode);
			}
		} catch (e) {
			window.open(topWin.shbComm.hpeDomain + "/hpe/index.jsp?cr=" + menuCode);
		}
	} else {
		window.open(topWin.shbComm.hpeDomain + "/hpe/index.jsp?cr=" + menuCode);
	}
};
shbComm.getHpePopupUrl = function(url) {
	return topWin.shbComm.hpeDomain+"/comjsp/popup.jsp?w2xPath="+url;
};
shbComm.getRibPopupUrl = function(url) {
	return topWin.shbComm.ribDomain+"/comjsp/popup.jsp?w2xPath="+url;
};
//상품상세화면으로 이동
shbComm.goProductDetail = function(pgb, pcd) {
	//"예금/신탁","외환","골드/실버","보험","대출","펀드"
	var mcdMap = {"1":"020102010110","2":"020504030200","3":"020703010600","4":"020802170000","5":"020308090000","6":"020406010300"};
	shbComm.goPage(mcdMap[pgb], {"param":{"pcd":pcd}});
};
shbComm.goProdMainPage = function(pcd) {
	var pcdType = "4";
	var t = pcd.substring(0,3);
	try {
		var t2 = parseInt(t, 10);
		if ((t2 >= 100 && t2 <= 169) || (t2 >= 200 && t2 <= 249)) {
			pcdType = "1";
		} else if (t2 >= 180 && t2 <= 185) {
			pcdType = "2";
		} else if (t2 >= 186 && t2 <= 189) {
			pcdType = "3";
		} else if (t2 == "SHB" || t2 == "CHB" || t2 == "SHC") {
			pcdType = "4";
		} else if (t2 >= 600 && t2 <= 799) {
			pcdType = "5";
		} else if (t2 >= 250 && t2 <= 259) {
			pcdType = "6";
		} else {
			alert("임시 alert입니다. 이건 어떤 상품코드인가요? ["+pcd+"]");
		}
	} catch(e) {
	}
	shbComm.goProductDetail(pcdType, pcd);
};
shbComm.goSSOMovePage = function(domain, menuCode, addQuery) {
	shbComm.showProcessMsg("processing");
	var frameObj = document.getElementById("hiddenSSOFrm");
	if (!frameObj) {
		frameObj = document.createElement("iframe");
		frameObj.setAttribute("id", "hiddenSSOFrm");
		frameObj.setAttribute("name", "hiddenSSOFrm");
		frameObj.setAttribute("scrolling", "no");
		frameObj.setAttribute("width", "100%");
		frameObj.setAttribute("height", "0px");
		frameObj.setAttribute("style","position:absolute;top:0px");
		frameObj.setAttribute("frameborder", "0");
		document.body.appendChild(frameObj);
	}
	var todayDate = new Date();
	frameObj.src = "/comjsp/moveDomainProcess.jsp?resDomain="+domain+"&menuCode="+menuCode+"&qs="+encodeURIComponent(addQuery)+"&idx="+todayDate.getTime()+"&lang="+shbComm.LANGUAGE;
};
shbComm.setLangMsg = function(m) {
	try {
		for (k in m) {
			var obj = WebSquare.util.getComponentById(k);
			if (obj) {
				obj.setValue(m[k][shbComm.LANGUAGE]);
			}
		}
	} catch(e) {
	}
};
shbComm.hideLangComp = function(compArr) {
	try {
		for (var i=0; i < compArr.length; i++) {
			var obj = WebSquare.util.getComponentById(compArr[i]);
			if (obj) {
				obj.hide();
			}
		}
	} catch(e) {
	}
};
shbComm.valideUserData = function(checkStr) {
	var ajaxOption = {};
	var result = false;
	var data = {};
	data.valid = checkStr;
	ajaxOption.action = "/comjsp/validateUserProcess.jsp";
	ajaxOption.mode = "synchronous"; //synchronous
	ajaxOption.mediatype = "application/json; charset=UTF-8";
	ajaxOption.method = "post";
	ajaxOption.requestData = JSON.stringify(data);
	ajaxOption.type = "text";
	ajaxOption.processMsg = "";
	ajaxOption.hideProcessMsg = false;
	ajaxOption.success = function(e){
		shbComm.saveWebLog(e);
		var rJson = JSON.parse(e.responseText);
		if (rJson.result == "true") {
			result = true;
		} else {
			result = false;
		}
	};
	ajaxOption.error = function(e){
		shbComm.saveWebLog(e);
		result = false;
	};
	//세션 리프레쉬
	shbComm.session.refreshSession();
	WebSquare.net.ajax(ajaxOption);
	return result;
};
shbComm.getTopWindow = function() {
	var t = window;
	while (t != window.top) {
		var t2 = t.parent ? t.parent : t.opener;
		try {
			var dom = t2.WebSuare;
			if (t2.document.domain == "shinhan.com") {
				t = t2;
			} else {
				break;
			}
		} catch (e) {
			break;
		}
	}
	return t;
};
shbComm.setSiteOverlay = function(pageId) {
	n_so_pid(pageId);
	n_addSiteoverlay();
};
shbComm.sleep = function(ms) {
	var start = new Date().getTime();
	for (var i=0; i < 1e7; i++) {
		if ((new Date().getTime() - start) > ms) {
			break;
		}
	}
};
window.onbeforeunload = function(e) {
	if (shbComm && shbComm.getPopupId() == "" && shbComm._startGoPage !== true) {
		var historyUrl = "";
		if (shbComm.isHomepage()) {
			historyUrl = topWin.shbComm.ribDomain;
		} else if (shbComm.isBanking()) {
			historyUrl = topWin.shbComm.hpeDomain;
		}
		shbComm.moveCheck = true;
		if (historyUrl != "" && shbComm.session.isLogin()) {
			$.ajax({
				dataType : "jsonp",
				url: historyUrl+"/comjsp/moveHistoryProcess.jsp",
				type : "GET",
				success: function(data, jqXHR) {
					shbComm.moveCheck = false;
				}, 
				error: function( data, jqXHR , textStatus , errorThrown ) {
					shbComm.moveCheck = false;
				}
			});
			for (var i=0; i < 2; i++) {
				shbComm.sleep(1000);
			}
		}
	}
};


/**************************************************************************	
* Desc      : 계좌 관리점번호, 우편번호 가까운지점 순으로 희망관리점 조회 (2021.04.19)
* Param     : param, callback 콜백함수명 
* Return    : callback
**************************************************************************/	
shbComm.getGrbrno = function(param, callback) {
	
	var reqCollectionID = "dm_S_SEARCH_BRANCH";

	/*------------------------------
	 * in/out datacollection create
	 *------------------------------*/
	var s_DataMap = {    "id": reqCollectionID
						,"type":"dataMap"
						,"option":{"baseNode":"map"}
						,"keyInfo":[
									 {"id":"우편번호"		,"dataType":"text"}
									,{"id":"지점번호" 		,"dataType":"text"}
									,{"id":"관리점구분"		,"dataType":"text"}
									,{"id":"탑스클럽관리점" 	,"dataType":"text"}
									,{"id":"CALL_BACK" 	,"dataType":"text"}
								  ]
	};
	
	$w.data.create(s_DataMap);
	
	/*------------------------------
	 * submission Create
	 *------------------------------*/		
	var submissionObj = {
			"id" : "sbm_SEARCH_BRANCH_TMB2419",
			"ref" : 'data:json,{"id":"dm_S_SEARCH_BRANCH","key":"dm_S_SEARCH_BRANCH"}',
			"target" : 'data:json,,{"id":"","key":"R_SEARCH_BRANCH"}',
			"action" : "",
			"method" : "post",
			"mediatype" : "application/json",
			"encoding" : "UTF-8",
			"mode" : "asynchronous",
			"processMsg" : "",
			"submitDoneHandler" : "",
			"submitErrorHandler" : "" 
		};

	$w.createSubmission(submissionObj);	
	
	var s_DataMap 		= $w.data["dm_S_SEARCH_BRANCH"];
	
	/*------------------------------
	 * in datacollection data setting
	 *------------------------------*/	
	// Request Param DataMap 설정
	$w.data[reqCollectionID].setJSON({
		"지점번호"     	: param.출금계좌관리점,
		"우편번호" 		: param.우편번호,
		"관리점구분"		: "출금계좌관리점",
		"CALL_BACK" : callback
	});
	
	/*------------------------------
	 * session data Call
	 *------------------------------*/	
	shbComm.getSession("system:고객성명;system:고객번호;user:탑스클럽관리점;", "", "shbComm.getGrbrnoCallback", "");
};

shbComm.getGrbrnoCallback = function(result) {

	var s_DataMap  = $w.data["dm_S_SEARCH_BRANCH"];
	var callbackFnNm 	= s_DataMap.get("CALL_BACK");
	
	/* 탑스클럽 관리점 여부(관리점없으면 계좌관리점여부 체크 계좌관리점 없으면 주소 관리점)*/
	if (typeof result.SESSION.탑스클럽관리점 != "undefined" && result.SESSION.탑스클럽관리점 != "" && result.SESSION.탑스클럽관리점 != "0") {
		var callbackResult = {};
		callbackResult.관리점   = result.SESSION.탑스클럽관리점;
		
		var callFn = WebSquare.util.getGlobalFunction(callbackFnNm);
		callFn(callbackResult);
	} else if (typeof s_DataMap.get("지점번호") != "undefined" && s_DataMap.get("지점번호") != ""){
		var callbackResult = {};
		callbackResult.관리점   = s_DataMap.get("지점번호");
		
		var callFn = WebSquare.util.getGlobalFunction(callbackFnNm);
		callFn(callbackResult);
	} else {
		shbComm.getGrbrnoByC2310();
	}
	
};

/**************************************************************************	
* Desc      : 고객정보 조회해서 고객우편번호 취득
* Param     : 없음
* Return    : 없음 	
**************************************************************************/	
shbComm.getGrbrnoByC2310 = function() {
	/*------------------------------
	 * validation 체크후 E9124 호출
	 *------------------------------*/
	var s_DataMap = $w.data["dm_S_SEARCH_BRANCH"];
	
	if (s_DataMap.get("우편번호") != ""){
		// 우편번호로 인근 관리점 조회
		shbComm.getGrbrnoByE9124();
		return;
	}
	
	/*------------------------------
	 * in/out datacollection create
	 *------------------------------*/
	var s_DataMapC2310 = {   "id":"dm_S_SEARCH_BRANCH_C2310"
							,"type":"dataMap"
							,"option":{"baseNode":"map"}
							,"keyInfo":[
							     {"id":"dummy" ,"dataType":"text"}
							] };
	
	$w.data.create(s_DataMapC2310);
	
	var submissionObj = {
				"id" : "sbm_SEARCH_BRANCH_C2310",
				"ref" : 'data:json,{"id":"dm_S_SEARCH_BRANCH_C2310","key":"S_SEARCH_BRANCH_C2310"}',
				"target" : 'data:json,[{"id":"","key":"R_RIBC2310"},{"id":"","key":"R_RIBC2310_1"},{"id":"","key":"R_RIBC2310_2"}]',
				"action" : "",
				"method" : "post",
				"mediatype" : "application/json",
				"encoding" : "UTF-8",
				"mode" : "asynchronous",
				"processMsg" : "",
				"submitDoneHandler" : "",
				"submitErrorHandler" : "" 
			};
	
	$w.createSubmission(submissionObj);
	
	/*------------------------------
	* submission option setting
	------------------------------*/
	var option = {
	      serviceType : 'MG'      // 서비스 구분
	    , serviceCode : 'C2310'   // 전문서비스 코드
	    , callBack : 'shbComm.getGrbrnoByC2310callback'
	};
	
	/*------------------------------
	* execute submission
	------------------------------*/
	shbComm.executeSubmission('sbm_SEARCH_BRANCH_C2310', option);	
};

shbComm.getGrbrnoByC2310callback  = function(result){
	
	var s_DataMap 		= $w.data["dm_S_SEARCH_BRANCH"];
	var callbackFnNm 	= s_DataMap.get("CALL_BACK");
	
	if (callbackFnNm !== "") {
		try {
			if (typeof result.R_RIBC2310_2 !== "undefined") {
				result = result.R_RIBC2310_2;
			}			
			
			if (result.length > 0){
				// 고객의 우편번호 취득후 우편번호로 인근 관리점 조회
				s_DataMap.set("우편번호" , result[0]["우편번호1"]);
				shbComm.getGrbrnoByE9124();
			} else {
				var callFn = WebSquare.util.getGlobalFunction(callbackFnNm);
				callFn({});
			}
		} catch (e) {
			shbComm.printStackTrace(e);
		}
	}
};

/**************************************************************************	
* Desc      : 고객우편번호를 이용한 관리점 조회
* Param     : 없음
* Return    : 없음 	
**************************************************************************/	
shbComm.getGrbrnoByE9124 = function() {
	
	/*------------------------------
	 * in/out datacollection create
	 *------------------------------*/
	var s_DataMapE9124 = {   "id":"dm_S_SEARCH_BRANCH_E9124"
							,"type":"dataMap"
							,"option":{"baseNode":"map"}
							,"keyInfo":[
							     {"id":"조회구분" ,"dataType":"text"}
								,{"id":"우편번호" ,"dataType":"text"}
							] };
	
	$w.data.create(s_DataMapE9124);
	
	var submissionObj = {
				"id" : "sbm_SEARCH_BRANCH_E9124",
				"ref" : 'data:json,{"id":"dm_S_SEARCH_BRANCH_E9124","key":"S_SEARCH_BRANCH_E9124"}',
				"target" : 'data:json,[{"id":"","key":"R_RIBE9124"},{"id":"","key":"R_RIBE9124_1"}]',
				"action" : "",
				"method" : "post",
				"mediatype" : "application/json",
				"encoding" : "UTF-8",
				"mode" : "asynchronous",
				"processMsg" : "",
				"submitDoneHandler" : "",
				"submitErrorHandler" : "" 
			};
	
	$w.createSubmission(submissionObj);
	
	/*------------------------------
	* input setting
	------------------------------*/
	var s_DataMap 		= $w.data["dm_S_SEARCH_BRANCH"];
	
	dm_S_SEARCH_BRANCH_E9124.set("조회구분", "2");
	dm_S_SEARCH_BRANCH_E9124.set("우편번호", s_DataMap.get("우편번호"));
	
	/*------------------------------
	* submission option setting
	------------------------------*/
	var option = {
	      serviceType : 'GU'      // 서비스 구분
	    , serviceCode : 'E9124'   // 전문서비스 코드
	    , callBack : 'shbComm.getGrbrnoByE9124callback'
	};
	
	/*------------------------------
	* execute submission
	------------------------------*/
	shbComm.executeSubmission('sbm_SEARCH_BRANCH_E9124', option);	
};

shbComm.getGrbrnoByE9124callback  = function(result){
	
	var s_DataMap 		= $w.data["dm_S_SEARCH_BRANCH"];
	var callbackFnNm 	= s_DataMap.get("CALL_BACK");
	
	if (callbackFnNm !== "") {
		try {
			if (typeof result.R_RIBE9124_1 !== "undefined") {
				result = result.R_RIBE9124_1;
			}
			
			var callbackResult = {};
			
			if (result.length > 0){
				callbackResult.관리점  = result[0]["지점번호"];
			}

			var callFn = WebSquare.util.getGlobalFunction(callbackFnNm);
			callFn(callbackResult);
			
		} catch (e) {
			shbComm.printStackTrace(e);
		}
	}
};