// 쿼리값 가져와서 리퍼러 값 가져오기
function getQueryStringObject() {
	var params = window.location.search.substr(1).split('&');
	if (params == '') return {};
	var paramObj = {};
	for (var i = 0; i < params.length; ++i) {
		var p = params[i].split('=', 2);
		if (p.length == 1) paramObj[p[0]] = '';
		else paramObj[p[0]] = decodeURIComponent(p[1].replace(/\+/g, ' '));
	}
	return paramObj;
}
var qs = getQueryStringObject(); 
console.log(">>>>>>>>> GoogleAnalyticsBuilder.js getQueryStringObject() :" +  JSON.stringify(qs));
var ga_referrer = (qs.referrer == undefined || qs.referrer == null ? "" : qs.referrer); 
var ga_campaignSource = (qs.utm_source == undefined || qs.utm_source == null ? "" : qs.utm_source); 
var ga_campaignMedium = (qs.utm_medium == undefined || qs.utm_medium == null ? "" : qs.utm_medium); 
var ga_campaignName = (qs.utm_campaign == undefined || qs.utm_campaign == null ? "" : qs.utm_campaign); 
var ga_campaignContent = (qs.utm_content == undefined || qs.utm_content == null ? "" : qs.utm_content); 
var ga_campaignKeyword = (qs.utm_term == undefined || qs.utm_term == null ? "" : qs.utm_term);

/* key-setting script */
// 맞춤 측정 기준 & 맞춤 측정 항목 정의
GACustomKey = {};
GACustomKey.Dimension1 = 'dimension1';
GACustomKey.Dimension2 = 'dimension2';
GACustomKey.Dimension3 = 'dimension3';
GACustomKey.Dimension4 = 'dimension4';
GACustomKey.Dimension5 = 'dimension5';
GACustomKey.Dimension6 = 'dimension6';
GACustomKey.Dimension7 = 'dimension7';
GACustomKey.Dimension8 = 'dimension8';
GACustomKey.Dimension9 = 'dimension9';
GACustomKey.Dimension10 = 'dimension10';
GACustomKey.Dimension11 = 'dimension11';
GACustomKey.Dimension12 = 'dimension12';
GACustomKey.Dimension13 = 'dimension13';
GACustomKey.Dimension14 = 'dimension14';
GACustomKey.Dimension15 = 'dimension15';
GACustomKey.Dimension16 = 'dimension16';
GACustomKey.Dimension17 = 'dimension17';
GACustomKey.Dimension18 = 'dimension18';
GACustomKey.Dimension19 = 'dimension19';
GACustomKey.Dimension20 = 'dimension20';
GACustomKey.Dimension21 = 'dimension21';
GACustomKey.Dimension22 = 'dimension22';
GACustomKey.Dimension23 = 'dimension23';
GACustomKey.Dimension24 = 'dimension24';
GACustomKey.Dimension25 = 'dimension25';
GACustomKey.Dimension26 = 'dimension26';
GACustomKey.Dimension27 = 'dimension27';
GACustomKey.Dimension28 = 'dimension28';
GACustomKey.Dimension29 = 'dimension29';
GACustomKey.Dimension30 = 'dimension30';
GACustomKey.Dimension31 = 'dimension31';
GACustomKey.Dimension32 = 'dimension32';
GACustomKey.Dimension33 = 'dimension33';
GACustomKey.Dimension34 = 'dimension34';
GACustomKey.Dimension35 = 'dimension35';
GACustomKey.Dimension36 = 'dimension36';
GACustomKey.Dimension37 = 'dimension37';
GACustomKey.Dimension38 = 'dimension38';
GACustomKey.Dimension39 = 'dimension39';
GACustomKey.Dimension40 = 'dimension40';
GACustomKey.Dimension41 = 'dimension41';
GACustomKey.Dimension42 = 'dimension42';
GACustomKey.Dimension43 = 'dimension43';
GACustomKey.Dimension44 = 'dimension44';
GACustomKey.Dimension45 = 'dimension45';
GACustomKey.Dimension46 = 'dimension46';
GACustomKey.Dimension47 = 'dimension47';
GACustomKey.Dimension48 = 'dimension48';
GACustomKey.Dimension49 = 'dimension49';
GACustomKey.Dimension50 = 'dimension50';

GACustomKey.Metric1 = 'metric1';
GACustomKey.Metric2 = 'metric2';
GACustomKey.Metric3 = 'metric3';
GACustomKey.Metric4 = 'metric4';
GACustomKey.Metric5 = 'metric5';
GACustomKey.Metric6 = 'metric6';
GACustomKey.Metric7 = 'metric7';
GACustomKey.Metric8 = 'metric8';
GACustomKey.Metric9 = 'metric9';
GACustomKey.Metric10 = 'metric10';
GACustomKey.Metric11 = 'metric11';
GACustomKey.Metric12 = 'metric12';
GACustomKey.Metric13 = 'metric13';
GACustomKey.Metric14 = 'metric14';
GACustomKey.Metric15 = 'metric15';
GACustomKey.Metric16 = 'metric16';
GACustomKey.Metric17 = 'metric17';
GACustomKey.Metric18 = 'metric18';
GACustomKey.Metric19 = 'metric19';
GACustomKey.Metric20 = 'metric20';
GACustomKey.UACode = 'UACode';

GAHitKey = {};
GAHitKey.CID = 'clientId';
GAHitKey.Title = 'title';
GAHitKey.UserId = 'userId';
GAHitKey.URL = 'location';
GAHitKey.EventCategory = 'eventCategory';
GAHitKey.EventAction = 'eventAction';
GAHitKey.EventLabel = 'eventLabel';
GAHitKey.EventValue = 'eventValue';
GAHitKey.NonInteraction = 'nonInteraction';

GAHitKey.campaignContent = 'campaignContent';
GAHitKey.campaignId = 'campaignId';
GAHitKey.campaignKeyword = 'campaignKeyword';
GAHitKey.campaignMedium = 'campaignMedium';
GAHitKey.campaignSource = 'campaignSource';
GAHitKey.campaignName = 'campaignName';

/* Main Script */
var Scheme = 'jscall://';
var UAcode = 'UA-117605458-2';
var GTMcode = 'GTM-WL6GRL6';
var AndroidWebview = 'GA_Android';
var iOS_Webview_WK = 'GA_iOS_WK';
var iOS_WebView_UI = 'GA_iOS_UI';
var CustomObject = { dimension: {}, metric: {} };

var gaLoad = { GTM: true, GA: true, APP: false };
var browserInfo = navigator.userAgent;
if (browserInfo.indexOf(AndroidWebview) > -1 || browserInfo.indexOf(iOS_Webview_WK) > -1 || browserInfo.indexOf(iOS_WebView_UI) > -1) {
	gaLoad.APP = true;
}
// 스킴명 선언

// GA 스니펫 코드 로드
(function(i, s, o, g, r, a, m) {
	i['GoogleAnalyticsObject'] = r;
	(i[r] =
		i[r] ||
		function() {
			(i[r].q = i[r].q || []).push(arguments);
		}),
		(i[r].l = 1 * new Date());
	(a = s.createElement(o)), (m = s.getElementsByTagName(o)[0]);
	a.async = 1;
	a.src = g;
	m.parentNode.insertBefore(a, m);
})(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');
ga('create', UAcode, 'auto', 'gp');
ga('gp.set', 'anonymizeIp', true);


// GTM 스니펫 코드 로드
if (
	browserVersionCheck === 'MSIE 5' ||
	browserVersionCheck === 'MSIE 6' ||
	browserVersionCheck === 'MSIE 7' ||
	browserVersionCheck === 'MSIE 8'
) {
	gaLoad.GTM = false;
}
if (gaLoad.GTM) {
	(function(a, s, y, n, c, h, i, d, e) {
		s.className += ' ' + y;
		h.start = 1 * new Date();
		h.end = i = function() {
			s.className = s.className.replace(RegExp(' ?' + y), '');
		};
		(a[n] = a[n] || []).hide = h;
		setTimeout(function() {
			i();
			h.end = null;
		}, c);
		h.timeout = c;
	})(window, document.documentElement, 'async-hide', 'dataLayer', 4000, { 'GTM-MPF8RDC': true });

	(function(w, d, s, l, i) {
		w[l] = w[l] || [];
		w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });
		var f = d.getElementsByTagName(s)[0],
			j = d.createElement(s),
			dl = l != 'dataLayer' ? '&l=' + l : '';
		j.async = true;
		j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
		f.parentNode.insertBefore(j, f);
	})(window, document, 'script', 'dataLayer', GTMcode);
}

// GA 이벤트 전송 (WEB,APP) --> 맞춤 측정 기준이 페이지 내에 변경 및 추가가 있을 경우 사용
function GADatasend_Event(GAInfo_GA) {
	var GAInfo = {};
	var _category = '';
	var _action = '';
	if (!gaLoad.APP) {
		GAInfo.hitType = 'event';
		for (key in GAInfo_GA) {
			if (key.indexOf('dimension') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('metric') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('userId') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('location') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('title') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('eventLabel') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('eventValue') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('eventCategory') !== -1) {
				_category = GAInfo_GA[key];
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('eventAction') !== -1) {
				_action = GAInfo_GA[key];
				GAInfo[key] = GAInfo_GA[key];
			}
		}
		if (_category.length > 0 && _action.length > 0) {
			ga('gp.send', GAInfo);
		}
	} else {
		var emptyObject = JSON.parse(JSON.stringify(CustomObject));
		emptyObject.type = 'E';
		for (key in GAInfo_GA) {
			if (key.indexOf('dimension') !== -1) {
				emptyObject.dimension[key] = GAInfo_GA[key];
			}
			if (key.indexOf('metric') !== -1) {
				emptyObject.metric[key] = GAInfo_GA[key];
			}
			if (key.indexOf('userId') !== -1) {
				emptyObject[key] = GAInfo_GA[key];
			}
			if (key.indexOf('location') !== -1) {
				emptyObject[key] = GAInfo_GA[key];
			}
			if (key.indexOf('title') !== -1) {
				emptyObject[key] = GAInfo_GA[key];
			}
			if (key.indexOf('eventLabel') !== -1) {
				emptyObject['label'] = GAInfo_GA[key];
			}
			if (key.indexOf('eventValue') !== -1) {
				emptyObject['value'] = GAInfo_GA[key];
			}
			if (key.indexOf('eventCategory') !== -1) {
				_category = GAInfo_GA[key];
				emptyObject['category'] = GAInfo_GA[key];
			}
			if (key.indexOf('eventAction') !== -1) {
				_action = GAInfo_GA[key];
				emptyObject['action'] = GAInfo_GA[key];
			}
		}
		if (_category.length > 0 && _action.length > 0) {
			if (browserInfo.indexOf(AndroidWebview) > -1) {
				window.Android.GA_DATA(JSON.stringify(emptyObject));
			} else if (browserInfo.indexOf(iOS_Webview_WK) > -1) {
				webkit.messageHandlers.callbackHandler.postMessage(JSON.stringify(emptyObject));
			} else if (browserInfo.indexOf(iOS_WebView_UI) > -1) {
				window.location = Scheme + JSON.stringify(emptyObject);
			}
		}
	}
}

// GA 페이지뷰 전송 (WEB,APP)
// 기본 페이지뷰를 제외하고 페이지뷰는 보내고 싶은데 맞춤 측정 기준의 변경 및 추가가 있을 때 사용하는 함수
function GADatasend_Page(GAInfo_GA) {
	var GAInfo = {};
	if (!gaLoad.APP) {
		GAInfo.hitType = 'pageview';
		if (ga_referrer !== null && ga_referrer !== '') {
			ga('gp.set', 'referrer', ga_referrer);
			// 해당 리퍼러 if문 처리에 utm 처리 코드 추가하였습니다
			if (ga_campaignSource !== null && ga_campaignSource !== '') {
				ga('gp.set', 'campaignSource', ga_campaignSource);
			}
			if (ga_campaignMedium !== null && ga_campaignMedium !== '') {
				ga('gp.set', 'campaignMedium', ga_campaignMedium);
			}
			if (ga_campaignName !== null && ga_campaignName !== '') {
				ga('gp.set', 'campaignName', ga_campaignName);
			}
			if (ga_campaignContent !== null && ga_campaignContent !== '') {
				ga('gp.set', 'campaignContent', ga_campaignContent);
			}
			if (ga_campaignKeyword !== null && ga_campaignKeyword !== '') {
				ga('gp.set', 'campaignKeyword', ga_campaignKeyword);
			}
		}
		for (key in GAInfo_GA) {
			if (key.indexOf('dimension') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('metric') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('userId') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('location') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
			if (key.indexOf('title') !== -1) {
				GAInfo[key] = GAInfo_GA[key];
			}
		}
		ga('gp.send', GAInfo);
	} else {
		var emptyObject = JSON.parse(JSON.stringify(CustomObject));
		emptyObject.type = 'P';
		for (key in GAInfo_GA) {
			if (key.indexOf('dimension') !== -1) {
				emptyObject.dimension[key] = GAInfo_GA[key];
			}
			if (key.indexOf('metric') !== -1) {
				emptyObject.metric[key] = GAInfo_GA[key];
			}
			if (key.indexOf('userId') !== -1) {
				emptyObject[key] = GAInfo_GA[key];
			}
			if (key.indexOf('location') !== -1) {
				emptyObject[key] = GAInfo_GA[key];
			}
			if (key.indexOf('title') !== -1) {
				emptyObject[key] = GAInfo_GA[key];
			}
		}

		if (browserInfo.indexOf(AndroidWebview) > -1) {
			window.Android.GA_DATA(JSON.stringify(emptyObject));
		} else if (browserInfo.indexOf(iOS_Webview_WK) > -1) {
			webkit.messageHandlers.callbackHandler.postMessage(JSON.stringify(emptyObject));
		} else if (browserInfo.indexOf(iOS_WebView_UI) > -1) {
			window.location = Scheme + JSON.stringify(emptyObject);
		}
	}
}


// 일반 이벤트 세팅 --> 페이지 로드할때와 맞춤 측정 기준의 변경이 없을 경우에는 사용하는 함수
function GA_Event(_category, _action, _label) {
	if (!gaLoad.APP) {
		var GAInfo = {};
		GAInfo.hitType = 'event';
		GAInfo.eventCategory = _category;
		GAInfo.eventAction = _action;
		GAInfo.eventLabel = _label;
		ga('gp.send', GAInfo);
	} else {
		var emptyObject = JSON.parse(JSON.stringify(CustomObject));
		emptyObject.type = 'E';

		if (_category != null && _category.length > 0) {
			emptyObject['category'] = _category;
		}
		if (_action != null && _action.length > 0) {
			emptyObject['action'] = _action;
		}
		if (_label != null && _label.length > 0) {
			emptyObject['label'] = _label;
		}

		if (browserInfo.indexOf(AndroidWebview) > -1) {
			window.Android.GA_DATA(JSON.stringify(emptyObject));
		} else if (browserInfo.indexOf(iOS_Webview_WK) > -1) {
			webkit.messageHandlers.callbackHandler.postMessage(JSON.stringify(emptyObject));
		} else if (browserInfo.indexOf(iOS_WebView_UI) > -1) {
			window.location = Scheme + JSON.stringify(emptyObject);
		}
	}
}

function GTMsetCustomDimension(GAInfo_GTM) {
	try {
		var GAInfo = {};
		for (key in GAInfo_GTM) {
			if (key.indexOf('dimension') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('metric') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('title') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('userId') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('campaignContent') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('campaignId') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('campaignKeyword') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('campaignMedium') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('campaignSource') !== -1) GAInfo[key] = GAInfo_GTM[key];
			if (key.indexOf('campaignName') !== -1) GAInfo[key] = GAInfo_GTM[key];
		}
		dataLayer = [GAInfo];
	} catch (e) {}
}

var browserVersionCheck = (function() {
	var userAgentbrowser = navigator.userAgent,
		tem,
		M = userAgentbrowser.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
	if (/trident/i.test(M[1])) {
		tem = /\brv[ :]+(\d+)/g.exec(userAgentbrowser) || [];
		return 'IE ' + (tem[1] || '');
	}
	if (M[1] === 'Chrome') {
		tem = userAgentbrowser.match(/\b(OPR|Edge)\/(\d+)/);
		if (tem != null)
			return tem
				.slice(1)
				.join(' ')
				.replace('OPR', 'Opera');
	}
	M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
	if ((tem = userAgentbrowser.match(/version\/(\d+)/i)) != null) M.splice(1, 1, tem[1]);
	return M.join(' ');
})();
